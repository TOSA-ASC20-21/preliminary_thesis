

    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1038.82', width=5)

width < len (9) in center_string(outstring, '539671.94', width=6)

width < len (12) in center_string(outstring, '604770985.34', width=8)

width < len (7) in center_string(outstring, '2817.41', width=6)

width < len (7) in center_string(outstring, '4421.00', width=5)

width < len (16) in center_string(outstring, ' 9.7726(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254149(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3980.27', width=5)

width < len (16) in center_string(outstring, ' 7.9213(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922348(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4412.42', width=5)

width < len (16) in center_string(outstring, ' 9.7347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4406.94', width=5)

width < len (16) in center_string(outstring, ' 9.7106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4400.69', width=5)

width < len (16) in center_string(outstring, ' 9.6831(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4393.70', width=5)

width < len (16) in center_string(outstring, ' 9.6523(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4385.95', width=5)

width < len (16) in center_string(outstring, ' 9.6183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.48', width=5)

width < len (16) in center_string(outstring, ' 9.5812(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM77.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.56', width=5)

width < len (9) in center_string(outstring, '393979.62', width=6)

width < len (12) in center_string(outstring, '614474264.48', width=8)

width < len (7) in center_string(outstring, '3304.79', width=6)

width < len (7) in center_string(outstring, '4397.79', width=5)

width < len (16) in center_string(outstring, ' 9.6703(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.777(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.74', width=5)

width < len (16) in center_string(outstring, ' 9.6569(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4390.92', width=5)

width < len (16) in center_string(outstring, ' 9.6401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026332(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.39', width=5)

width < len (16) in center_string(outstring, ' 9.6202(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035109(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927292(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.17', width=5)

width < len (16) in center_string(outstring, ' 9.5973(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043887(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4375.26', width=5)

width < len (16) in center_string(outstring, ' 9.5715(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052664(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4368.67', width=5)

width < len (16) in center_string(outstring, ' 9.5426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4361.41', width=5)

width < len (16) in center_string(outstring, ' 9.5109(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM59.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '632.45', width=5)

width < len (9) in center_string(outstring, '200087.50', width=6)

width < len (12) in center_string(outstring, '590042506.96', width=8)

width < len (7) in center_string(outstring, '2353.84', width=6)

width < len (7) in center_string(outstring, '4360.51', width=5)

width < len (16) in center_string(outstring, ' 9.5070(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253948(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.38', width=5)

width < len (16) in center_string(outstring, ' 9.4978(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.46', width=5)

width < len (16) in center_string(outstring, ' 9.4850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.79', width=5)

width < len (16) in center_string(outstring, ' 9.4690(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.37', width=5)

width < len (16) in center_string(outstring, ' 9.4498(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930603(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.80', width=5)

width < len (16) in center_string(outstring, ' 7.6550(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933411(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.32', width=5)

width < len (16) in center_string(outstring, ' 9.4019(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936234(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.71', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939041(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM10.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '588.87', width=5)

width < len (9) in center_string(outstring, '173477.67', width=6)

width < len (12) in center_string(outstring, '589669830.37', width=8)

width < len (7) in center_string(outstring, '1454.57', width=6)

width < len (7) in center_string(outstring, '4357.90', width=5)

width < len (16) in center_string(outstring, ' 9.4957(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.08', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.48', width=5)

width < len (16) in center_string(outstring, ' 9.4764(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.12', width=5)

width < len (16) in center_string(outstring, ' 9.4618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927750(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.01', width=5)

width < len (16) in center_string(outstring, ' 9.4439(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.16', width=5)

width < len (16) in center_string(outstring, ' 9.4228(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.48', width=5)

width < len (16) in center_string(outstring, ' 7.6342(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.27', width=5)

width < len (16) in center_string(outstring, ' 9.3713(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.4)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.6(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM1.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '493.54', width=5)

width < len (9) in center_string(outstring, '121879.53', width=6)

width < len (12) in center_string(outstring, '607240195.38', width=8)

width < len (7) in center_string(outstring, '3043.26', width=6)

width < len (7) in center_string(outstring, '4368.88', width=5)

width < len (16) in center_string(outstring, ' 9.5436(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254657(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.78', width=5)

width < len (16) in center_string(outstring, ' 9.5344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.88', width=5)

width < len (16) in center_string(outstring, ' 9.5217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.23', width=5)

width < len (16) in center_string(outstring, ' 9.5058(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.84', width=5)

width < len (16) in center_string(outstring, ' 9.4867(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.70', width=5)

width < len (16) in center_string(outstring, ' 9.4643(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.84', width=5)

width < len (16) in center_string(outstring, ' 9.4388(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936905(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.25', width=5)

width < len (16) in center_string(outstring, ' 9.4102(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939713(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM21.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '590.18', width=5)

width < len (9) in center_string(outstring, '174246.56', width=6)

width < len (12) in center_string(outstring, '589908602.75', width=8)

width < len (7) in center_string(outstring, '1448.67', width=6)

width < len (7) in center_string(outstring, '4358.71', width=5)

width < len (16) in center_string(outstring, ' 9.4992(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.92', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.34', width=5)

width < len (16) in center_string(outstring, ' 9.4801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.01', width=5)

width < len (16) in center_string(outstring, ' 9.4656(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.93', width=5)

width < len (16) in center_string(outstring, ' 9.4479(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.11', width=5)

width < len (16) in center_string(outstring, ' 9.4269(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.18', width=5)

width < len (16) in center_string(outstring, ' 7.6369(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.27', width=5)

width < len (16) in center_string(outstring, ' 9.3756(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM0.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '888.58', width=5)

width < len (9) in center_string(outstring, '394883.34', width=6)

width < len (12) in center_string(outstring, '619264808.41', width=8)

width < len (7) in center_string(outstring, '3292.21', width=6)

width < len (7) in center_string(outstring, '4399.17', width=5)

width < len (16) in center_string(outstring, ' 9.6763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017142(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.16', width=5)

width < len (16) in center_string(outstring, ' 9.6763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.15', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911285(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.12', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068570(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.10', width=5)

width < len (16) in center_string(outstring, ' 9.6760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00085712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.906937(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.06', width=5)

width < len (16) in center_string(outstring, ' 9.6759(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.02', width=5)

width < len (16) in center_string(outstring, ' 9.6757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00119997(23)', width=12)

width < len (15) in center_string(outstring, ' 166.902573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4398.97', width=5)

width < len (16) in center_string(outstring, ' 9.6755(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00137139(23)', width=12)

width < len (15) in center_string(outstring, ' 166.900391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM60.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '515.52', width=5)

width < len (9) in center_string(outstring, '132972.08', width=6)

width < len (12) in center_string(outstring, '577144439.00', width=8)

width < len (7) in center_string(outstring, '3223.80', width=6)

width < len (7) in center_string(outstring, '4368.33', width=5)

width < len (16) in center_string(outstring, ' 9.5412(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.23', width=5)

width < len (16) in center_string(outstring, ' 9.5320(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018374(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.33', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.67', width=5)

width < len (16) in center_string(outstring, ' 9.5034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036748(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927658(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.27', width=5)

width < len (16) in center_string(outstring, ' 9.4842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045935(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3915.86', width=5)

width < len (16) in center_string(outstring, ' 7.6670(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055122(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4344.26', width=5)

width < len (16) in center_string(outstring, ' 9.4363(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.86', width=5)

width < len (16) in center_string(outstring, ' 7.6123(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073495(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM20.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.30', width=5)

width < len (8) in center_string(outstring, '66444.11', width=6)

width < len (12) in center_string(outstring, '592724636.81', width=8)

width < len (7) in center_string(outstring, '1940.80', width=6)

width < len (7) in center_string(outstring, '4370.69', width=5)

width < len (16) in center_string(outstring, ' 9.5515(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.078(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.52', width=5)

width < len (16) in center_string(outstring, ' 9.5420(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.56', width=5)

width < len (16) in center_string(outstring, ' 9.5291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027234(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.87', width=5)

width < len (16) in center_string(outstring, ' 9.5130(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.45', width=5)

width < len (16) in center_string(outstring, ' 9.4937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931488(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3919.98', width=5)

width < len (16) in center_string(outstring, ' 7.6831(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054467(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4346.43', width=5)

width < len (16) in center_string(outstring, ' 9.4457(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063545(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.85', width=5)

width < len (16) in center_string(outstring, ' 9.4172(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(2.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(7.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM31.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '683.91', width=5)

width < len (9) in center_string(outstring, '233958.92', width=6)

width < len (12) in center_string(outstring, '596102663.20', width=8)

width < len (7) in center_string(outstring, '4248.98', width=6)

width < len (7) in center_string(outstring, '4384.30', width=5)

width < len (16) in center_string(outstring, ' 9.6111(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.960(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253681(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.86', width=5)

width < len (16) in center_string(outstring, ' 9.6003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017921(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.63', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.67', width=5)

width < len (16) in center_string(outstring, ' 9.5689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927399(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.99', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044802(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3928.71', width=5)

width < len (16) in center_string(outstring, ' 7.7174(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053762(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932922(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(18)', width=10)

width < len (7) in center_string(outstring, '4358.48', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.68', width=5)

width < len (16) in center_string(outstring, ' 9.4686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071683(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM42.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '663.70', width=5)

width < len (9) in center_string(outstring, '220340.19', width=6)

width < len (12) in center_string(outstring, '590599302.93', width=8)

width < len (7) in center_string(outstring, '3172.54', width=6)

width < len (7) in center_string(outstring, '4363.39', width=5)

width < len (16) in center_string(outstring, ' 9.5196(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.15', width=5)

width < len (16) in center_string(outstring, ' 9.5098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.11', width=5)

width < len (16) in center_string(outstring, ' 9.4966(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4354.31', width=5)

width < len (16) in center_string(outstring, ' 9.4800(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.77', width=5)

width < len (16) in center_string(outstring, ' 9.4603(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.59', width=5)

width < len (16) in center_string(outstring, ' 7.6503(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.48', width=5)

width < len (16) in center_string(outstring, ' 9.4112(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936295(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.75', width=5)

width < len (16) in center_string(outstring, ' 9.3820(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939102(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM13.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.22', width=5)

width < len (9) in center_string(outstring, '171331.62', width=6)

width < len (12) in center_string(outstring, '589708019.19', width=8)

width < len (7) in center_string(outstring, '1543.66', width=6)

width < len (7) in center_string(outstring, '4358.60', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.62', width=5)

width < len (16) in center_string(outstring, ' 9.4901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921112(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.86', width=5)

width < len (16) in center_string(outstring, ' 9.4781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.34', width=5)

width < len (16) in center_string(outstring, ' 9.4628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4346.08', width=5)

width < len (16) in center_string(outstring, ' 9.4442(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.88', width=5)

width < len (16) in center_string(outstring, ' 7.6553(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.34', width=5)

width < len (16) in center_string(outstring, ' 9.3976(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.88', width=5)

width < len (16) in center_string(outstring, ' 9.3696(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM4.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '401.15', width=5)

width < len (8) in center_string(outstring, '80548.98', width=6)

width < len (12) in center_string(outstring, '607366987.00', width=8)

width < len (7) in center_string(outstring, '2226.21', width=6)

width < len (7) in center_string(outstring, '4369.36', width=5)

width < len (16) in center_string(outstring, ' 9.5457(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255166(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.24', width=5)

width < len (16) in center_string(outstring, ' 9.5364(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.33', width=5)

width < len (16) in center_string(outstring, ' 9.5237(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926163(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.67', width=5)

width < len (16) in center_string(outstring, ' 9.5077(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928955(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.28', width=5)

width < len (16) in center_string(outstring, ' 9.4886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.14', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.29', width=5)

width < len (16) in center_string(outstring, ' 9.4408(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.71', width=5)

width < len (16) in center_string(outstring, ' 9.4122(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM24.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '993.27', width=5)

width < len (9) in center_string(outstring, '493393.78', width=6)

width < len (12) in center_string(outstring, '602378680.97', width=8)

width < len (7) in center_string(outstring, '3142.07', width=6)

width < len (7) in center_string(outstring, '4410.67', width=5)

width < len (16) in center_string(outstring, ' 9.7270(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.696(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255263(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.21', width=5)

width < len (16) in center_string(outstring, ' 9.7118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923416(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4403.00', width=5)

width < len (16) in center_string(outstring, ' 9.6932(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026087(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.08', width=5)

width < len (16) in center_string(outstring, ' 9.6716(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034783(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '3953.59', width=5)

width < len (16) in center_string(outstring, ' 7.8154(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043479(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931473(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4386.19', width=5)

width < len (16) in center_string(outstring, ' 9.6194(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934158(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.24', width=5)

width < len (16) in center_string(outstring, ' 9.5889(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060871(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4371.62', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069566(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM70.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '358.71', width=5)

width < len (8) in center_string(outstring, '64420.47', width=6)

width < len (12) in center_string(outstring, '608281152.93', width=8)

width < len (7) in center_string(outstring, '1910.67', width=6)

width < len (7) in center_string(outstring, '4372.75', width=5)

width < len (16) in center_string(outstring, ' 9.5605(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.097(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4370.59', width=5)

width < len (16) in center_string(outstring, ' 9.5511(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018193(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922836(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.65', width=5)

width < len (16) in center_string(outstring, ' 9.5382(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925629(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.95', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.53', width=5)

width < len (16) in center_string(outstring, ' 9.5028(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.37', width=5)

width < len (16) in center_string(outstring, ' 9.4803(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054579(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.49', width=5)

width < len (16) in center_string(outstring, ' 9.4547(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.90', width=5)

width < len (16) in center_string(outstring, ' 9.4261(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939560(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.370 sec, System: 0.000 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM30.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1027.29', width=5)

width < len (9) in center_string(outstring, '527759.62', width=6)

width < len (12) in center_string(outstring, '605832890.89', width=8)

width < len (7) in center_string(outstring, '2572.46', width=6)

width < len (7) in center_string(outstring, '4425.26', width=5)

width < len (16) in center_string(outstring, ' 9.7915(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253806(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3983.68', width=5)

width < len (16) in center_string(outstring, ' 7.9349(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922012(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.49', width=5)

width < len (16) in center_string(outstring, ' 9.7527(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4410.90', width=5)

width < len (16) in center_string(outstring, ' 9.7280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.56', width=5)

width < len (16) in center_string(outstring, ' 9.7001(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.45', width=5)

width < len (16) in center_string(outstring, ' 9.6688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.61', width=5)

width < len (16) in center_string(outstring, ' 9.6343(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936081(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.03', width=5)

width < len (16) in center_string(outstring, ' 9.5967(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM81.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '673.76', width=5)

width < len (9) in center_string(outstring, '227072.30', width=6)

width < len (12) in center_string(outstring, '595932078.71', width=8)

width < len (7) in center_string(outstring, '4283.96', width=6)

width < len (7) in center_string(outstring, '4383.88', width=5)

width < len (16) in center_string(outstring, ' 9.6092(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.992(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253336(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.46', width=5)

width < len (16) in center_string(outstring, ' 9.5986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.26', width=5)

width < len (16) in center_string(outstring, ' 9.5846(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.33', width=5)

width < len (16) in center_string(outstring, ' 9.5674(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927032(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.67', width=5)

width < len (16) in center_string(outstring, ' 9.5470(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929794(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.29', width=5)

width < len (16) in center_string(outstring, ' 9.5235(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932556(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4358.21', width=5)

width < len (16) in center_string(outstring, ' 9.4970(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062944(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3913.28', width=5)

width < len (16) in center_string(outstring, ' 7.6569(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938080(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM41.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '783.14', width=5)

width < len (9) in center_string(outstring, '306749.47', width=6)

width < len (12) in center_string(outstring, '598664904.72', width=8)

width < len (7) in center_string(outstring, '3076.60', width=6)

width < len (7) in center_string(outstring, '4394.75', width=5)

width < len (16) in center_string(outstring, ' 9.6569(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.97', width=5)

width < len (16) in center_string(outstring, ' 9.6447(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.41', width=5)

width < len (16) in center_string(outstring, ' 9.6291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.13', width=5)

width < len (16) in center_string(outstring, ' 9.6103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3942.63', width=5)

width < len (16) in center_string(outstring, ' 7.7722(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931473(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.46', width=5)

width < len (16) in center_string(outstring, ' 9.5636(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.08', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.02', width=5)

width < len (16) in center_string(outstring, ' 9.5049(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(6.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM52.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.53', width=5)

width < len (9) in center_string(outstring, '213647.16', width=6)

width < len (12) in center_string(outstring, '575954667.78', width=8)

width < len (7) in center_string(outstring, '2927.48', width=6)

width < len (7) in center_string(outstring, '4363.31', width=5)

width < len (16) in center_string(outstring, ' 9.5192(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.11', width=5)

width < len (16) in center_string(outstring, ' 9.5096(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.11', width=5)

width < len (16) in center_string(outstring, ' 9.4966(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925980(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4354.36', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.25', width=5)

width < len (16) in center_string(outstring, ' 7.6803(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931610(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.03', width=5)

width < len (16) in center_string(outstring, ' 7.6559(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.65', width=5)

width < len (16) in center_string(outstring, ' 9.4120(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937241(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.96', width=5)

width < len (16) in center_string(outstring, ' 9.3829(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940063(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM12.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '582.07', width=5)

width < len (9) in center_string(outstring, '169494.58', width=6)

width < len (12) in center_string(outstring, '575342449.31', width=8)

width < len (7) in center_string(outstring, '1517.61', width=6)

width < len (7) in center_string(outstring, '4359.15', width=5)

width < len (16) in center_string(outstring, ' 9.5011(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254971(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.23', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923172(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.52', width=5)

width < len (16) in center_string(outstring, ' 9.4809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.06', width=5)

width < len (16) in center_string(outstring, ' 9.4659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.85', width=5)

width < len (16) in center_string(outstring, ' 7.6826(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931625(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.92', width=5)

width < len (16) in center_string(outstring, ' 7.6594(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.21', width=5)

width < len (16) in center_string(outstring, ' 9.4014(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.80', width=5)

width < len (16) in center_string(outstring, ' 9.3736(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940079(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM3.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '912.32', width=5)

width < len (9) in center_string(outstring, '416261.03', width=6)

width < len (12) in center_string(outstring, '601293908.51', width=8)

width < len (7) in center_string(outstring, '3250.08', width=6)

width < len (7) in center_string(outstring, '4405.55', width=5)

width < len (16) in center_string(outstring, ' 9.7044(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.50', width=5)

width < len (16) in center_string(outstring, ' 9.6910(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.70', width=5)

width < len (16) in center_string(outstring, ' 9.6743(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.23', width=5)

width < len (16) in center_string(outstring, ' 9.6546(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926239(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.09', width=5)

width < len (16) in center_string(outstring, ' 9.6321(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3941.72', width=5)

width < len (16) in center_string(outstring, ' 7.7686(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931366(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4376.83', width=5)

width < len (16) in center_string(outstring, ' 9.5783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933929(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.72', width=5)

width < len (16) in center_string(outstring, ' 9.5472(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM63.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 82 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '413.75', width=5)

width < len (8) in center_string(outstring, '85682.44', width=6)

width < len (12) in center_string(outstring, '592519592.62', width=8)

width < len (7) in center_string(outstring, '2325.56', width=6)

width < len (7) in center_string(outstring, '3941.98', width=5)

width < len (16) in center_string(outstring, ' 7.7696(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.147(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254678(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.06', width=5)

width < len (16) in center_string(outstring, ' 9.5356(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.15', width=5)

width < len (16) in center_string(outstring, ' 9.5229(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4360.50', width=5)

width < len (16) in center_string(outstring, ' 9.5070(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036586(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.10', width=5)

width < len (16) in center_string(outstring, ' 9.4878(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045733(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.97', width=5)

width < len (16) in center_string(outstring, ' 9.4655(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4345.11', width=5)

width < len (16) in center_string(outstring, ' 9.4400(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064026(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.53', width=5)

width < len (16) in center_string(outstring, ' 9.4114(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073173(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM23.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '396.03', width=5)

width < len (8) in center_string(outstring, '78505.57', width=6)

width < len (12) in center_string(outstring, '593667320.02', width=8)

width < len (7) in center_string(outstring, '2202.68', width=6)

width < len (7) in center_string(outstring, '4373.68', width=5)

width < len (16) in center_string(outstring, ' 9.5645(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.041(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.89', width=5)

width < len (16) in center_string(outstring, ' 7.7771(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018082(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921570(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4368.45', width=5)

width < len (16) in center_string(outstring, ' 9.5417(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.71', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.24', width=5)

width < len (16) in center_string(outstring, ' 9.5059(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.05', width=5)

width < len (16) in center_string(outstring, ' 9.4832(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.15', width=5)

width < len (16) in center_string(outstring, ' 9.4576(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4342.54', width=5)

width < len (16) in center_string(outstring, ' 9.4288(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072326(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938217(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(3.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM34.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.53', width=5)

width < len (9) in center_string(outstring, '535229.50', width=6)

width < len (12) in center_string(outstring, '605386722.44', width=8)

width < len (7) in center_string(outstring, '2636.59', width=6)

width < len (7) in center_string(outstring, '4424.18', width=5)

width < len (16) in center_string(outstring, ' 9.7867(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254701(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4420.23', width=5)

width < len (16) in center_string(outstring, ' 9.7692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.43', width=5)

width < len (16) in center_string(outstring, ' 9.7480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925735(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4409.85', width=5)

width < len (16) in center_string(outstring, ' 9.7234(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928543(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.51', width=5)

width < len (16) in center_string(outstring, ' 9.6955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931366(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3954.39', width=5)

width < len (16) in center_string(outstring, ' 7.8186(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.57', width=5)

width < len (16) in center_string(outstring, ' 9.6298(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4380.00', width=5)

width < len (16) in center_string(outstring, ' 9.5922(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.9(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM80.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.25', width=5)

width < len (9) in center_string(outstring, '213459.95', width=6)

width < len (12) in center_string(outstring, '611217942.96', width=8)

width < len (7) in center_string(outstring, '4216.41', width=6)

width < len (7) in center_string(outstring, '4384.04', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.985(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.64', width=5)

width < len (16) in center_string(outstring, ' 9.5994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017970(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.46', width=5)

width < len (16) in center_string(outstring, ' 9.5854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.54', width=5)

width < len (16) in center_string(outstring, ' 9.5683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.90', width=5)

width < len (16) in center_string(outstring, ' 9.5480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044924(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.55', width=5)

width < len (16) in center_string(outstring, ' 9.5247(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053909(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4358.49', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062894(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.72', width=5)

width < len (16) in center_string(outstring, ' 9.4688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.3(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM40.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '703.81', width=5)

width < len (9) in center_string(outstring, '247767.55', width=6)

width < len (12) in center_string(outstring, '597496162.47', width=8)

width < len (7) in center_string(outstring, '3626.51', width=6)

width < len (7) in center_string(outstring, '4389.92', width=5)

width < len (16) in center_string(outstring, ' 9.6357(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.927(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255266(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.40', width=5)

width < len (16) in center_string(outstring, ' 9.6247(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.11', width=5)

width < len (16) in center_string(outstring, ' 9.6102(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.10', width=5)

width < len (16) in center_string(outstring, ' 9.5926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.37', width=5)

width < len (16) in center_string(outstring, ' 9.5719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044635(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931671(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4369.92', width=5)

width < len (16) in center_string(outstring, ' 9.5481(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934418(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '3924.90', width=5)

width < len (16) in center_string(outstring, ' 7.7024(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062490(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937164(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(18)', width=10)

width < len (7) in center_string(outstring, '4356.93', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071417(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(1.1)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM45.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '763.33', width=5)

width < len (9) in center_string(outstring, '291435.97', width=6)

width < len (12) in center_string(outstring, '583818411.93', width=8)

width < len (7) in center_string(outstring, '3056.38', width=6)

width < len (7) in center_string(outstring, '4394.91', width=5)

width < len (16) in center_string(outstring, ' 9.6576(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.15', width=5)

width < len (16) in center_string(outstring, ' 9.6455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3954.19', width=5)

width < len (16) in center_string(outstring, ' 7.8178(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3948.47', width=5)

width < len (16) in center_string(outstring, ' 7.7952(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4379.43', width=5)

width < len (16) in center_string(outstring, ' 9.5897(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931808(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.77', width=5)

width < len (16) in center_string(outstring, ' 9.5649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.41', width=5)

width < len (16) in center_string(outstring, ' 9.5372(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.37', width=5)

width < len (16) in center_string(outstring, ' 9.5064(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM51.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '626.86', width=5)

width < len (9) in center_string(outstring, '196567.95', width=6)

width < len (12) in center_string(outstring, '576835705.47', width=8)

width < len (7) in center_string(outstring, '3490.14', width=6)

width < len (7) in center_string(outstring, '4366.56', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.47', width=5)

width < len (16) in center_string(outstring, ' 9.5243(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.59', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.94', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928772(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.43', width=5)

width < len (16) in center_string(outstring, ' 7.6888(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3915.25', width=5)

width < len (16) in center_string(outstring, ' 7.6646(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.54', width=5)

width < len (16) in center_string(outstring, ' 9.4288(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.94', width=5)

width < len (16) in center_string(outstring, ' 9.4002(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM16.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.41', width=5)

width < len (9) in center_string(outstring, '167371.72', width=6)

width < len (12) in center_string(outstring, '589791589.95', width=8)

width < len (7) in center_string(outstring, '1473.77', width=6)

width < len (7) in center_string(outstring, '4358.85', width=5)

width < len (16) in center_string(outstring, ' 9.4998(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.95', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.26', width=5)

width < len (16) in center_string(outstring, ' 9.4798(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924316(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.82', width=5)

width < len (16) in center_string(outstring, ' 9.4648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.63', width=5)

width < len (16) in center_string(outstring, ' 9.4466(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.70', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.21', width=5)

width < len (16) in center_string(outstring, ' 7.6292(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.64', width=5)

width < len (16) in center_string(outstring, ' 9.3729(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM2.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.90', width=5)

width < len (9) in center_string(outstring, '182437.53', width=6)

width < len (12) in center_string(outstring, '589108936.77', width=8)

width < len (7) in center_string(outstring, '1831.62', width=6)

width < len (7) in center_string(outstring, '4357.30', width=5)

width < len (16) in center_string(outstring, ' 9.4931(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254221(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.14', width=5)

width < len (16) in center_string(outstring, ' 9.4836(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.18', width=5)

width < len (16) in center_string(outstring, ' 9.4707(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.48', width=5)

width < len (16) in center_string(outstring, ' 9.4546(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.02', width=5)

width < len (16) in center_string(outstring, ' 9.4353(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.83', width=5)

width < len (16) in center_string(outstring, ' 9.4128(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933701(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.94', width=5)

width < len (16) in center_string(outstring, ' 7.6165(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936508(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.28', width=5)

width < len (16) in center_string(outstring, ' 9.3583(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM7.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '905.43', width=5)

width < len (9) in center_string(outstring, '410002.91', width=6)

width < len (12) in center_string(outstring, '616161647.76', width=8)

width < len (7) in center_string(outstring, '3192.21', width=6)

width < len (7) in center_string(outstring, '4404.15', width=5)

width < len (16) in center_string(outstring, ' 9.6983(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.762(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4401.00', width=5)

width < len (16) in center_string(outstring, ' 9.6844(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921936(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.08', width=5)

width < len (16) in center_string(outstring, ' 9.6672(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026287(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924637(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4392.46', width=5)

width < len (16) in center_string(outstring, ' 9.6469(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4387.14', width=5)

width < len (16) in center_string(outstring, ' 9.6235(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.13', width=5)

width < len (16) in center_string(outstring, ' 9.5971(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052574(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.43', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061337(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935471(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.07', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070099(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM62.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 77 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '431.32', width=5)

width < len (8) in center_string(outstring, '93105.66', width=6)

width < len (12) in center_string(outstring, '592249827.66', width=8)

width < len (7) in center_string(outstring, '2461.46', width=6)

width < len (7) in center_string(outstring, '4369.04', width=5)

width < len (16) in center_string(outstring, ' 9.5443(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.158(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.99', width=5)

width < len (16) in center_string(outstring, ' 9.5353(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018316(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920700(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.14', width=5)

width < len (16) in center_string(outstring, ' 9.5229(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.54', width=5)

width < len (16) in center_string(outstring, ' 9.5072(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.20', width=5)

width < len (16) in center_string(outstring, ' 9.4883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045791(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929092(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.12', width=5)

width < len (16) in center_string(outstring, ' 9.4661(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054949(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.31', width=5)

width < len (16) in center_string(outstring, ' 9.4409(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064107(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3903.19', width=5)

width < len (16) in center_string(outstring, ' 7.6175(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073265(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937500(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM22.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '358.85', width=5)

width < len (8) in center_string(outstring, '64471.65', width=6)

width < len (12) in center_string(outstring, '577810563.70', width=8)

width < len (7) in center_string(outstring, '1898.43', width=6)

width < len (7) in center_string(outstring, '4370.12', width=5)

width < len (16) in center_string(outstring, ' 9.5490(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.121(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252833(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4368.00', width=5)

width < len (16) in center_string(outstring, ' 9.5397(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4365.08', width=5)

width < len (16) in center_string(outstring, ' 9.5270(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.42', width=5)

width < len (16) in center_string(outstring, ' 9.5110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '3925.70', width=5)

width < len (16) in center_string(outstring, ' 7.7056(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045607(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929413(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4351.90', width=5)

width < len (16) in center_string(outstring, ' 9.4695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054729(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.72', width=5)

width < len (16) in center_string(outstring, ' 7.6547(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063850(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.47', width=5)

width < len (16) in center_string(outstring, ' 9.4155(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072972(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937790(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM27.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1010.52', width=5)

width < len (9) in center_string(outstring, '510677.03', width=6)

width < len (12) in center_string(outstring, '587882904.90', width=8)

width < len (7) in center_string(outstring, '3000.96', width=6)

width < len (7) in center_string(outstring, '4412.37', width=5)

width < len (16) in center_string(outstring, ' 9.7345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254090(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.04', width=5)

width < len (16) in center_string(outstring, ' 9.7198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.95', width=5)

width < len (16) in center_string(outstring, ' 9.7018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.18', width=5)

width < len (16) in center_string(outstring, ' 9.6808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3957.26', width=5)

width < len (16) in center_string(outstring, ' 7.8300(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.65', width=5)

width < len (16) in center_string(outstring, ' 9.6301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932281(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.49', width=5)

width < len (16) in center_string(outstring, ' 7.7716(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.49', width=5)

width < len (16) in center_string(outstring, ' 9.5681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.5)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM73.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '388.66', width=5)

width < len (8) in center_string(outstring, '75615.30', width=6)

width < len (12) in center_string(outstring, '593436609.91', width=8)

width < len (7) in center_string(outstring, '2163.79', width=6)

width < len (7) in center_string(outstring, '4373.75', width=5)

width < len (16) in center_string(outstring, ' 9.5648(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4371.53', width=5)

width < len (16) in center_string(outstring, ' 9.5551(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018103(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922134(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4368.53', width=5)

width < len (16) in center_string(outstring, ' 9.5420(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027155(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4364.79', width=5)

width < len (16) in center_string(outstring, ' 9.5257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.32', width=5)

width < len (16) in center_string(outstring, ' 9.5062(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.13', width=5)

width < len (16) in center_string(outstring, ' 9.4836(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.22', width=5)

width < len (16) in center_string(outstring, ' 9.4579(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063361(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '3907.75', width=5)

width < len (16) in center_string(outstring, ' 7.6353(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072412(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.310 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM33.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '709.32', width=5)

width < len (9) in center_string(outstring, '251662.52', width=6)

width < len (12) in center_string(outstring, '597678239.42', width=8)

width < len (7) in center_string(outstring, '3827.42', width=6)

width < len (7) in center_string(outstring, '4389.82', width=5)

width < len (16) in center_string(outstring, ' 9.6353(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.35', width=5)

width < len (16) in center_string(outstring, ' 9.6244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.14', width=5)

width < len (16) in center_string(outstring, ' 7.8018(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4380.13', width=5)

width < len (16) in center_string(outstring, ' 9.5928(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.43', width=5)

width < len (16) in center_string(outstring, ' 9.5722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930389(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.03', width=5)

width < len (16) in center_string(outstring, ' 9.5486(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933136(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.91', width=5)

width < len (16) in center_string(outstring, ' 9.5219(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.11', width=5)

width < len (16) in center_string(outstring, ' 9.4922(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938629(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM44.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '816.46', width=5)

width < len (9) in center_string(outstring, '333404.12', width=6)

width < len (12) in center_string(outstring, '600557382.87', width=8)

width < len (7) in center_string(outstring, '3088.11', width=6)

width < len (7) in center_string(outstring, '4401.91', width=5)

width < len (16) in center_string(outstring, ' 9.6884(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.837(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.03', width=5)

width < len (16) in center_string(outstring, ' 9.6758(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017673(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3958.86', width=5)

width < len (16) in center_string(outstring, ' 7.8363(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026510(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4391.01', width=5)

width < len (16) in center_string(outstring, ' 9.6405(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035347(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.93', width=5)

width < len (16) in center_string(outstring, ' 9.6182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930023(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.15', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.68', width=5)

width < len (16) in center_string(outstring, ' 9.5645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935471(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.52', width=5)

width < len (16) in center_string(outstring, ' 9.5333(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938202(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM55.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '643.35', width=5)

width < len (9) in center_string(outstring, '207046.00', width=6)

width < len (12) in center_string(outstring, '591173654.01', width=8)

width < len (7) in center_string(outstring, '3515.06', width=6)

width < len (7) in center_string(outstring, '4365.22', width=5)

width < len (16) in center_string(outstring, ' 9.5276(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254556(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.08', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.14', width=5)

width < len (16) in center_string(outstring, ' 9.5054(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.45', width=5)

width < len (16) in center_string(outstring, ' 9.4893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.00', width=5)

width < len (16) in center_string(outstring, ' 9.4700(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.81', width=5)

width < len (16) in center_string(outstring, ' 9.4474(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.32', width=5)

width < len (16) in center_string(outstring, ' 7.6336(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4334.25', width=5)

width < len (16) in center_string(outstring, ' 9.3929(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM15.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '599.38', width=5)

width < len (9) in center_string(outstring, '179723.34', width=6)

width < len (12) in center_string(outstring, '574947975.00', width=8)

width < len (7) in center_string(outstring, '1762.76', width=6)

width < len (7) in center_string(outstring, '4358.34', width=5)

width < len (16) in center_string(outstring, ' 9.4976(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.212(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3931.55', width=5)

width < len (16) in center_string(outstring, ' 7.7285(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919937(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(18)', width=10)

width < len (7) in center_string(outstring, '4353.40', width=5)

width < len (16) in center_string(outstring, ' 9.4760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027635(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.78', width=5)

width < len (16) in center_string(outstring, ' 9.4603(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.41', width=5)

width < len (16) in center_string(outstring, ' 9.4413(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4340.31', width=5)

width < len (16) in center_string(outstring, ' 9.4191(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4334.47', width=5)

width < len (16) in center_string(outstring, ' 9.3938(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064482(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3896.84', width=5)

width < len (16) in center_string(outstring, ' 7.5927(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073693(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM6.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '897.38', width=5)

width < len (9) in center_string(outstring, '402745.44', width=6)

width < len (12) in center_string(outstring, '600941554.61', width=8)

width < len (7) in center_string(outstring, '3217.96', width=6)

width < len (7) in center_string(outstring, '4404.50', width=5)

width < len (16) in center_string(outstring, ' 9.6998(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.776(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4401.37', width=5)

width < len (16) in center_string(outstring, ' 9.6861(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.48', width=5)

width < len (16) in center_string(outstring, ' 9.6689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026327(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3953.23', width=5)

width < len (16) in center_string(outstring, ' 7.8140(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035103(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927612(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4387.57', width=5)

width < len (16) in center_string(outstring, ' 9.6254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930313(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.58', width=5)

width < len (16) in center_string(outstring, ' 9.5991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933029(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.90', width=5)

width < len (16) in center_string(outstring, ' 9.5699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935730(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.55', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM61.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '968.11', width=5)

width < len (9) in center_string(outstring, '468717.47', width=6)

width < len (12) in center_string(outstring, '586190825.90', width=8)

width < len (7) in center_string(outstring, '3321.38', width=6)

width < len (7) in center_string(outstring, '4406.85', width=5)

width < len (16) in center_string(outstring, ' 9.7102(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.737(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253697(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.53', width=5)

width < len (16) in center_string(outstring, ' 9.6956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.45', width=5)

width < len (16) in center_string(outstring, ' 9.6776(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.66', width=5)

width < len (16) in center_string(outstring, ' 9.6565(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.18', width=5)

width < len (16) in center_string(outstring, ' 9.6324(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.01', width=5)

width < len (16) in center_string(outstring, ' 9.6054(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3935.77', width=5)

width < len (16) in center_string(outstring, ' 7.7451(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061159(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '3927.60', width=5)

width < len (16) in center_string(outstring, ' 7.7130(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069896(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM66.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 77 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.86', width=5)

width < len (8) in center_string(outstring, '66646.55', width=6)

width < len (12) in center_string(outstring, '577579540.12', width=8)

width < len (7) in center_string(outstring, '1959.23', width=6)

width < len (7) in center_string(outstring, '4369.01', width=5)

width < len (16) in center_string(outstring, ' 9.5441(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.140(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253915(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.93', width=5)

width < len (16) in center_string(outstring, ' 9.5350(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3935.03', width=5)

width < len (16) in center_string(outstring, ' 7.7422(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027421(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4360.43', width=5)

width < len (16) in center_string(outstring, ' 9.5067(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.07', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045702(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930511(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.97', width=5)

width < len (16) in center_string(outstring, ' 9.4655(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933304(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.15', width=5)

width < len (16) in center_string(outstring, ' 9.4402(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063983(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3904.05', width=5)

width < len (16) in center_string(outstring, ' 7.6208(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073123(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM26.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1014.81', width=5)

width < len (9) in center_string(outstring, '515020.16', width=6)

width < len (12) in center_string(outstring, '603065666.68', width=8)

width < len (7) in center_string(outstring, '3068.39', width=6)

width < len (7) in center_string(outstring, '4412.00', width=5)

width < len (16) in center_string(outstring, ' 9.7329(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255304(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4408.69', width=5)

width < len (16) in center_string(outstring, ' 9.7183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923248(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3969.89', width=5)

width < len (16) in center_string(outstring, ' 7.8800(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.89', width=5)

width < len (16) in center_string(outstring, ' 9.6795(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4394.48', width=5)

width < len (16) in center_string(outstring, ' 9.6558(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4388.42', width=5)

width < len (16) in center_string(outstring, ' 9.6291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4381.70', width=5)

width < len (16) in center_string(outstring, ' 9.5996(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.33', width=5)

width < len (16) in center_string(outstring, ' 9.5674(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM72.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '486.64', width=5)

width < len (9) in center_string(outstring, '118497.83', width=6)

width < len (12) in center_string(outstring, '610135412.29', width=8)

width < len (7) in center_string(outstring, '2942.29', width=6)

width < len (7) in center_string(outstring, '4379.90', width=5)

width < len (16) in center_string(outstring, ' 9.5918(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254735(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4377.58', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4374.48', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027056(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4370.64', width=5)

width < len (16) in center_string(outstring, ' 9.5513(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928452(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4366.08', width=5)

width < len (16) in center_string(outstring, ' 9.5313(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4360.80', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4354.80', width=5)

width < len (16) in center_string(outstring, ' 9.4821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.10', width=5)

width < len (16) in center_string(outstring, ' 9.4530(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM37.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 35 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1051.22', width=5)

width < len (9) in center_string(outstring, '552632.62', width=6)

width < len (12) in center_string(outstring, '591806953.39', width=8)

width < len (7) in center_string(outstring, '2560.24', width=6)

width < len (7) in center_string(outstring, '4428.91', width=5)

width < len (16) in center_string(outstring, ' 9.8076(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.608(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255323(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4425.18', width=5)

width < len (16) in center_string(outstring, ' 9.7911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017216(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923462(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3981.29', width=5)

width < len (16) in center_string(outstring, ' 7.9253(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025824(25)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4415.50', width=5)

width < len (16) in center_string(outstring, ' 9.7483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4409.64', width=5)

width < len (16) in center_string(outstring, ' 9.7225(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043040(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4403.10', width=5)

width < len (16) in center_string(outstring, ' 9.6936(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3952.04', width=5)

width < len (16) in center_string(outstring, ' 7.8093(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060256(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4388.03', width=5)

width < len (16) in center_string(outstring, ' 9.6274(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068864(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM83.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.52', width=5)

width < len (9) in center_string(outstring, '246863.73', width=6)

width < len (12) in center_string(outstring, '582011650.93', width=8)

width < len (7) in center_string(outstring, '3933.47', width=6)

width < len (7) in center_string(outstring, '4386.02', width=5)

width < len (16) in center_string(outstring, ' 9.6186(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.313(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250403(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3953.78', width=5)

width < len (16) in center_string(outstring, ' 7.8162(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016627(26)', width=12)

width < len (15) in center_string(outstring, ' 166.918594(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4380.66', width=5)

width < len (16) in center_string(outstring, ' 9.5951(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024940(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4376.95', width=5)

width < len (16) in center_string(outstring, ' 9.5788(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4372.58', width=5)

width < len (16) in center_string(outstring, ' 9.5597(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041567(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4367.54', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929306(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4361.86', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058194(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '3918.39', width=5)

width < len (16) in center_string(outstring, ' 7.6769(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934662(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM43.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '715.25', width=5)

width < len (9) in center_string(outstring, '255886.03', width=6)

width < len (12) in center_string(outstring, '598749518.63', width=8)

width < len (7) in center_string(outstring, '3162.60', width=6)

width < len (7) in center_string(outstring, '4394.62', width=5)

width < len (16) in center_string(outstring, ' 9.6563(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.911(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.01', width=5)

width < len (16) in center_string(outstring, ' 9.6449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017822(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.62', width=5)

width < len (16) in center_string(outstring, ' 9.6300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026734(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.98', width=5)

width < len (16) in center_string(outstring, ' 7.7893(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035645(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927277(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4379.68', width=5)

width < len (16) in center_string(outstring, ' 9.5908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044556(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.14', width=5)

width < len (16) in center_string(outstring, ' 9.5665(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053467(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.89', width=5)

width < len (16) in center_string(outstring, ' 9.5393(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935486(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.96', width=5)

width < len (16) in center_string(outstring, ' 9.5090(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM48.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '809.76', width=5)

width < len (9) in center_string(outstring, '327952.12', width=6)

width < len (12) in center_string(outstring, '615619879.41', width=8)

width < len (7) in center_string(outstring, '3073.86', width=6)

width < len (7) in center_string(outstring, '4400.96', width=5)

width < len (16) in center_string(outstring, ' 9.6842(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.802(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.18', width=5)

width < len (16) in center_string(outstring, ' 9.6720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.63', width=5)

width < len (16) in center_string(outstring, ' 9.6564(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.37', width=5)

width < len (16) in center_string(outstring, ' 9.6377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926208(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.40', width=5)

width < len (16) in center_string(outstring, ' 9.6159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4379.74', width=5)

width < len (16) in center_string(outstring, ' 9.5911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.38', width=5)

width < len (16) in center_string(outstring, ' 9.5633(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061612(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.35', width=5)

width < len (16) in center_string(outstring, ' 9.5325(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM54.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '556.96', width=5)

width < len (9) in center_string(outstring, '155195.67', width=6)

width < len (12) in center_string(outstring, '606705716.89', width=8)

width < len (7) in center_string(outstring, '3449.60', width=6)

width < len (7) in center_string(outstring, '4366.89', width=5)

width < len (16) in center_string(outstring, ' 9.5349(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.81', width=5)

width < len (16) in center_string(outstring, ' 9.5258(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.94', width=5)

width < len (16) in center_string(outstring, ' 9.5133(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924774(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.31', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4353.93', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930405(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.82', width=5)

width < len (16) in center_string(outstring, ' 9.4561(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.96', width=5)

width < len (16) in center_string(outstring, ' 9.4307(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.38', width=5)

width < len (16) in center_string(outstring, ' 9.4021(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938843(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM19.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.31', width=5)

width < len (9) in center_string(outstring, '177888.00', width=6)

width < len (12) in center_string(outstring, '588814702.24', width=8)

width < len (7) in center_string(outstring, '1710.51', width=6)

width < len (7) in center_string(outstring, '4355.82', width=5)

width < len (16) in center_string(outstring, ' 9.4866(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4353.77', width=5)

width < len (16) in center_string(outstring, ' 9.4776(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4350.92', width=5)

width < len (16) in center_string(outstring, ' 9.4653(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.32', width=5)

width < len (16) in center_string(outstring, ' 9.4496(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4342.98', width=5)

width < len (16) in center_string(outstring, ' 9.4307(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4337.90', width=5)

width < len (16) in center_string(outstring, ' 9.4087(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.33', width=5)

width < len (16) in center_string(outstring, ' 7.6141(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4325.56', width=5)

width < len (16) in center_string(outstring, ' 9.3552(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM5.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '952.99', width=5)

width < len (9) in center_string(outstring, '454190.19', width=6)

width < len (12) in center_string(outstring, '601822894.33', width=8)

width < len (7) in center_string(outstring, '3276.80', width=6)

width < len (7) in center_string(outstring, '4407.80', width=5)

width < len (16) in center_string(outstring, ' 9.7144(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253229(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.65', width=5)

width < len (16) in center_string(outstring, ' 9.7005(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4400.75', width=5)

width < len (16) in center_string(outstring, ' 9.6833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4396.17', width=5)

width < len (16) in center_string(outstring, ' 9.6632(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4390.92', width=5)

width < len (16) in center_string(outstring, ' 9.6401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928864(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3943.61', width=5)

width < len (16) in center_string(outstring, ' 7.7760(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4378.45', width=5)

width < len (16) in center_string(outstring, ' 9.5854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.24', width=5)

width < len (16) in center_string(outstring, ' 9.5539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM65.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '373.84', width=5)

width < len (8) in center_string(outstring, '69964.01', width=6)

width < len (12) in center_string(outstring, '578000957.43', width=8)

width < len (7) in center_string(outstring, '2001.13', width=6)

width < len (7) in center_string(outstring, '4370.64', width=5)

width < len (16) in center_string(outstring, ' 9.5512(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.130(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254259(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3939.74', width=5)

width < len (16) in center_string(outstring, ' 7.7608(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018259(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922455(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.67', width=5)

width < len (16) in center_string(outstring, ' 9.5296(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027389(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4362.05', width=5)

width < len (16) in center_string(outstring, ' 9.5137(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036519(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928040(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.68', width=5)

width < len (16) in center_string(outstring, ' 9.4947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.58', width=5)

width < len (16) in center_string(outstring, ' 9.4725(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933640(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3911.43', width=5)

width < len (16) in center_string(outstring, ' 7.6497(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063907(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4340.22', width=5)

width < len (16) in center_string(outstring, ' 9.4187(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM25.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.43', width=5)

width < len (9) in center_string(outstring, '535122.31', width=6)

width < len (12) in center_string(outstring, '604443046.90', width=8)

width < len (7) in center_string(outstring, '2914.14', width=6)

width < len (7) in center_string(outstring, '4420.38', width=5)

width < len (16) in center_string(outstring, ' 9.7699(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255259(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4416.55', width=5)

width < len (16) in center_string(outstring, ' 9.7530(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923462(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.88', width=5)

width < len (16) in center_string(outstring, ' 9.7324(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926285(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4406.44', width=5)

width < len (16) in center_string(outstring, ' 9.7084(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.23', width=5)

width < len (16) in center_string(outstring, ' 9.6810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.85', width=5)

width < len (16) in center_string(outstring, ' 7.8046(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934738(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.56', width=5)

width < len (16) in center_string(outstring, ' 9.6166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.13', width=5)

width < len (16) in center_string(outstring, ' 9.5796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940384(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM76.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '461.58', width=5)

width < len (9) in center_string(outstring, '106614.94', width=6)

width < len (12) in center_string(outstring, '595366736.14', width=8)

width < len (7) in center_string(outstring, '2724.13', width=6)

width < len (7) in center_string(outstring, '4381.33', width=5)

width < len (16) in center_string(outstring, ' 9.5980(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.042(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254135(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.06', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.01', width=5)

width < len (16) in center_string(outstring, ' 9.5748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.23', width=5)

width < len (16) in center_string(outstring, ' 9.5582(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927872(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.71', width=5)

width < len (16) in center_string(outstring, ' 9.5384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045209(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.46', width=5)

width < len (16) in center_string(outstring, ' 9.5156(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933411(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.50', width=5)

width < len (16) in center_string(outstring, ' 9.4896(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3911.69', width=5)

width < len (16) in center_string(outstring, ' 7.6507(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072335(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM36.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 34 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  12%Amount of optimization complete =  25%Amount of optimization complete =  37%Amount of optimization complete =  50%Amount of optimization complete =  62%Amount of optimization complete =  75%Amount of optimization complete =  87%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.43', width=5)

width < len (9) in center_string(outstring, '548650.38', width=6)

width < len (12) in center_string(outstring, '607065448.14', width=8)

width < len (7) in center_string(outstring, '2581.03', width=6)

width < len (7) in center_string(outstring, '4428.42', width=5)

width < len (16) in center_string(outstring, ' 9.8055(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.610(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253956(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4424.73', width=5)

width < len (16) in center_string(outstring, ' 9.7891(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017220(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3980.72', width=5)

width < len (16) in center_string(outstring, ' 7.9231(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025830(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4415.11', width=5)

width < len (16) in center_string(outstring, ' 9.7466(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927429(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4409.28', width=5)

width < len (16) in center_string(outstring, ' 9.7209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930099(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4402.77', width=5)

width < len (16) in center_string(outstring, ' 9.6922(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4395.59', width=5)

width < len (16) in center_string(outstring, ' 9.6606(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935425(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4387.76', width=5)

width < len (16) in center_string(outstring, ' 9.6262(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(4.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.150 sec (User: 0.150 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM82.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '716.85', width=5)

width < len (9) in center_string(outstring, '257032.59', width=6)

width < len (12) in center_string(outstring, '598105292.48', width=8)

width < len (7) in center_string(outstring, '3261.98', width=6)

width < len (7) in center_string(outstring, '4392.07', width=5)

width < len (16) in center_string(outstring, ' 9.6452(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.895(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254125(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.46', width=5)

width < len (16) in center_string(outstring, ' 9.6337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017790(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.07', width=5)

width < len (16) in center_string(outstring, ' 9.6188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.02', width=5)

width < len (16) in center_string(outstring, ' 7.7855(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035580(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4377.15', width=5)

width < len (16) in center_string(outstring, ' 9.5797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930511(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.62', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.39', width=5)

width < len (16) in center_string(outstring, ' 9.5283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.48', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM47.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '850.05', width=5)

width < len (9) in center_string(outstring, '361389.44', width=6)

width < len (12) in center_string(outstring, '598337503.18', width=8)

width < len (7) in center_string(outstring, '3136.39', width=6)

width < len (7) in center_string(outstring, '4394.69', width=5)

width < len (16) in center_string(outstring, ' 9.6567(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4391.67', width=5)

width < len (16) in center_string(outstring, ' 9.6434(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.89', width=5)

width < len (16) in center_string(outstring, ' 9.6268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4383.40', width=5)

width < len (16) in center_string(outstring, ' 9.6071(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035147(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4378.21', width=5)

width < len (16) in center_string(outstring, ' 9.5844(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931290(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.34', width=5)

width < len (16) in center_string(outstring, ' 9.5587(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.78', width=5)

width < len (16) in center_string(outstring, ' 9.5300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3919.00', width=5)

width < len (16) in center_string(outstring, ' 7.6793(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM58.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.51', width=5)

width < len (9) in center_string(outstring, '169170.58', width=6)

width < len (12) in center_string(outstring, '591897595.87', width=8)

width < len (7) in center_string(outstring, '3608.71', width=6)

width < len (7) in center_string(outstring, '3940.62', width=5)

width < len (16) in center_string(outstring, ' 7.7642(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.207(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252261(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4364.61', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.74', width=5)

width < len (16) in center_string(outstring, ' 9.5124(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027621(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.11', width=5)

width < len (16) in center_string(outstring, ' 9.4966(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036828(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926086(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.73', width=5)

width < len (16) in center_string(outstring, ' 9.4775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046034(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.60', width=5)

width < len (16) in center_string(outstring, ' 9.4552(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055241(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.75', width=5)

width < len (16) in center_string(outstring, ' 9.4297(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.16', width=5)

width < len (16) in center_string(outstring, ' 9.4012(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM18.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.96', width=5)

width < len (9) in center_string(outstring, '194757.42', width=6)

width < len (12) in center_string(outstring, '589582068.51', width=8)

width < len (7) in center_string(outstring, '2211.39', width=6)

width < len (7) in center_string(outstring, '4359.08', width=5)

width < len (16) in center_string(outstring, ' 9.5008(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.95', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.23', width=5)

width < len (16) in center_string(outstring, ' 9.4623(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928253(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.77', width=5)

width < len (16) in center_string(outstring, ' 9.4429(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931061(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.58', width=5)

width < len (16) in center_string(outstring, ' 9.4203(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3904.43', width=5)

width < len (16) in center_string(outstring, ' 7.6223(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936707(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.99', width=5)

width < len (16) in center_string(outstring, ' 9.3658(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939514(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM9.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '945.57', width=5)

width < len (9) in center_string(outstring, '447154.66', width=6)

width < len (12) in center_string(outstring, '601285011.74', width=8)

width < len (7) in center_string(outstring, '3280.93', width=6)

width < len (7) in center_string(outstring, '4406.09', width=5)

width < len (16) in center_string(outstring, ' 9.7068(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.731(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254809(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.84', width=5)

width < len (16) in center_string(outstring, ' 9.6925(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.82', width=5)

width < len (16) in center_string(outstring, ' 9.6748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026194(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3954.86', width=5)

width < len (16) in center_string(outstring, ' 7.8205(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034925(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4388.69', width=5)

width < len (16) in center_string(outstring, ' 9.6303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043656(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931046(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4382.59', width=5)

width < len (16) in center_string(outstring, ' 9.6036(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052388(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.82', width=5)

width < len (16) in center_string(outstring, ' 9.5739(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061119(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.38', width=5)

width < len (16) in center_string(outstring, ' 9.5414(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069850(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939148(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM64.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '984.54', width=5)

width < len (9) in center_string(outstring, '484762.06', width=6)

width < len (12) in center_string(outstring, '617420914.03', width=8)

width < len (7) in center_string(outstring, '3156.69', width=6)

width < len (7) in center_string(outstring, '4409.29', width=5)

width < len (16) in center_string(outstring, ' 9.7209(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.683(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255666(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.93', width=5)

width < len (16) in center_string(outstring, ' 9.7061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017366(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.81', width=5)

width < len (16) in center_string(outstring, ' 9.6880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.00', width=5)

width < len (16) in center_string(outstring, ' 9.6668(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034731(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929184(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4391.50', width=5)

width < len (16) in center_string(outstring, ' 9.6427(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931870(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.32', width=5)

width < len (16) in center_string(outstring, ' 9.6155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4378.48', width=5)

width < len (16) in center_string(outstring, ' 9.5855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060780(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937241(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.97', width=5)

width < len (16) in center_string(outstring, ' 9.5527(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM69.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '353.35', width=5)

width < len (8) in center_string(outstring, '62513.12', width=6)

width < len (12) in center_string(outstring, '593272394.86', width=8)

width < len (7) in center_string(outstring, '1872.49', width=6)

width < len (7) in center_string(outstring, '3945.75', width=5)

width < len (16) in center_string(outstring, ' 7.7845(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254297(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4369.81', width=5)

width < len (16) in center_string(outstring, ' 9.5476(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922485(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4366.84', width=5)

width < len (16) in center_string(outstring, ' 9.5346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.12', width=5)

width < len (16) in center_string(outstring, ' 9.5184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928070(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.67', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.49', width=5)

width < len (16) in center_string(outstring, ' 9.4765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933640(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.59', width=5)

width < len (16) in center_string(outstring, ' 9.4508(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4340.98', width=5)

width < len (16) in center_string(outstring, ' 9.4220(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM29.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.88', width=5)

width < len (9) in center_string(outstring, '531452.19', width=6)

width < len (12) in center_string(outstring, '589864941.80', width=8)

width < len (7) in center_string(outstring, '2935.70', width=6)

width < len (7) in center_string(outstring, '4420.41', width=5)

width < len (16) in center_string(outstring, ' 9.7700(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.103(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256117(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.98', width=5)

width < len (16) in center_string(outstring, ' 9.7548(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3974.32', width=5)

width < len (16) in center_string(outstring, ' 7.8976(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027310(25)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4407.97', width=5)

width < len (16) in center_string(outstring, ' 9.7151(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4402.48', width=5)

width < len (16) in center_string(outstring, ' 9.6909(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045517(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4396.33', width=5)

width < len (16) in center_string(outstring, ' 9.6639(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054620(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3946.57', width=5)

width < len (16) in center_string(outstring, ' 7.7877(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063723(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4382.13', width=5)

width < len (16) in center_string(outstring, ' 9.6015(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072827(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM75.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '710.28', width=5)

width < len (9) in center_string(outstring, '252342.02', width=6)

width < len (12) in center_string(outstring, '598091943.40', width=8)

width < len (7) in center_string(outstring, '3308.50', width=6)

width < len (7) in center_string(outstring, '4392.06', width=5)

width < len (16) in center_string(outstring, ' 9.6451(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.911(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254614(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.46', width=5)

width < len (16) in center_string(outstring, ' 9.6337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017822(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.07', width=5)

width < len (16) in center_string(outstring, ' 9.6188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026734(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.70', width=5)

width < len (16) in center_string(outstring, ' 7.7843(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035645(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928268(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.14', width=5)

width < len (16) in center_string(outstring, ' 9.5797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044556(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.61', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053467(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.38', width=5)

width < len (16) in center_string(outstring, ' 9.5283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.46', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM46.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '843.95', width=5)

width < len (9) in center_string(outstring, '356222.81', width=6)

width < len (12) in center_string(outstring, '613511861.15', width=8)

width < len (7) in center_string(outstring, '3110.26', width=6)

width < len (7) in center_string(outstring, '4394.13', width=5)

width < len (16) in center_string(outstring, ' 9.6542(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.795(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4391.14', width=5)

width < len (16) in center_string(outstring, ' 9.6411(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017589(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.39', width=5)

width < len (16) in center_string(outstring, ' 9.6246(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.93', width=5)

width < len (16) in center_string(outstring, ' 9.6050(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927444(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.77', width=5)

width < len (16) in center_string(outstring, ' 9.5825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043973(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.93', width=5)

width < len (16) in center_string(outstring, ' 9.5569(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.40', width=5)

width < len (16) in center_string(outstring, ' 9.5284(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4358.20', width=5)

width < len (16) in center_string(outstring, ' 9.4969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM57.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '615.58', width=5)

width < len (9) in center_string(outstring, '189562.58', width=6)

width < len (12) in center_string(outstring, '589729808.60', width=8)

width < len (7) in center_string(outstring, '2093.44', width=6)

width < len (7) in center_string(outstring, '4359.40', width=5)

width < len (16) in center_string(outstring, ' 9.5022(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.27', width=5)

width < len (16) in center_string(outstring, ' 9.4929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921356(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.35', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924179(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.68', width=5)

width < len (16) in center_string(outstring, ' 9.4642(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.26', width=5)

width < len (16) in center_string(outstring, ' 9.4450(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.48', width=5)

width < len (16) in center_string(outstring, ' 7.6499(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932617(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.21', width=5)

width < len (16) in center_string(outstring, ' 9.3970(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.60', width=5)

width < len (16) in center_string(outstring, ' 9.3684(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938248(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^4', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^4', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM8.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.73', width=5)

width < len (9) in center_string(outstring, '481018.06', width=6)

width < len (12) in center_string(outstring, '602173427.59', width=8)

width < len (7) in center_string(outstring, '3186.51', width=6)

width < len (7) in center_string(outstring, '4409.80', width=5)

width < len (16) in center_string(outstring, ' 9.7232(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254731(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.46', width=5)

width < len (16) in center_string(outstring, ' 9.7084(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4402.35', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.53', width=5)

width < len (16) in center_string(outstring, ' 9.6692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928268(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.03', width=5)

width < len (16) in center_string(outstring, ' 9.6450(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.84', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3938.24', width=5)

width < len (16) in center_string(outstring, ' 7.7549(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936356(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4371.44', width=5)

width < len (16) in center_string(outstring, ' 9.5547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM68.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '350.02', width=5)

width < len (8) in center_string(outstring, '61340.03', width=6)

width < len (12) in center_string(outstring, '592802194.31', width=8)

width < len (7) in center_string(outstring, '1852.98', width=6)

width < len (7) in center_string(outstring, '4370.36', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.099(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.36', width=5)

width < len (16) in center_string(outstring, ' 7.7672(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018198(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.20', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027297(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4361.48', width=5)

width < len (16) in center_string(outstring, ' 9.5113(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036396(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.03', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.86', width=5)

width < len (16) in center_string(outstring, ' 9.4693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054594(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932312(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.96', width=5)

width < len (16) in center_string(outstring, ' 9.4437(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.35', width=5)

width < len (16) in center_string(outstring, ' 9.4150(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072792(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM28.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.69', width=5)

width < len (9) in center_string(outstring, '531265.12', width=6)

width < len (12) in center_string(outstring, '605004244.50', width=8)

width < len (7) in center_string(outstring, '2708.53', width=6)

width < len (7) in center_string(outstring, '4422.68', width=5)

width < len (16) in center_string(outstring, ' 9.7800(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255509(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4418.76', width=5)

width < len (16) in center_string(outstring, ' 9.7627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4413.99', width=5)

width < len (16) in center_string(outstring, ' 9.7417(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4408.45', width=5)

width < len (16) in center_string(outstring, ' 9.7172(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.14', width=5)

width < len (16) in center_string(outstring, ' 9.6894(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3953.17', width=5)

width < len (16) in center_string(outstring, ' 7.8138(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4387.27', width=5)

width < len (16) in center_string(outstring, ' 9.6241(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4378.73', width=5)

width < len (16) in center_string(outstring, ' 9.5866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(6.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.140 sec (User: 0.140 sec, System: 0.000 sec)
  Total time: 0.140 sec

Final candidates in binary format are in 'Sband_DM79.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.63', width=5)

width < len (9) in center_string(outstring, '176885.67', width=6)

width < len (12) in center_string(outstring, '580737193.91', width=8)

width < len (7) in center_string(outstring, '3939.64', width=6)

width < len (7) in center_string(outstring, '4381.59', width=5)

width < len (16) in center_string(outstring, ' 9.5992(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.010(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.24', width=5)

width < len (16) in center_string(outstring, ' 9.5889(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3945.28', width=5)

width < len (16) in center_string(outstring, ' 7.7826(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027029(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4372.22', width=5)

width < len (16) in center_string(outstring, ' 9.5582(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036038(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3933.97', width=5)

width < len (16) in center_string(outstring, ' 7.7381(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045048(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931427(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4362.30', width=5)

width < len (16) in center_string(outstring, ' 9.5148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.27', width=5)

width < len (16) in center_string(outstring, ' 9.4885(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4349.53', width=5)

width < len (16) in center_string(outstring, ' 9.4592(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072076(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM39.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '990.14', width=5)

width < len (9) in center_string(outstring, '490286.88', width=6)

width < len (12) in center_string(outstring, '617221565.73', width=8)

width < len (7) in center_string(outstring, '3303.79', width=6)

width < len (7) in center_string(outstring, '4408.65', width=5)

width < len (16) in center_string(outstring, ' 9.7181(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254521(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4405.28', width=5)

width < len (16) in center_string(outstring, ' 9.7033(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922668(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4401.15', width=5)

width < len (16) in center_string(outstring, ' 9.6851(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4396.31', width=5)

width < len (16) in center_string(outstring, ' 9.6638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.79', width=5)

width < len (16) in center_string(outstring, ' 9.6395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4384.58', width=5)

width < len (16) in center_string(outstring, ' 9.6123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4377.70', width=5)

width < len (16) in center_string(outstring, ' 9.5821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.16', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM67.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.61', width=5)

width < len (9) in center_string(outstring, '541536.69', width=6)

width < len (12) in center_string(outstring, '605341353.87', width=8)

width < len (7) in center_string(outstring, '2781.91', width=6)

width < len (7) in center_string(outstring, '4423.90', width=5)

width < len (16) in center_string(outstring, ' 9.7855(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254557(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.02', width=5)

width < len (16) in center_string(outstring, ' 9.7683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.28', width=5)

width < len (16) in center_string(outstring, ' 9.7474(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.77', width=5)

width < len (16) in center_string(outstring, ' 9.7230(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.49', width=5)

width < len (16) in center_string(outstring, ' 9.6954(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3953.56', width=5)

width < len (16) in center_string(outstring, ' 7.8153(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.68', width=5)

width < len (16) in center_string(outstring, ' 9.6302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.17', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM78.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '729.38', width=5)

width < len (9) in center_string(outstring, '266092.62', width=6)

width < len (12) in center_string(outstring, '598974851.96', width=8)

width < len (7) in center_string(outstring, '2987.69', width=6)

width < len (7) in center_string(outstring, '4394.34', width=5)

width < len (16) in center_string(outstring, ' 9.6551(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.81', width=5)

width < len (16) in center_string(outstring, ' 7.8361(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919952(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.50', width=5)

width < len (16) in center_string(outstring, ' 9.6295(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.53', width=5)

width < len (16) in center_string(outstring, ' 9.6121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.90', width=5)

width < len (16) in center_string(outstring, ' 9.5918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.60', width=5)

width < len (16) in center_string(outstring, ' 9.5686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930206(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.65', width=5)

width < len (16) in center_string(outstring, ' 9.5426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.06', width=5)

width < len (16) in center_string(outstring, ' 9.5138(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM49.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 54 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '646.29', width=5)

width < len (9) in center_string(outstring, '208937.91', width=6)

width < len (12) in center_string(outstring, '575563554.50', width=8)

width < len (7) in center_string(outstring, '2609.35', width=6)

width < len (7) in center_string(outstring, '4361.49', width=5)

width < len (16) in center_string(outstring, ' 9.5113(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4359.32', width=5)

width < len (16) in center_string(outstring, ' 9.5018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.35', width=5)

width < len (16) in center_string(outstring, ' 9.4889(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926315(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4352.63', width=5)

width < len (16) in center_string(outstring, ' 9.4727(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929123(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3918.65', width=5)

width < len (16) in center_string(outstring, ' 7.6779(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931946(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3912.47', width=5)

width < len (16) in center_string(outstring, ' 7.6537(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934753(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4337.01', width=5)

width < len (16) in center_string(outstring, ' 9.4048(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4330.35', width=5)

width < len (16) in center_string(outstring, ' 9.3760(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940399(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM11.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '731.42', width=5)

width < len (9) in center_string(outstring, '267580.22', width=6)

width < len (12) in center_string(outstring, '599165170.94', width=8)

width < len (7) in center_string(outstring, '2956.74', width=6)

width < len (7) in center_string(outstring, '4395.12', width=5)

width < len (16) in center_string(outstring, ' 9.6586(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3959.26', width=5)

width < len (16) in center_string(outstring, ' 7.8379(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921005(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4389.25', width=5)

width < len (16) in center_string(outstring, ' 9.6328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4385.27', width=5)

width < len (16) in center_string(outstring, ' 9.6153(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.62', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.31', width=5)

width < len (16) in center_string(outstring, ' 9.5717(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.34', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933807(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.73', width=5)

width < len (16) in center_string(outstring, ' 9.5167(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM50.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '636.65', width=5)

width < len (9) in center_string(outstring, '202755.36', width=6)

width < len (12) in center_string(outstring, '561262589.23', width=8)

width < len (7) in center_string(outstring, '2438.27', width=6)

width < len (7) in center_string(outstring, '3937.96', width=5)

width < len (16) in center_string(outstring, ' 7.7538(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.048(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251326(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(17)', width=10)

width < len (7) in center_string(outstring, '4358.26', width=5)

width < len (16) in center_string(outstring, ' 9.4972(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4355.44', width=5)

width < len (16) in center_string(outstring, ' 9.4849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027145(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3924.82', width=5)

width < len (16) in center_string(outstring, ' 7.7021(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036193(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4347.61', width=5)

width < len (16) in center_string(outstring, ' 9.4509(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045241(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927856(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.62', width=5)

width < len (16) in center_string(outstring, ' 9.4292(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788818(16)', width=10)

width < len (7) in center_string(outstring, '3906.87', width=5)

width < len (16) in center_string(outstring, ' 7.6318(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063338(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933411(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4330.50', width=5)

width < len (16) in center_string(outstring, ' 9.3766(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM10.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.56', width=5)

width < len (9) in center_string(outstring, '171533.61', width=6)

width < len (12) in center_string(outstring, '589581441.71', width=8)

width < len (7) in center_string(outstring, '1442.79', width=6)

width < len (7) in center_string(outstring, '4357.61', width=5)

width < len (16) in center_string(outstring, ' 9.4944(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.79', width=5)

width < len (16) in center_string(outstring, ' 9.4864(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.17', width=5)

width < len (16) in center_string(outstring, ' 9.4751(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.80', width=5)

width < len (16) in center_string(outstring, ' 9.4604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4345.69', width=5)

width < len (16) in center_string(outstring, ' 9.4425(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.83', width=5)

width < len (16) in center_string(outstring, ' 9.4214(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.11', width=5)

width < len (16) in center_string(outstring, ' 7.6328(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4328.93', width=5)

width < len (16) in center_string(outstring, ' 9.3698(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938950(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.5)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM1.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '484.05', width=5)

width < len (9) in center_string(outstring, '117241.65', width=6)

width < len (12) in center_string(outstring, '607261635.49', width=8)

width < len (7) in center_string(outstring, '2915.34', width=6)

width < len (7) in center_string(outstring, '4368.93', width=5)

width < len (16) in center_string(outstring, ' 9.5438(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255715(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.84', width=5)

width < len (16) in center_string(outstring, ' 9.5346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.95', width=5)

width < len (16) in center_string(outstring, ' 9.5220(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.31', width=5)

width < len (16) in center_string(outstring, ' 9.5061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.92', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.79', width=5)

width < len (16) in center_string(outstring, ' 9.4647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.93', width=5)

width < len (16) in center_string(outstring, ' 9.4392(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.35', width=5)

width < len (16) in center_string(outstring, ' 9.4106(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940765(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM21.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '370.15', width=5)

width < len (8) in center_string(outstring, '68592.52', width=6)

width < len (12) in center_string(outstring, '593484653.48', width=8)

width < len (7) in center_string(outstring, '2008.20', width=6)

width < len (7) in center_string(outstring, '4371.30', width=5)

width < len (16) in center_string(outstring, ' 9.5541(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.321(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3942.45', width=5)

width < len (16) in center_string(outstring, ' 7.7715(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016641(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257303(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(17)', width=10)

width < len (7) in center_string(outstring, '4366.71', width=5)

width < len (16) in center_string(outstring, ' 9.5341(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024962(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4363.44', width=5)

width < len (16) in center_string(outstring, ' 9.5198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929169(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4359.54', width=5)

width < len (16) in center_string(outstring, ' 9.5028(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041603(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4355.01', width=5)

width < len (16) in center_string(outstring, ' 9.4831(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049923(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788589(16)', width=10)

width < len (7) in center_string(outstring, '4349.86', width=5)

width < len (16) in center_string(outstring, ' 9.4607(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4344.10', width=5)

width < len (16) in center_string(outstring, ' 9.4356(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066564(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789886(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(6.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM32.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '661.24', width=5)

width < len (9) in center_string(outstring, '218709.73', width=6)

width < len (12) in center_string(outstring, '590983616.39', width=8)

width < len (7) in center_string(outstring, '3321.53', width=6)

width < len (7) in center_string(outstring, '4364.54', width=5)

width < len (16) in center_string(outstring, ' 9.5246(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.39', width=5)

width < len (16) in center_string(outstring, ' 9.5152(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.44', width=5)

width < len (16) in center_string(outstring, ' 9.5024(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4355.74', width=5)

width < len (16) in center_string(outstring, ' 9.4862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.29', width=5)

width < len (16) in center_string(outstring, ' 9.4669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.66', width=5)

width < len (16) in center_string(outstring, ' 7.6545(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.17', width=5)

width < len (16) in center_string(outstring, ' 9.4185(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.52', width=5)

width < len (16) in center_string(outstring, ' 9.3897(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938492(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM14.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.38', width=5)

width < len (9) in center_string(outstring, '174957.80', width=6)

width < len (12) in center_string(outstring, '589945543.76', width=8)

width < len (7) in center_string(outstring, '1454.88', width=6)

width < len (7) in center_string(outstring, '4358.88', width=5)

width < len (16) in center_string(outstring, ' 9.4999(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.08', width=5)

width < len (16) in center_string(outstring, ' 9.4921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.49', width=5)

width < len (16) in center_string(outstring, ' 9.4808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.15', width=5)

width < len (16) in center_string(outstring, ' 9.4663(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928162(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.07', width=5)

width < len (16) in center_string(outstring, ' 9.4485(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.24', width=5)

width < len (16) in center_string(outstring, ' 9.4275(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.24', width=5)

width < len (16) in center_string(outstring, ' 7.6372(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.39', width=5)

width < len (16) in center_string(outstring, ' 9.3761(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM0.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.93', width=5)

width < len (9) in center_string(outstring, '394309.41', width=6)

width < len (12) in center_string(outstring, '599303143.11', width=8)

width < len (7) in center_string(outstring, '3276.89', width=6)

width < len (7) in center_string(outstring, '4397.83', width=5)

width < len (16) in center_string(outstring, ' 9.6704(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.86', width=5)

width < len (16) in center_string(outstring, ' 9.6574(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4391.15', width=5)

width < len (16) in center_string(outstring, ' 9.6411(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.77', width=5)

width < len (16) in center_string(outstring, ' 9.6219(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.72', width=5)

width < len (16) in center_string(outstring, ' 9.5998(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.25', width=5)

width < len (16) in center_string(outstring, ' 7.7470(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4369.65', width=5)

width < len (16) in center_string(outstring, ' 9.5469(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4362.65', width=5)

width < len (16) in center_string(outstring, ' 9.5164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(4.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.9(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM60.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '511.59', width=5)

width < len (9) in center_string(outstring, '130950.73', width=6)

width < len (12) in center_string(outstring, '606935915.10', width=8)

width < len (7) in center_string(outstring, '3171.50', width=6)

width < len (7) in center_string(outstring, '4367.83', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.71', width=5)

width < len (16) in center_string(outstring, ' 9.5297(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.80', width=5)

width < len (16) in center_string(outstring, ' 9.5170(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.14', width=5)

width < len (16) in center_string(outstring, ' 9.5011(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.74', width=5)

width < len (16) in center_string(outstring, ' 9.4819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.59', width=5)

width < len (16) in center_string(outstring, ' 9.4595(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.72', width=5)

width < len (16) in center_string(outstring, ' 9.4339(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.12', width=5)

width < len (16) in center_string(outstring, ' 9.4053(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939377(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM20.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1001.60', width=5)

width < len (9) in center_string(outstring, '501696.34', width=6)

width < len (12) in center_string(outstring, '587359472.00', width=8)

width < len (7) in center_string(outstring, '3148.64', width=6)

width < len (7) in center_string(outstring, '4410.56', width=5)

width < len (16) in center_string(outstring, ' 9.7265(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254059(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.22', width=5)

width < len (16) in center_string(outstring, ' 9.7118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4403.13', width=5)

width < len (16) in center_string(outstring, ' 9.6938(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.37', width=5)

width < len (16) in center_string(outstring, ' 9.6728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3955.05', width=5)

width < len (16) in center_string(outstring, ' 7.8212(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929688(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4386.84', width=5)

width < len (16) in center_string(outstring, ' 9.6222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932251(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3940.31', width=5)

width < len (16) in center_string(outstring, ' 7.7630(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934814(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4372.69', width=5)

width < len (16) in center_string(outstring, ' 9.5602(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937378(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(4.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (11) in center_string(outstring, ' 333.28(80)', width=10)

width < len (14) in center_string(outstring, '-0.3(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM71.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.18', width=5)

width < len (8) in center_string(outstring, '66399.15', width=6)

width < len (12) in center_string(outstring, '607774832.08', width=8)

width < len (7) in center_string(outstring, '1959.36', width=6)

width < len (7) in center_string(outstring, '4370.99', width=5)

width < len (16) in center_string(outstring, ' 9.5528(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.075(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253739(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.81', width=5)

width < len (16) in center_string(outstring, ' 9.5433(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.84', width=5)

width < len (16) in center_string(outstring, ' 9.5303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.14', width=5)

width < len (16) in center_string(outstring, ' 9.5141(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.70', width=5)

width < len (16) in center_string(outstring, ' 9.4948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930283(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.53', width=5)

width < len (16) in center_string(outstring, ' 9.4723(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.65', width=5)

width < len (16) in center_string(outstring, ' 9.4467(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063526(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935837(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.06', width=5)

width < len (16) in center_string(outstring, ' 9.4181(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938629(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM31.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '696.49', width=5)

width < len (9) in center_string(outstring, '242641.06', width=6)

width < len (12) in center_string(outstring, '611233725.41', width=8)

width < len (7) in center_string(outstring, '4330.09', width=6)

width < len (7) in center_string(outstring, '4384.36', width=5)

width < len (16) in center_string(outstring, ' 9.6113(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.980(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.88', width=5)

width < len (16) in center_string(outstring, ' 9.6004(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.62', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026941(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.63', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035921(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927612(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.92', width=5)

width < len (16) in center_string(outstring, ' 9.5481(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044901(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.49', width=5)

width < len (16) in center_string(outstring, ' 9.5244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933121(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.36', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.52', width=5)

width < len (16) in center_string(outstring, ' 9.4679(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071841(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938644(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM42.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '787.59', width=5)

width < len (9) in center_string(outstring, '310244.53', width=6)

width < len (12) in center_string(outstring, '600138570.21', width=8)

width < len (7) in center_string(outstring, '3055.89', width=6)

width < len (7) in center_string(outstring, '4400.23', width=5)

width < len (16) in center_string(outstring, ' 9.6810(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255451(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.45', width=5)

width < len (16) in center_string(outstring, ' 9.6688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4393.89', width=5)

width < len (16) in center_string(outstring, ' 9.6531(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4389.62', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3946.86', width=5)

width < len (16) in center_string(outstring, ' 7.7889(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4378.94', width=5)

width < len (16) in center_string(outstring, ' 9.5876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4372.55', width=5)

width < len (16) in center_string(outstring, ' 9.5596(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4365.48', width=5)

width < len (16) in center_string(outstring, ' 9.5287(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM53.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '663.20', width=5)

width < len (9) in center_string(outstring, '220012.19', width=6)

width < len (12) in center_string(outstring, '590714325.47', width=8)

width < len (7) in center_string(outstring, '3212.49', width=6)

width < len (7) in center_string(outstring, '4363.87', width=5)

width < len (16) in center_string(outstring, ' 9.5217(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.63', width=5)

width < len (16) in center_string(outstring, ' 9.5119(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922485(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.60', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925308(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4354.82', width=5)

width < len (16) in center_string(outstring, ' 9.4822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4350.29', width=5)

width < len (16) in center_string(outstring, ' 9.4625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930939(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4345.01', width=5)

width < len (16) in center_string(outstring, ' 9.4396(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3905.41', width=5)

width < len (16) in center_string(outstring, ' 7.6261(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4332.28', width=5)

width < len (16) in center_string(outstring, ' 9.3843(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM13.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '587.98', width=5)

width < len (9) in center_string(outstring, '172953.22', width=6)

width < len (12) in center_string(outstring, '589695577.83', width=8)

width < len (7) in center_string(outstring, '1570.12', width=6)

width < len (7) in center_string(outstring, '4358.55', width=5)

width < len (16) in center_string(outstring, ' 9.4985(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.60', width=5)

width < len (16) in center_string(outstring, ' 9.4900(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.86', width=5)

width < len (16) in center_string(outstring, ' 9.4781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.37', width=5)

width < len (16) in center_string(outstring, ' 9.4629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.13', width=5)

width < len (16) in center_string(outstring, ' 9.4444(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.15', width=5)

width < len (16) in center_string(outstring, ' 9.4228(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.60', width=5)

width < len (16) in center_string(outstring, ' 7.6308(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4329.00', width=5)

width < len (16) in center_string(outstring, ' 9.3701(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939651(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM4.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '396.68', width=5)

width < len (8) in center_string(outstring, '78765.30', width=6)

width < len (12) in center_string(outstring, '592377248.67', width=8)

width < len (7) in center_string(outstring, '2178.15', width=6)

width < len (7) in center_string(outstring, '3942.53', width=5)

width < len (16) in center_string(outstring, ' 7.7718(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255767(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4366.42', width=5)

width < len (16) in center_string(outstring, ' 9.5328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923965(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.50', width=5)

width < len (16) in center_string(outstring, ' 9.5201(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926758(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.83', width=5)

width < len (16) in center_string(outstring, ' 9.5041(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.42', width=5)

width < len (16) in center_string(outstring, ' 9.4849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4350.28', width=5)

width < len (16) in center_string(outstring, ' 9.4625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.42', width=5)

width < len (16) in center_string(outstring, ' 9.4370(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937943(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4337.84', width=5)

width < len (16) in center_string(outstring, ' 9.4084(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940750(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM24.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  12%Amount of optimization complete =  25%Amount of optimization complete =  37%Amount of optimization complete =  50%Amount of optimization complete =  62%Amount of optimization complete =  75%Amount of optimization complete =  87%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1000.31', width=5)

width < len (9) in center_string(outstring, '500405.47', width=6)

width < len (12) in center_string(outstring, '602385166.22', width=8)

width < len (7) in center_string(outstring, '3176.69', width=6)

width < len (7) in center_string(outstring, '4409.59', width=5)

width < len (16) in center_string(outstring, ' 9.7222(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254945(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.27', width=5)

width < len (16) in center_string(outstring, ' 9.7076(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3967.29', width=5)

width < len (16) in center_string(outstring, ' 7.8697(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925446(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4397.46', width=5)

width < len (16) in center_string(outstring, ' 9.6688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.05', width=5)

width < len (16) in center_string(outstring, ' 9.6451(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4385.98', width=5)

width < len (16) in center_string(outstring, ' 9.6184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933121(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.26', width=5)

width < len (16) in center_string(outstring, ' 9.5890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.89', width=5)

width < len (16) in center_string(outstring, ' 9.5567(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM70.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '360.94', width=5)

width < len (8) in center_string(outstring, '65223.91', width=6)

width < len (12) in center_string(outstring, '563510240.87', width=8)

width < len (7) in center_string(outstring, '1927.32', width=6)

width < len (7) in center_string(outstring, '4370.45', width=5)

width < len (16) in center_string(outstring, ' 9.5504(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.080(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3942.32', width=5)

width < len (16) in center_string(outstring, ' 7.7709(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921600(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.33', width=5)

width < len (16) in center_string(outstring, ' 9.5280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027241(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.63', width=5)

width < len (16) in center_string(outstring, ' 9.5119(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3926.75', width=5)

width < len (16) in center_string(outstring, ' 7.7097(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045401(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4352.05', width=5)

width < len (16) in center_string(outstring, ' 9.4702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054482(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932724(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.19', width=5)

width < len (16) in center_string(outstring, ' 9.4447(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3906.40', width=5)

width < len (16) in center_string(outstring, ' 7.6300(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072642(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(7.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM30.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '414.51', width=5)

width < len (8) in center_string(outstring, '85994.52', width=6)

width < len (12) in center_string(outstring, '594187004.30', width=8)

width < len (7) in center_string(outstring, '2331.38', width=6)

width < len (7) in center_string(outstring, '4375.99', width=5)

width < len (16) in center_string(outstring, ' 9.5747(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.048(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254567(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4373.78', width=5)

width < len (16) in center_string(outstring, ' 9.5650(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018096(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4370.78', width=5)

width < len (16) in center_string(outstring, ' 9.5518(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027144(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3935.95', width=5)

width < len (16) in center_string(outstring, ' 7.7459(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036192(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4362.57', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045240(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931076(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4357.38', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933853(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4351.48', width=5)

width < len (16) in center_string(outstring, ' 9.4677(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063337(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4344.86', width=5)

width < len (16) in center_string(outstring, ' 9.4389(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072385(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM35.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.16', width=5)

width < len (9) in center_string(outstring, '541068.50', width=6)

width < len (12) in center_string(outstring, '590441154.57', width=8)

width < len (7) in center_string(outstring, '2613.13', width=6)

width < len (7) in center_string(outstring, '3989.18', width=5)

width < len (16) in center_string(outstring, ' 7.9568(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254311(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(17)', width=10)

width < len (7) in center_string(outstring, '4420.41', width=5)

width < len (16) in center_string(outstring, ' 9.7700(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.59', width=5)

width < len (16) in center_string(outstring, ' 9.7487(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '3969.81', width=5)

width < len (16) in center_string(outstring, ' 7.8797(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(25)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(17)', width=10)

width < len (7) in center_string(outstring, '4403.64', width=5)

width < len (16) in center_string(outstring, ' 9.6961(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046073(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4396.53', width=5)

width < len (16) in center_string(outstring, ' 9.6648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.68', width=5)

width < len (16) in center_string(outstring, ' 9.6303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.10', width=5)

width < len (16) in center_string(outstring, ' 9.5926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM81.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '683.50', width=5)

width < len (9) in center_string(outstring, '233679.94', width=6)

width < len (12) in center_string(outstring, '596263216.58', width=8)

width < len (7) in center_string(outstring, '4353.20', width=6)

width < len (7) in center_string(outstring, '4384.25', width=5)

width < len (16) in center_string(outstring, ' 9.6108(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.964(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254658(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3950.78', width=5)

width < len (16) in center_string(outstring, ' 7.8043(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017929(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922836(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4378.60', width=5)

width < len (16) in center_string(outstring, ' 9.5861(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026893(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.64', width=5)

width < len (16) in center_string(outstring, ' 9.5688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928375(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.97', width=5)

width < len (16) in center_string(outstring, ' 9.5483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044821(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.58', width=5)

width < len (16) in center_string(outstring, ' 9.5248(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053786(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4358.48', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062750(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.68', width=5)

width < len (16) in center_string(outstring, ' 9.4685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071714(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM41.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '782.03', width=5)

width < len (9) in center_string(outstring, '305881.88', width=6)

width < len (12) in center_string(outstring, '599138693.89', width=8)

width < len (7) in center_string(outstring, '3062.12', width=6)

width < len (7) in center_string(outstring, '4395.46', width=5)

width < len (16) in center_string(outstring, ' 9.6600(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.78', width=5)

width < len (16) in center_string(outstring, ' 9.6483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3955.53', width=5)

width < len (16) in center_string(outstring, ' 7.8231(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4385.29', width=5)

width < len (16) in center_string(outstring, ' 9.6154(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.54', width=5)

width < len (16) in center_string(outstring, ' 9.5946(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.13', width=5)

width < len (16) in center_string(outstring, ' 9.5709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.06', width=5)

width < len (16) in center_string(outstring, ' 9.5443(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.34', width=5)

width < len (16) in center_string(outstring, ' 9.5150(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935730(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (13) in center_string(outstring, '0.0(7.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM52.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.93', width=5)

width < len (9) in center_string(outstring, '211948.45', width=6)

width < len (12) in center_string(outstring, '605518608.26', width=8)

width < len (7) in center_string(outstring, '2945.06', width=6)

width < len (7) in center_string(outstring, '4363.13', width=5)

width < len (16) in center_string(outstring, ' 9.5185(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252036(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4360.91', width=5)

width < len (16) in center_string(outstring, ' 9.5088(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920242(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.89', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923050(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4354.12', width=5)

width < len (16) in center_string(outstring, ' 9.4792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.60', width=5)

width < len (16) in center_string(outstring, ' 9.4595(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.33', width=5)

width < len (16) in center_string(outstring, ' 9.4366(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.34', width=5)

width < len (16) in center_string(outstring, ' 9.4106(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934326(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.63', width=5)

width < len (16) in center_string(outstring, ' 9.3815(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937134(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM12.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '614.16', width=5)

width < len (9) in center_string(outstring, '188687.09', width=6)

width < len (12) in center_string(outstring, '591366851.08', width=8)

width < len (7) in center_string(outstring, '3544.81', width=6)

width < len (7) in center_string(outstring, '4365.98', width=5)

width < len (16) in center_string(outstring, ' 9.5309(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.84', width=5)

width < len (16) in center_string(outstring, ' 9.5216(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.91', width=5)

width < len (16) in center_string(outstring, ' 9.5088(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.23', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.79', width=5)

width < len (16) in center_string(outstring, ' 9.4734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.61', width=5)

width < len (16) in center_string(outstring, ' 9.4509(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.47', width=5)

width < len (16) in center_string(outstring, ' 7.6342(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4335.06', width=5)

width < len (16) in center_string(outstring, ' 9.3964(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM17.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.19', width=5)

width < len (9) in center_string(outstring, '171313.75', width=6)

width < len (12) in center_string(outstring, '575014448.42', width=8)

width < len (7) in center_string(outstring, '1526.52', width=6)

width < len (7) in center_string(outstring, '4357.92', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.00', width=5)

width < len (16) in center_string(outstring, ' 9.4874(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.29', width=5)

width < len (16) in center_string(outstring, ' 9.4756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.82', width=5)

width < len (16) in center_string(outstring, ' 9.4605(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3918.70', width=5)

width < len (16) in center_string(outstring, ' 7.6781(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3912.78', width=5)

width < len (16) in center_string(outstring, ' 7.6549(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934464(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4334.98', width=5)

width < len (16) in center_string(outstring, ' 9.3960(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937271(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.57', width=5)

width < len (16) in center_string(outstring, ' 9.3683(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940094(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM3.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '914.94', width=5)

width < len (9) in center_string(outstring, '418660.41', width=6)

width < len (12) in center_string(outstring, '591749794.97', width=8)

width < len (7) in center_string(outstring, '3210.06', width=6)

width < len (7) in center_string(outstring, '4408.16', width=5)

width < len (16) in center_string(outstring, ' 9.7159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913895(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.33', width=5)

width < len (16) in center_string(outstring, ' 9.7167(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00059321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909790(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.48', width=5)

width < len (16) in center_string(outstring, ' 9.7174(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00088982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905670(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.62', width=5)

width < len (16) in center_string(outstring, ' 9.7180(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00118643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.901566(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.74', width=5)

width < len (16) in center_string(outstring, ' 9.7185(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00148303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.897446(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '3975.37', width=5)

width < len (16) in center_string(outstring, ' 7.9018(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00177964(25)', width=12)

width < len (15) in center_string(outstring, ' 166.893326(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '3975.31', width=5)

width < len (16) in center_string(outstring, ' 7.9016(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00207625(25)', width=12)

width < len (15) in center_string(outstring, ' 166.889221(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '4409.00', width=5)

width < len (16) in center_string(outstring, ' 9.7197(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00237285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.885101(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM63.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '410.24', width=5)

width < len (8) in center_string(outstring, '84234.19', width=6)

width < len (12) in center_string(outstring, '592443335.02', width=8)

width < len (7) in center_string(outstring, '2293.62', width=6)

width < len (7) in center_string(outstring, '4369.04', width=5)

width < len (16) in center_string(outstring, ' 9.5443(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.142(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3938.76', width=5)

width < len (16) in center_string(outstring, ' 7.7569(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4364.00', width=5)

width < len (16) in center_string(outstring, ' 9.5223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027426(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.34', width=5)

width < len (16) in center_string(outstring, ' 9.5063(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.94', width=5)

width < len (16) in center_string(outstring, ' 9.4871(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931488(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.80', width=5)

width < len (16) in center_string(outstring, ' 9.4647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934296(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.94', width=5)

width < len (16) in center_string(outstring, ' 9.4392(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063995(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.36', width=5)

width < len (16) in center_string(outstring, ' 9.4107(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073137(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939896(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.6)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.2)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM23.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1006.60', width=5)

width < len (9) in center_string(outstring, '506719.31', width=6)

width < len (12) in center_string(outstring, '603219524.53', width=8)

width < len (7) in center_string(outstring, '2913.55', width=6)

width < len (7) in center_string(outstring, '4413.12', width=5)

width < len (16) in center_string(outstring, ' 9.7378(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252566(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4409.73', width=5)

width < len (16) in center_string(outstring, ' 9.7229(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920517(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4405.59', width=5)

width < len (16) in center_string(outstring, ' 9.7046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3963.85', width=5)

width < len (16) in center_string(outstring, ' 7.8560(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925629(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4395.27', width=5)

width < len (16) in center_string(outstring, ' 9.6592(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928192(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4389.11', width=5)

width < len (16) in center_string(outstring, ' 9.6322(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.30', width=5)

width < len (16) in center_string(outstring, ' 9.6023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.85', width=5)

width < len (16) in center_string(outstring, ' 9.5697(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.6)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM74.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '401.66', width=5)

width < len (8) in center_string(outstring, '80752.16', width=6)

width < len (12) in center_string(outstring, '593764222.19', width=8)

width < len (7) in center_string(outstring, '2234.84', width=6)

width < len (7) in center_string(outstring, '4374.38', width=5)

width < len (16) in center_string(outstring, ' 9.5676(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.051(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253518(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4372.17', width=5)

width < len (16) in center_string(outstring, ' 9.5580(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018101(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4369.18', width=5)

width < len (16) in center_string(outstring, ' 9.5449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027152(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3934.83', width=5)

width < len (16) in center_string(outstring, ' 7.7415(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036202(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4360.98', width=5)

width < len (16) in center_string(outstring, ' 9.5091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045253(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.80', width=5)

width < len (16) in center_string(outstring, ' 9.4865(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054304(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.89', width=5)

width < len (16) in center_string(outstring, ' 9.4608(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063354(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4343.29', width=5)

width < len (16) in center_string(outstring, ' 9.4321(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM34.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.47', width=5)

width < len (9) in center_string(outstring, '531039.50', width=6)

width < len (12) in center_string(outstring, '590392518.14', width=8)

width < len (7) in center_string(outstring, '2623.68', width=6)

width < len (7) in center_string(outstring, '4424.54', width=5)

width < len (16) in center_string(outstring, ' 9.7883(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252681(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.60', width=5)

width < len (16) in center_string(outstring, ' 9.7708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920883(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3977.79', width=5)

width < len (16) in center_string(outstring, ' 7.9114(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(25)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(17)', width=10)

width < len (7) in center_string(outstring, '4410.22', width=5)

width < len (16) in center_string(outstring, ' 9.7250(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '3963.22', width=5)

width < len (16) in center_string(outstring, ' 7.8536(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046055(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(17)', width=10)

width < len (7) in center_string(outstring, '4396.80', width=5)

width < len (16) in center_string(outstring, ' 9.6659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.96', width=5)

width < len (16) in center_string(outstring, ' 9.6315(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.40', width=5)

width < len (16) in center_string(outstring, ' 9.5940(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073689(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM80.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.17', width=5)

width < len (9) in center_string(outstring, '248729.34', width=6)

width < len (12) in center_string(outstring, '612955567.35', width=8)

width < len (7) in center_string(outstring, '3585.61', width=6)

width < len (7) in center_string(outstring, '4390.62', width=5)

width < len (16) in center_string(outstring, ' 9.6388(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.931(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4388.10', width=5)

width < len (16) in center_string(outstring, ' 9.6277(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.81', width=5)

width < len (16) in center_string(outstring, ' 9.6133(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026793(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.79', width=5)

width < len (16) in center_string(outstring, ' 9.5957(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928635(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.05', width=5)

width < len (16) in center_string(outstring, ' 9.5749(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044654(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4370.60', width=5)

width < len (16) in center_string(outstring, ' 9.5511(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053585(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.44', width=5)

width < len (16) in center_string(outstring, ' 9.5242(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.60', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071447(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM45.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '774.66', width=5)

width < len (9) in center_string(outstring, '300147.78', width=6)

width < len (12) in center_string(outstring, '598587110.93', width=8)

width < len (7) in center_string(outstring, '3079.23', width=6)

width < len (7) in center_string(outstring, '4394.41', width=5)

width < len (16) in center_string(outstring, ' 9.6554(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255099(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.66', width=5)

width < len (16) in center_string(outstring, ' 9.6434(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.14', width=5)

width < len (16) in center_string(outstring, ' 9.6279(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4383.90', width=5)

width < len (16) in center_string(outstring, ' 9.6093(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928726(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.92', width=5)

width < len (16) in center_string(outstring, ' 7.7694(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931442(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.30', width=5)

width < len (16) in center_string(outstring, ' 9.5629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.95', width=5)

width < len (16) in center_string(outstring, ' 9.5351(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936905(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.92', width=5)

width < len (16) in center_string(outstring, ' 9.5045(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.4(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM51.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '819.96', width=5)

width < len (9) in center_string(outstring, '336266.56', width=6)

width < len (12) in center_string(outstring, '615869540.78', width=8)

width < len (7) in center_string(outstring, '3063.41', width=6)

width < len (7) in center_string(outstring, '4402.22', width=5)

width < len (16) in center_string(outstring, ' 9.6898(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.830(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.34', width=5)

width < len (16) in center_string(outstring, ' 9.6771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.69', width=5)

width < len (16) in center_string(outstring, ' 9.6610(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.32', width=5)

width < len (16) in center_string(outstring, ' 9.6419(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.24', width=5)

width < len (16) in center_string(outstring, ' 9.6196(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.47', width=5)

width < len (16) in center_string(outstring, ' 9.5943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052980(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.00', width=5)

width < len (16) in center_string(outstring, ' 9.5659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061810(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.85', width=5)

width < len (16) in center_string(outstring, ' 9.5347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM56.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.59', width=5)

width < len (9) in center_string(outstring, '194522.17', width=6)

width < len (12) in center_string(outstring, '591692919.99', width=8)

width < len (7) in center_string(outstring, '3508.65', width=6)

width < len (7) in center_string(outstring, '4367.03', width=5)

width < len (16) in center_string(outstring, ' 9.5355(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254521(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.94', width=5)

width < len (16) in center_string(outstring, ' 9.5264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.05', width=5)

width < len (16) in center_string(outstring, ' 9.5138(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925537(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.41', width=5)

width < len (16) in center_string(outstring, ' 9.4979(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.01', width=5)

width < len (16) in center_string(outstring, ' 9.4787(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931183(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.87', width=5)

width < len (16) in center_string(outstring, ' 9.4563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.66', width=5)

width < len (16) in center_string(outstring, ' 7.6388(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4336.39', width=5)

width < len (16) in center_string(outstring, ' 9.4022(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM16.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '604.11', width=5)

width < len (9) in center_string(outstring, '182564.33', width=6)

width < len (12) in center_string(outstring, '589401438.40', width=8)

width < len (7) in center_string(outstring, '1866.37', width=6)

width < len (7) in center_string(outstring, '4358.34', width=5)

width < len (16) in center_string(outstring, ' 9.4976(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254669(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.22', width=5)

width < len (16) in center_string(outstring, ' 9.4883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4353.30', width=5)

width < len (16) in center_string(outstring, ' 9.4756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.64', width=5)

width < len (16) in center_string(outstring, ' 9.4597(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.23', width=5)

width < len (16) in center_string(outstring, ' 9.4405(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.09', width=5)

width < len (16) in center_string(outstring, ' 9.4182(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.26', width=5)

width < len (16) in center_string(outstring, ' 7.6177(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.61', width=5)

width < len (16) in center_string(outstring, ' 9.3641(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM7.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '908.80', width=5)

width < len (9) in center_string(outstring, '413058.31', width=6)

width < len (12) in center_string(outstring, '600771606.16', width=8)

width < len (7) in center_string(outstring, '3247.91', width=6)

width < len (7) in center_string(outstring, '4404.38', width=5)

width < len (16) in center_string(outstring, ' 9.6993(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.756(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4401.22', width=5)

width < len (16) in center_string(outstring, ' 9.6854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.30', width=5)

width < len (16) in center_string(outstring, ' 9.6681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925064(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4392.67', width=5)

width < len (16) in center_string(outstring, ' 9.6478(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4387.35', width=5)

width < len (16) in center_string(outstring, ' 9.6244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.33', width=5)

width < len (16) in center_string(outstring, ' 9.5980(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.64', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3924.39', width=5)

width < len (16) in center_string(outstring, ' 7.7004(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070045(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938583(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM62.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '357.20', width=5)

width < len (8) in center_string(outstring, '63882.30', width=6)

width < len (12) in center_string(outstring, '592684385.82', width=8)

width < len (7) in center_string(outstring, '1888.08', width=6)

width < len (7) in center_string(outstring, '4369.90', width=5)

width < len (16) in center_string(outstring, ' 9.5480(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.80', width=5)

width < len (16) in center_string(outstring, ' 9.5388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3936.35', width=5)

width < len (16) in center_string(outstring, ' 7.7474(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027377(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4361.25', width=5)

width < len (16) in center_string(outstring, ' 9.5103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929321(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.87', width=5)

width < len (16) in center_string(outstring, ' 9.4912(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.75', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054753(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4345.91', width=5)

width < len (16) in center_string(outstring, ' 9.4435(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.35', width=5)

width < len (16) in center_string(outstring, ' 9.4150(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073004(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940506(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM27.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1007.88', width=5)

width < len (9) in center_string(outstring, '508005.94', width=6)

width < len (12) in center_string(outstring, '588128059.01', width=8)

width < len (7) in center_string(outstring, '2964.11', width=6)

width < len (7) in center_string(outstring, '4413.44', width=5)

width < len (16) in center_string(outstring, ' 9.7392(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254238(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4410.10', width=5)

width < len (16) in center_string(outstring, ' 9.7245(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.01', width=5)

width < len (16) in center_string(outstring, ' 9.7065(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924744(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4401.24', width=5)

width < len (16) in center_string(outstring, ' 9.6855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3957.68', width=5)

width < len (16) in center_string(outstring, ' 7.8316(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929871(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4389.69', width=5)

width < len (16) in center_string(outstring, ' 9.6347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932434(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.90', width=5)

width < len (16) in center_string(outstring, ' 7.7732(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.52', width=5)

width < len (16) in center_string(outstring, ' 9.5726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM73.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '392.38', width=5)

width < len (8) in center_string(outstring, '77065.46', width=6)

width < len (12) in center_string(outstring, '593276579.32', width=8)

width < len (7) in center_string(outstring, '2168.10', width=6)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.038(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.74', width=5)

width < len (16) in center_string(outstring, ' 9.5517(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.73', width=5)

width < len (16) in center_string(outstring, ' 9.5385(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924683(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.00', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036153(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927460(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.53', width=5)

width < len (16) in center_string(outstring, ' 9.5028(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930222(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.35', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054230(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932999(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3915.22', width=5)

width < len (16) in center_string(outstring, ' 7.6645(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4341.85', width=5)

width < len (16) in center_string(outstring, ' 9.4258(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.310 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM33.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '521.20', width=5)

width < len (9) in center_string(outstring, '135912.69', width=6)

width < len (12) in center_string(outstring, '610373034.78', width=8)

width < len (7) in center_string(outstring, '3245.21', width=6)

width < len (7) in center_string(outstring, '4380.88', width=5)

width < len (16) in center_string(outstring, ' 9.5960(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.005(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.52', width=5)

width < len (16) in center_string(outstring, ' 9.5857(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.38', width=5)

width < len (16) in center_string(outstring, ' 9.5720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4371.50', width=5)

width < len (16) in center_string(outstring, ' 9.5550(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.91', width=5)

width < len (16) in center_string(outstring, ' 9.5349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045025(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.59', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.56', width=5)

width < len (16) in center_string(outstring, ' 9.4855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.83', width=5)

width < len (16) in center_string(outstring, ' 9.4562(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM38.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '707.98', width=5)

width < len (9) in center_string(outstring, '250709.45', width=6)

width < len (12) in center_string(outstring, '597701962.06', width=8)

width < len (7) in center_string(outstring, '3757.60', width=6)

width < len (7) in center_string(outstring, '4389.98', width=5)

width < len (16) in center_string(outstring, ' 9.6360(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.49', width=5)

width < len (16) in center_string(outstring, ' 9.6251(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.12', width=5)

width < len (16) in center_string(outstring, ' 7.8017(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924561(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4380.24', width=5)

width < len (16) in center_string(outstring, ' 9.5933(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.53', width=5)

width < len (16) in center_string(outstring, ' 9.5726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.11', width=5)

width < len (16) in center_string(outstring, ' 9.5489(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.98', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.16', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM44.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '815.93', width=5)

width < len (9) in center_string(outstring, '332971.19', width=6)

width < len (12) in center_string(outstring, '615948228.53', width=8)

width < len (7) in center_string(outstring, '3088.25', width=6)

width < len (7) in center_string(outstring, '4402.46', width=5)

width < len (16) in center_string(outstring, ' 9.6909(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.844(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252824(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.60', width=5)

width < len (16) in center_string(outstring, ' 9.6782(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017689(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.96', width=5)

width < len (16) in center_string(outstring, ' 9.6622(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.60', width=5)

width < len (16) in center_string(outstring, ' 9.6431(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035378(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926437(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.53', width=5)

width < len (16) in center_string(outstring, ' 9.6208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044222(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.76', width=5)

width < len (16) in center_string(outstring, ' 9.5956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.30', width=5)

width < len (16) in center_string(outstring, ' 9.5673(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061911(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.15', width=5)

width < len (16) in center_string(outstring, ' 9.5360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM55.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '640.33', width=5)

width < len (9) in center_string(outstring, '205104.95', width=6)

width < len (12) in center_string(outstring, '591376510.12', width=8)

width < len (7) in center_string(outstring, '3541.71', width=6)

width < len (7) in center_string(outstring, '4365.81', width=5)

width < len (16) in center_string(outstring, ' 9.5302(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253543(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.71', width=5)

width < len (16) in center_string(outstring, ' 9.5210(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921753(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.80', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.15', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.74', width=5)

width < len (16) in center_string(outstring, ' 9.4732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930191(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3914.15', width=5)

width < len (16) in center_string(outstring, ' 7.6603(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933014(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4341.71', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935822(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.10', width=5)

width < len (16) in center_string(outstring, ' 9.3966(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938644(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM15.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '597.76', width=5)

width < len (9) in center_string(outstring, '178750.53', width=6)

width < len (12) in center_string(outstring, '589445385.29', width=8)

width < len (7) in center_string(outstring, '1776.25', width=6)

width < len (7) in center_string(outstring, '4358.41', width=5)

width < len (16) in center_string(outstring, ' 9.4979(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254316(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.29', width=5)

width < len (16) in center_string(outstring, ' 9.4886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.38', width=5)

width < len (16) in center_string(outstring, ' 9.4760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.72', width=5)

width < len (16) in center_string(outstring, ' 9.4600(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.31', width=5)

width < len (16) in center_string(outstring, ' 9.4409(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.17', width=5)

width < len (16) in center_string(outstring, ' 9.4185(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.99', width=5)

width < len (16) in center_string(outstring, ' 7.6206(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4327.69', width=5)

width < len (16) in center_string(outstring, ' 9.3645(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM6.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '964.63', width=5)

width < len (9) in center_string(outstring, '465352.88', width=6)

width < len (12) in center_string(outstring, '616790001.45', width=8)

width < len (7) in center_string(outstring, '3275.13', width=6)

width < len (7) in center_string(outstring, '4407.01', width=5)

width < len (16) in center_string(outstring, ' 9.7109(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.732(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.68', width=5)

width < len (16) in center_string(outstring, ' 9.6962(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.57', width=5)

width < len (16) in center_string(outstring, ' 9.6781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026195(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.77', width=5)

width < len (16) in center_string(outstring, ' 9.6570(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4389.27', width=5)

width < len (16) in center_string(outstring, ' 9.6329(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.09', width=5)

width < len (16) in center_string(outstring, ' 9.6058(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4376.24', width=5)

width < len (16) in center_string(outstring, ' 9.5757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.71', width=5)

width < len (16) in center_string(outstring, ' 9.5428(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM66.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 84 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '363.09', width=5)

width < len (8) in center_string(outstring, '66002.16', width=6)

width < len (12) in center_string(outstring, '592554230.91', width=8)

width < len (7) in center_string(outstring, '1932.22', width=6)

width < len (7) in center_string(outstring, '3944.46', width=5)

width < len (16) in center_string(outstring, ' 7.7794(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254435(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4366.88', width=5)

width < len (16) in center_string(outstring, ' 9.5348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.96', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.29', width=5)

width < len (16) in center_string(outstring, ' 9.5061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928223(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.88', width=5)

width < len (16) in center_string(outstring, ' 9.4869(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931015(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.74', width=5)

width < len (16) in center_string(outstring, ' 9.4645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.88', width=5)

width < len (16) in center_string(outstring, ' 9.4390(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.30', width=5)

width < len (16) in center_string(outstring, ' 9.4104(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.5)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM26.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1018.40', width=5)

width < len (9) in center_string(outstring, '518665.81', width=6)

width < len (12) in center_string(outstring, '588079566.71', width=8)

width < len (7) in center_string(outstring, '3081.70', width=6)

width < len (7) in center_string(outstring, '4412.56', width=5)

width < len (16) in center_string(outstring, ' 9.7353(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.199(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252434(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.26', width=5)

width < len (16) in center_string(outstring, ' 9.7208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920380(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3970.91', width=5)

width < len (16) in center_string(outstring, ' 7.8841(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027598(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922943(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4400.50', width=5)

width < len (16) in center_string(outstring, ' 9.6822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036797(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4395.11', width=5)

width < len (16) in center_string(outstring, ' 9.6585(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045996(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4389.06', width=5)

width < len (16) in center_string(outstring, ' 9.6319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055196(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930603(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.36', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064395(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3935.40', width=5)

width < len (16) in center_string(outstring, ' 7.7437(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073594(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935715(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(17)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM72.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.40', width=5)

width < len (9) in center_string(outstring, '533023.12', width=6)

width < len (12) in center_string(outstring, '604642326.70', width=8)

width < len (7) in center_string(outstring, '2851.34', width=6)

width < len (7) in center_string(outstring, '4421.02', width=5)

width < len (16) in center_string(outstring, ' 9.7727(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255299(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4417.22', width=5)

width < len (16) in center_string(outstring, ' 9.7559(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923508(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.56', width=5)

width < len (16) in center_string(outstring, ' 9.7354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4407.14', width=5)

width < len (16) in center_string(outstring, ' 9.7115(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.95', width=5)

width < len (16) in center_string(outstring, ' 9.6842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931961(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.66', width=5)

width < len (16) in center_string(outstring, ' 7.8078(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934784(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4386.32', width=5)

width < len (16) in center_string(outstring, ' 9.6199(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937607(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.90', width=5)

width < len (16) in center_string(outstring, ' 9.5830(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.1)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM77.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '498.05', width=5)

width < len (9) in center_string(outstring, '124117.25', width=6)

width < len (12) in center_string(outstring, '610277085.98', width=8)

width < len (7) in center_string(outstring, '3037.00', width=6)

width < len (7) in center_string(outstring, '4380.44', width=5)

width < len (16) in center_string(outstring, ' 9.5941(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.11', width=5)

width < len (16) in center_string(outstring, ' 9.5839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.00', width=5)

width < len (16) in center_string(outstring, ' 9.5703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027056(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.16', width=5)

width < len (16) in center_string(outstring, ' 9.5535(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928345(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.58', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.29', width=5)

width < len (16) in center_string(outstring, ' 9.5104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.28', width=5)

width < len (16) in center_string(outstring, ' 9.4842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4348.57', width=5)

width < len (16) in center_string(outstring, ' 9.4550(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM37.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '712.35', width=5)

width < len (9) in center_string(outstring, '253817.52', width=6)

width < len (12) in center_string(outstring, '583641019.51', width=8)

width < len (7) in center_string(outstring, '3077.81', width=6)

width < len (7) in center_string(outstring, '4394.40', width=5)

width < len (16) in center_string(outstring, ' 9.6554(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.908(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3957.72', width=5)

width < len (16) in center_string(outstring, ' 7.8318(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017815(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.42', width=5)

width < len (16) in center_string(outstring, ' 9.6291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.32', width=5)

width < len (16) in center_string(outstring, ' 9.6111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4379.50', width=5)

width < len (16) in center_string(outstring, ' 9.5900(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930771(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.97', width=5)

width < len (16) in center_string(outstring, ' 9.5658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053445(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.74', width=5)

width < len (16) in center_string(outstring, ' 9.5386(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062353(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3919.44', width=5)

width < len (16) in center_string(outstring, ' 7.6810(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071261(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938980(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(5.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM48.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '812.71', width=5)

width < len (9) in center_string(outstring, '330344.31', width=6)

width < len (12) in center_string(outstring, '615768992.87', width=8)

width < len (7) in center_string(outstring, '3092.30', width=6)

width < len (7) in center_string(outstring, '4401.70', width=5)

width < len (16) in center_string(outstring, ' 9.6875(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.850(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.87', width=5)

width < len (16) in center_string(outstring, ' 9.6751(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.27', width=5)

width < len (16) in center_string(outstring, ' 9.6592(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026550(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.95', width=5)

width < len (16) in center_string(outstring, ' 9.6402(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035400(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927322(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.91', width=5)

width < len (16) in center_string(outstring, ' 9.6181(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044250(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.18', width=5)

width < len (16) in center_string(outstring, ' 9.5930(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932785(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.75', width=5)

width < len (16) in center_string(outstring, ' 9.5648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061950(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.63', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070800(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM54.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '872.84', width=5)

width < len (9) in center_string(outstring, '381025.66', width=6)

width < len (12) in center_string(outstring, '598623860.11', width=8)

width < len (7) in center_string(outstring, '3222.97', width=6)

width < len (7) in center_string(outstring, '4395.06', width=5)

width < len (16) in center_string(outstring, ' 9.6583(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4392.13', width=5)

width < len (16) in center_string(outstring, ' 9.6454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4388.46', width=5)

width < len (16) in center_string(outstring, ' 9.6293(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.13', width=5)

width < len (16) in center_string(outstring, ' 9.6103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.12', width=5)

width < len (16) in center_string(outstring, ' 9.5884(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3935.03', width=5)

width < len (16) in center_string(outstring, ' 7.7422(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4367.14', width=5)

width < len (16) in center_string(outstring, ' 9.5360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.18', width=5)

width < len (16) in center_string(outstring, ' 9.5056(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM59.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '548.91', width=5)

width < len (9) in center_string(outstring, '150739.59', width=6)

width < len (12) in center_string(outstring, '591774925.64', width=8)

width < len (7) in center_string(outstring, '3444.20', width=6)

width < len (7) in center_string(outstring, '4366.81', width=5)

width < len (16) in center_string(outstring, ' 9.5345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.188(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.73', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.85', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3927.63', width=5)

width < len (16) in center_string(outstring, ' 7.7131(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036751(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926361(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.84', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929169(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.72', width=5)

width < len (16) in center_string(outstring, ' 9.4557(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.87', width=5)

width < len (16) in center_string(outstring, ' 9.4303(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.30', width=5)

width < len (16) in center_string(outstring, ' 9.4017(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937607(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM19.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '952.87', width=5)

width < len (9) in center_string(outstring, '454080.88', width=6)

width < len (12) in center_string(outstring, '621142339.07', width=8)

width < len (7) in center_string(outstring, '3258.34', width=6)

width < len (7) in center_string(outstring, '4408.92', width=5)

width < len (16) in center_string(outstring, ' 9.7193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014651(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916565(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4408.17', width=5)

width < len (16) in center_string(outstring, ' 9.7160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915771(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4407.34', width=5)

width < len (16) in center_string(outstring, ' 9.7123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.44', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058605(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914200(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4405.46', width=5)

width < len (16) in center_string(outstring, ' 9.7040(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073256(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4404.40', width=5)

width < len (16) in center_string(outstring, ' 9.6994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087908(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.27', width=5)

width < len (16) in center_string(outstring, ' 9.6944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102559(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4402.06', width=5)

width < len (16) in center_string(outstring, ' 9.6891(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM65.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.46', width=5)

width < len (9) in center_string(outstring, '528970.12', width=6)

width < len (12) in center_string(outstring, '604321263.36', width=8)

width < len (7) in center_string(outstring, '2853.46', width=6)

width < len (7) in center_string(outstring, '4419.90', width=5)

width < len (16) in center_string(outstring, ' 9.7678(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255131(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4416.09', width=5)

width < len (16) in center_string(outstring, ' 9.7509(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.42', width=5)

width < len (16) in center_string(outstring, ' 9.7303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926163(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4405.99', width=5)

width < len (16) in center_string(outstring, ' 9.7064(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.79', width=5)

width < len (16) in center_string(outstring, ' 9.6791(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3950.51', width=5)

width < len (16) in center_string(outstring, ' 7.8033(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.13', width=5)

width < len (16) in center_string(outstring, ' 9.6147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937439(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4376.70', width=5)

width < len (16) in center_string(outstring, ' 9.5778(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM76.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '470.02', width=5)

width < len (9) in center_string(outstring, '110549.62', width=6)

width < len (12) in center_string(outstring, '595568796.05', width=8)

width < len (7) in center_string(outstring, '2821.78', width=6)

width < len (7) in center_string(outstring, '4380.15', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256474(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.58', width=5)

width < len (16) in center_string(outstring, ' 7.7917(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257761(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4375.19', width=5)

width < len (16) in center_string(outstring, ' 9.5711(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4371.67', width=5)

width < len (16) in center_string(outstring, ' 9.5558(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4367.49', width=5)

width < len (16) in center_string(outstring, ' 9.5375(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4362.64', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788818(16)', width=10)

width < len (7) in center_string(outstring, '4357.14', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '4351.00', width=5)

width < len (16) in center_string(outstring, ' 9.4656(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM36.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '719.01', width=5)

width < len (9) in center_string(outstring, '258581.69', width=6)

width < len (12) in center_string(outstring, '613363376.14', width=8)

width < len (7) in center_string(outstring, '3241.71', width=6)

width < len (7) in center_string(outstring, '4392.43', width=5)

width < len (16) in center_string(outstring, ' 9.6467(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.906(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254051(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.81', width=5)

width < len (16) in center_string(outstring, ' 9.6352(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.41', width=5)

width < len (16) in center_string(outstring, ' 9.6203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.28', width=5)

width < len (16) in center_string(outstring, ' 9.6022(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4377.45', width=5)

width < len (16) in center_string(outstring, ' 9.5810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930435(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.90', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053436(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.65', width=5)

width < len (16) in center_string(outstring, ' 9.5295(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062342(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.72', width=5)

width < len (16) in center_string(outstring, ' 9.4992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071248(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938660(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM47.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '858.06', width=5)

width < len (9) in center_string(outstring, '368227.34', width=6)

width < len (12) in center_string(outstring, '568797324.25', width=8)

width < len (7) in center_string(outstring, '3169.75', width=6)

width < len (7) in center_string(outstring, '4395.51', width=5)

width < len (16) in center_string(outstring, ' 9.6603(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254001(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3959.25', width=5)

width < len (16) in center_string(outstring, ' 7.8378(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.72', width=5)

width < len (16) in center_string(outstring, ' 9.6304(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.23', width=5)

width < len (16) in center_string(outstring, ' 9.6108(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.48', width=5)

width < len (16) in center_string(outstring, ' 7.7677(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930283(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.18', width=5)

width < len (16) in center_string(outstring, ' 9.5624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052719(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932999(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4366.63', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3919.22', width=5)

width < len (16) in center_string(outstring, ' 7.6801(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938416(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM58.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '572.51', width=5)

width < len (9) in center_string(outstring, '163972.78', width=6)

width < len (12) in center_string(outstring, '606536697.97', width=8)

width < len (7) in center_string(outstring, '3537.10', width=6)

width < len (7) in center_string(outstring, '4366.30', width=5)

width < len (16) in center_string(outstring, ' 9.5323(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.205(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.22', width=5)

width < len (16) in center_string(outstring, ' 9.5232(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.34', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027615(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924149(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4357.71', width=5)

width < len (16) in center_string(outstring, ' 9.4948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036819(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926971(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.32', width=5)

width < len (16) in center_string(outstring, ' 9.4757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.20', width=5)

width < len (16) in center_string(outstring, ' 9.4534(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055229(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932602(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.34', width=5)

width < len (16) in center_string(outstring, ' 9.4280(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064434(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.76', width=5)

width < len (16) in center_string(outstring, ' 9.3994(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073639(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM18.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '627.45', width=5)

width < len (9) in center_string(outstring, '196942.56', width=6)

width < len (12) in center_string(outstring, '589743421.54', width=8)

width < len (7) in center_string(outstring, '2238.42', width=6)

width < len (7) in center_string(outstring, '4359.40', width=5)

width < len (16) in center_string(outstring, ' 9.5022(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.28', width=5)

width < len (16) in center_string(outstring, ' 9.4929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.36', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.70', width=5)

width < len (16) in center_string(outstring, ' 9.4643(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.29', width=5)

width < len (16) in center_string(outstring, ' 9.4451(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.72', width=5)

width < len (16) in center_string(outstring, ' 7.6508(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.25', width=5)

width < len (16) in center_string(outstring, ' 9.3972(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935165(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.65', width=5)

width < len (16) in center_string(outstring, ' 9.3686(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM9.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 38 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '982.41', width=5)

width < len (9) in center_string(outstring, '482660.31', width=6)

width < len (12) in center_string(outstring, '617608629.10', width=8)

width < len (7) in center_string(outstring, '3131.30', width=6)

width < len (7) in center_string(outstring, '4410.02', width=5)

width < len (16) in center_string(outstring, ' 9.7241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253560(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.65', width=5)

width < len (16) in center_string(outstring, ' 9.7093(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.52', width=5)

width < len (16) in center_string(outstring, ' 9.6911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.69', width=5)

width < len (16) in center_string(outstring, ' 9.6699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4392.17', width=5)

width < len (16) in center_string(outstring, ' 9.6456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929794(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.97', width=5)

width < len (16) in center_string(outstring, ' 9.6184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.09', width=5)

width < len (16) in center_string(outstring, ' 9.5882(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4371.54', width=5)

width < len (16) in center_string(outstring, ' 9.5552(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM69.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 92 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.45', width=5)

width < len (8) in center_string(outstring, '62900.99', width=6)

width < len (12) in center_string(outstring, '593446703.00', width=8)

width < len (7) in center_string(outstring, '1875.63', width=6)

width < len (7) in center_string(outstring, '3946.30', width=5)

width < len (16) in center_string(outstring, ' 7.7866(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.101(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254553(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4370.41', width=5)

width < len (16) in center_string(outstring, ' 9.5502(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018203(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.45', width=5)

width < len (16) in center_string(outstring, ' 9.5373(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027304(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925537(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.75', width=5)

width < len (16) in center_string(outstring, ' 9.5212(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928314(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.32', width=5)

width < len (16) in center_string(outstring, ' 9.5018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.15', width=5)

width < len (16) in center_string(outstring, ' 9.4793(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.26', width=5)

width < len (16) in center_string(outstring, ' 9.4537(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.66', width=5)

width < len (16) in center_string(outstring, ' 9.4250(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-2', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM29.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.64', width=5)

width < len (9) in center_string(outstring, '533268.44', width=6)

width < len (12) in center_string(outstring, '605127397.90', width=8)

width < len (7) in center_string(outstring, '2929.39', width=6)

width < len (7) in center_string(outstring, '4421.02', width=5)

width < len (16) in center_string(outstring, ' 9.7727(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253083(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.53', width=5)

width < len (16) in center_string(outstring, ' 9.7573(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921036(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4413.30', width=5)

width < len (16) in center_string(outstring, ' 9.7386(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923584(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4408.38', width=5)

width < len (16) in center_string(outstring, ' 9.7169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926147(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4402.79', width=5)

width < len (16) in center_string(outstring, ' 9.6923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928711(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3953.99', width=5)

width < len (16) in center_string(outstring, ' 7.8170(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4389.63', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933838(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4382.07', width=5)

width < len (16) in center_string(outstring, ' 9.6013(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(5.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(8.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM75.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '846.74', width=5)

width < len (9) in center_string(outstring, '358582.28', width=6)

width < len (12) in center_string(outstring, '613809586.25', width=8)

width < len (7) in center_string(outstring, '3103.04', width=6)

width < len (7) in center_string(outstring, '4395.27', width=5)

width < len (16) in center_string(outstring, ' 9.6592(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.795(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255390(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4392.26', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017589(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.48', width=5)

width < len (16) in center_string(outstring, ' 9.6294(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.00', width=5)

width < len (16) in center_string(outstring, ' 9.6098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4378.83', width=5)

width < len (16) in center_string(outstring, ' 9.5871(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043973(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931686(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4366.41', width=5)

width < len (16) in center_string(outstring, ' 9.5328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4359.18', width=5)

width < len (16) in center_string(outstring, ' 9.5012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM57.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.36', width=5)

width < len (9) in center_string(outstring, '480649.59', width=6)

width < len (12) in center_string(outstring, '617824138.24', width=8)

width < len (7) in center_string(outstring, '3174.17', width=6)

width < len (7) in center_string(outstring, '4410.78', width=5)

width < len (16) in center_string(outstring, ' 9.7275(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.725(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254443(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.42', width=5)

width < len (16) in center_string(outstring, ' 9.7127(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017450(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4403.29', width=5)

width < len (16) in center_string(outstring, ' 9.6945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026174(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.46', width=5)

width < len (16) in center_string(outstring, ' 9.6732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034899(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.94', width=5)

width < len (16) in center_string(outstring, ' 9.6490(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.73', width=5)

width < len (16) in center_string(outstring, ' 9.6217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052349(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.85', width=5)

width < len (16) in center_string(outstring, ' 9.5916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4372.30', width=5)

width < len (16) in center_string(outstring, ' 9.5585(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069798(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM68.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.27', width=5)

width < len (9) in center_string(outstring, '528773.38', width=6)

width < len (12) in center_string(outstring, '604680095.24', width=8)

width < len (7) in center_string(outstring, '2668.49', width=6)

width < len (7) in center_string(outstring, '4421.49', width=5)

width < len (16) in center_string(outstring, ' 9.7748(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255923(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.59', width=5)

width < len (16) in center_string(outstring, ' 9.7576(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924133(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.84', width=5)

width < len (16) in center_string(outstring, ' 9.7366(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926956(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.32', width=5)

width < len (16) in center_string(outstring, ' 9.7122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4401.03', width=5)

width < len (16) in center_string(outstring, ' 9.6845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932587(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3951.70', width=5)

width < len (16) in center_string(outstring, ' 7.8080(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.20', width=5)

width < len (16) in center_string(outstring, ' 9.6194(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.68', width=5)

width < len (16) in center_string(outstring, ' 9.5820(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM79.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '609.08', width=5)

width < len (9) in center_string(outstring, '185583.11', width=6)

width < len (12) in center_string(outstring, '581014080.14', width=8)

width < len (7) in center_string(outstring, '3919.35', width=6)

width < len (7) in center_string(outstring, '3954.56', width=5)

width < len (16) in center_string(outstring, ' 7.8193(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.012(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253090(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4379.94', width=5)

width < len (16) in center_string(outstring, ' 9.5919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.80', width=5)

width < len (16) in center_string(outstring, ' 9.5782(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.93', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036047(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.10', width=5)

width < len (16) in center_string(outstring, ' 7.7386(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045059(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4363.00', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4356.97', width=5)

width < len (16) in center_string(outstring, ' 9.4916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063083(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.23', width=5)

width < len (16) in center_string(outstring, ' 9.4623(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.310 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM39.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.26', width=5)

width < len (9) in center_string(outstring, '541169.25', width=6)

width < len (12) in center_string(outstring, '605432084.98', width=8)

width < len (7) in center_string(outstring, '2766.11', width=6)

width < len (7) in center_string(outstring, '4423.43', width=5)

width < len (16) in center_string(outstring, ' 9.7834(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253978(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3982.14', width=5)

width < len (16) in center_string(outstring, ' 7.9287(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.87', width=5)

width < len (16) in center_string(outstring, ' 9.7455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.39', width=5)

width < len (16) in center_string(outstring, ' 9.7214(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.15', width=5)

width < len (16) in center_string(outstring, ' 9.6939(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4396.15', width=5)

width < len (16) in center_string(outstring, ' 9.6631(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.41', width=5)

width < len (16) in center_string(outstring, ' 9.6291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.94', width=5)

width < len (16) in center_string(outstring, ' 9.5919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(1.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(3.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM78.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '617.37', width=5)

width < len (9) in center_string(outstring, '190663.47', width=6)

width < len (12) in center_string(outstring, '595667997.28', width=8)

width < len (7) in center_string(outstring, '4012.76', width=6)

width < len (7) in center_string(outstring, '4382.36', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.997(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.98', width=5)

width < len (16) in center_string(outstring, ' 9.5921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017994(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.82', width=5)

width < len (16) in center_string(outstring, ' 9.5783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026991(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.92', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035988(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '3933.63', width=5)

width < len (16) in center_string(outstring, ' 7.7367(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044985(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930893(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4362.96', width=5)

width < len (16) in center_string(outstring, ' 9.5177(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062979(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.16', width=5)

width < len (16) in center_string(outstring, ' 9.4619(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM40.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '640.30', width=5)

width < len (9) in center_string(outstring, '205086.42', width=6)

width < len (12) in center_string(outstring, '590611401.85', width=8)

width < len (7) in center_string(outstring, '2591.44', width=6)

width < len (7) in center_string(outstring, '3938.26', width=5)

width < len (16) in center_string(outstring, ' 7.7550(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253065(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4359.91', width=5)

width < len (16) in center_string(outstring, ' 9.5044(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.93', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.20', width=5)

width < len (16) in center_string(outstring, ' 9.4752(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4348.72', width=5)

width < len (16) in center_string(outstring, ' 9.4557(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.49', width=5)

width < len (16) in center_string(outstring, ' 9.4330(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.54', width=5)

width < len (16) in center_string(outstring, ' 9.4071(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935349(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.86', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938171(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM11.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '584.03', width=5)

width < len (9) in center_string(outstring, '170635.42', width=6)

width < len (12) in center_string(outstring, '589963894.09', width=8)

width < len (7) in center_string(outstring, '1467.32', width=6)

width < len (7) in center_string(outstring, '4359.28', width=5)

width < len (16) in center_string(outstring, ' 9.5016(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254771(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.40', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.74', width=5)

width < len (16) in center_string(outstring, ' 9.4819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925797(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.33', width=5)

width < len (16) in center_string(outstring, ' 9.4670(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928604(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.17', width=5)

width < len (16) in center_string(outstring, ' 9.4489(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931427(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.26', width=5)

width < len (16) in center_string(outstring, ' 9.4276(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.62', width=5)

width < len (16) in center_string(outstring, ' 7.6348(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.27', width=5)

width < len (16) in center_string(outstring, ' 9.3756(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939865(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM2.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '450.78', width=5)

width < len (9) in center_string(outstring, '101690.61', width=6)

width < len (12) in center_string(outstring, '577041327.96', width=8)

width < len (7) in center_string(outstring, '2613.13', width=6)

width < len (7) in center_string(outstring, '4367.43', width=5)

width < len (16) in center_string(outstring, ' 9.5372(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.160(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.34', width=5)

width < len (16) in center_string(outstring, ' 9.5281(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.46', width=5)

width < len (16) in center_string(outstring, ' 9.5155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4358.83', width=5)

width < len (16) in center_string(outstring, ' 9.4997(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3922.16', width=5)

width < len (16) in center_string(outstring, ' 7.6917(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045800(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.35', width=5)

width < len (16) in center_string(outstring, ' 9.4584(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3909.25', width=5)

width < len (16) in center_string(outstring, ' 7.6411(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064120(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937149(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4336.96', width=5)

width < len (16) in center_string(outstring, ' 9.4046(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939941(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM22.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '736.06', width=5)

width < len (9) in center_string(outstring, '270985.50', width=6)

width < len (12) in center_string(outstring, '598497042.81', width=8)

width < len (7) in center_string(outstring, '2964.04', width=6)

width < len (7) in center_string(outstring, '4394.53', width=5)

width < len (16) in center_string(outstring, ' 9.6559(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.884(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.79', width=5)

width < len (16) in center_string(outstring, ' 9.6439(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923019(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.27', width=5)

width < len (16) in center_string(outstring, ' 9.6285(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026653(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.03', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4379.08', width=5)

width < len (16) in center_string(outstring, ' 9.5882(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.43', width=5)

width < len (16) in center_string(outstring, ' 9.5634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053307(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.07', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3919.39', width=5)

width < len (16) in center_string(outstring, ' 7.6808(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071076(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM50.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '637.80', width=5)

width < len (9) in center_string(outstring, '203485.25', width=6)

width < len (12) in center_string(outstring, '590013922.00', width=8)

width < len (7) in center_string(outstring, '2494.29', width=6)

width < len (7) in center_string(outstring, '4360.41', width=5)

width < len (16) in center_string(outstring, ' 9.5066(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253209(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.30', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.39', width=5)

width < len (16) in center_string(outstring, ' 9.4847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.73', width=5)

width < len (16) in center_string(outstring, ' 9.4688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.33', width=5)

width < len (16) in center_string(outstring, ' 9.4496(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929855(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.34', width=5)

width < len (16) in center_string(outstring, ' 7.6532(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.31', width=5)

width < len (16) in center_string(outstring, ' 9.4018(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935486(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4329.71', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938309(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM10.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.10', width=5)

width < len (9) in center_string(outstring, '170097.42', width=6)

width < len (12) in center_string(outstring, '589127458.51', width=8)

width < len (7) in center_string(outstring, '1437.20', width=6)

width < len (7) in center_string(outstring, '4355.98', width=5)

width < len (16) in center_string(outstring, ' 9.4873(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254675(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.12', width=5)

width < len (16) in center_string(outstring, ' 9.4792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4351.48', width=5)

width < len (16) in center_string(outstring, ' 9.4677(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.08', width=5)

width < len (16) in center_string(outstring, ' 9.4529(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.94', width=5)

width < len (16) in center_string(outstring, ' 9.4349(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.05', width=5)

width < len (16) in center_string(outstring, ' 9.4137(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3905.96', width=5)

width < len (16) in center_string(outstring, ' 7.6283(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4327.10', width=5)

width < len (16) in center_string(outstring, ' 9.3619(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM1.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '891.31', width=5)

width < len (9) in center_string(outstring, '397318.78', width=6)

width < len (12) in center_string(outstring, '599784354.03', width=8)

width < len (7) in center_string(outstring, '3226.63', width=6)

width < len (7) in center_string(outstring, '4399.53', width=5)

width < len (16) in center_string(outstring, ' 9.6780(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.767(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3962.19', width=5)

width < len (16) in center_string(outstring, ' 7.8495(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017535(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921661(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4392.57', width=5)

width < len (16) in center_string(outstring, ' 9.6473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026302(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924362(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4388.00', width=5)

width < len (16) in center_string(outstring, ' 9.6273(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927078(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4382.73', width=5)

width < len (16) in center_string(outstring, ' 9.6042(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043837(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4376.78', width=5)

width < len (16) in center_string(outstring, ' 9.5781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4370.14', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061371(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4362.84', width=5)

width < len (16) in center_string(outstring, ' 9.5172(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070138(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM61.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '477.61', width=5)

width < len (9) in center_string(outstring, '114142.48', width=6)

width < len (12) in center_string(outstring, '563003622.71', width=8)

width < len (7) in center_string(outstring, '2875.81', width=6)

width < len (7) in center_string(outstring, '3942.52', width=5)

width < len (16) in center_string(outstring, ' 7.7718(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.174(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254233(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4366.58', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018349(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922440(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.68', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027523(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.84', width=5)

width < len (16) in center_string(outstring, ' 7.7179(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036697(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4355.63', width=5)

width < len (16) in center_string(outstring, ' 9.4858(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045872(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.50', width=5)

width < len (16) in center_string(outstring, ' 9.4634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055046(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3910.23', width=5)

width < len (16) in center_string(outstring, ' 7.6449(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064220(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4338.04', width=5)

width < len (16) in center_string(outstring, ' 9.4093(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073395(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM21.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 82 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '370.43', width=5)

width < len (8) in center_string(outstring, '68693.90', width=6)

width < len (12) in center_string(outstring, '608213983.66', width=8)

width < len (7) in center_string(outstring, '1997.81', width=6)

width < len (7) in center_string(outstring, '4372.51', width=5)

width < len (16) in center_string(outstring, ' 9.5594(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.060(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256154(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4370.34', width=5)

width < len (16) in center_string(outstring, ' 9.5499(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018120(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.39', width=5)

width < len (16) in center_string(outstring, ' 9.5370(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.70', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036239(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.28', width=5)

width < len (16) in center_string(outstring, ' 9.5017(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045299(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4354.13', width=5)

width < len (16) in center_string(outstring, ' 9.4792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.27', width=5)

width < len (16) in center_string(outstring, ' 9.4537(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063418(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.71', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(9.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM32.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '701.57', width=5)

width < len (9) in center_string(outstring, '246194.27', width=6)

width < len (12) in center_string(outstring, '611405043.59', width=8)

width < len (7) in center_string(outstring, '4132.27', width=6)

width < len (7) in center_string(outstring, '4384.89', width=5)

width < len (16) in center_string(outstring, ' 9.6137(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.971(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.44', width=5)

width < len (16) in center_string(outstring, ' 9.6029(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017942(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920532(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.20', width=5)

width < len (16) in center_string(outstring, ' 9.5887(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026912(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.23', width=5)

width < len (16) in center_string(outstring, ' 9.5713(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926041(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.54', width=5)

width < len (16) in center_string(outstring, ' 9.5508(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.14', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053825(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.03', width=5)

width < len (16) in center_string(outstring, ' 9.5006(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062796(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934311(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4352.22', width=5)

width < len (16) in center_string(outstring, ' 9.4709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM43.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '655.43', width=5)

width < len (9) in center_string(outstring, '214890.80', width=6)

width < len (12) in center_string(outstring, '590910776.80', width=8)

width < len (7) in center_string(outstring, '3307.66', width=6)

width < len (7) in center_string(outstring, '4364.22', width=5)

width < len (16) in center_string(outstring, ' 9.5232(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.09', width=5)

width < len (16) in center_string(outstring, ' 9.5139(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.16', width=5)

width < len (16) in center_string(outstring, ' 9.5011(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.47', width=5)

width < len (16) in center_string(outstring, ' 9.4851(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927856(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4351.04', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3912.36', width=5)

width < len (16) in center_string(outstring, ' 7.6533(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4339.96', width=5)

width < len (16) in center_string(outstring, ' 9.4176(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936310(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.32', width=5)

width < len (16) in center_string(outstring, ' 9.3888(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939117(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM14.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '588.21', width=5)

width < len (9) in center_string(outstring, '173086.05', width=6)

width < len (12) in center_string(outstring, '589691677.33', width=8)

width < len (7) in center_string(outstring, '1445.95', width=6)

width < len (7) in center_string(outstring, '4357.89', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.07', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921158(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.46', width=5)

width < len (16) in center_string(outstring, ' 9.4763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.10', width=5)

width < len (16) in center_string(outstring, ' 9.4617(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926788(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.99', width=5)

width < len (16) in center_string(outstring, ' 9.4438(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.14', width=5)

width < len (16) in center_string(outstring, ' 9.4227(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932419(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.26', width=5)

width < len (16) in center_string(outstring, ' 7.6372(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935242(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.25', width=5)

width < len (16) in center_string(outstring, ' 9.3712(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM0.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '595.92', width=5)

width < len (9) in center_string(outstring, '177651.14', width=6)

width < len (12) in center_string(outstring, '589153296.81', width=8)

width < len (7) in center_string(outstring, '1665.55', width=6)

width < len (7) in center_string(outstring, '4356.93', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.90', width=5)

width < len (16) in center_string(outstring, ' 9.4826(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.09', width=5)

width < len (16) in center_string(outstring, ' 9.4703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.52', width=5)

width < len (16) in center_string(outstring, ' 9.4548(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928192(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4344.21', width=5)

width < len (16) in center_string(outstring, ' 9.4361(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931015(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.16', width=5)

width < len (16) in center_string(outstring, ' 9.4142(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.77', width=5)

width < len (16) in center_string(outstring, ' 7.6197(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936646(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.88', width=5)

width < len (16) in center_string(outstring, ' 9.3609(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM5.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '889.98', width=5)

width < len (9) in center_string(outstring, '396129.44', width=6)

width < len (12) in center_string(outstring, '584277892.12', width=8)

width < len (7) in center_string(outstring, '3282.43', width=6)

width < len (7) in center_string(outstring, '4398.47', width=5)

width < len (16) in center_string(outstring, ' 9.6733(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256075(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4395.47', width=5)

width < len (16) in center_string(outstring, ' 9.6601(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924026(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4391.74', width=5)

width < len (16) in center_string(outstring, ' 9.6437(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4387.33', width=5)

width < len (16) in center_string(outstring, ' 9.6244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4382.26', width=5)

width < len (16) in center_string(outstring, ' 9.6021(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931702(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.85', width=5)

width < len (16) in center_string(outstring, ' 7.7494(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4370.15', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3921.87', width=5)

width < len (16) in center_string(outstring, ' 7.6905(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939377(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM60.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '501.47', width=5)

width < len (9) in center_string(outstring, '125827.75', width=6)

width < len (12) in center_string(outstring, '592429052.32', width=8)

width < len (7) in center_string(outstring, '3096.56', width=6)

width < len (7) in center_string(outstring, '4369.00', width=5)

width < len (16) in center_string(outstring, ' 9.5441(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255518(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3938.49', width=5)

width < len (16) in center_string(outstring, ' 7.7559(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018375(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4363.99', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.34', width=5)

width < len (16) in center_string(outstring, ' 9.5063(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036750(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.93', width=5)

width < len (16) in center_string(outstring, ' 9.4871(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.79', width=5)

width < len (16) in center_string(outstring, ' 9.4647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055124(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.91', width=5)

width < len (16) in center_string(outstring, ' 9.4391(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.31', width=5)

width < len (16) in center_string(outstring, ' 9.4105(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073499(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940582(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM20.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '384.47', width=5)

width < len (8) in center_string(outstring, '73992.81', width=6)

width < len (12) in center_string(outstring, '607627303.10', width=8)

width < len (7) in center_string(outstring, '2106.82', width=6)

width < len (7) in center_string(outstring, '4370.14', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.07', width=5)

width < len (16) in center_string(outstring, ' 9.5400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.20', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.59', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.23', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.14', width=5)

width < len (16) in center_string(outstring, ' 9.4706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933426(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4346.33', width=5)

width < len (16) in center_string(outstring, ' 9.4453(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.79', width=5)

width < len (16) in center_string(outstring, ' 9.4169(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM25.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1000.72', width=5)

width < len (9) in center_string(outstring, '500824.47', width=6)

width < len (12) in center_string(outstring, '602576299.54', width=8)

width < len (7) in center_string(outstring, '3094.51', width=6)

width < len (7) in center_string(outstring, '4410.40', width=5)

width < len (16) in center_string(outstring, ' 9.7258(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.206(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256092(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.05', width=5)

width < len (16) in center_string(outstring, ' 9.7110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3968.11', width=5)

width < len (16) in center_string(outstring, ' 7.8730(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027618(25)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4398.16', width=5)

width < len (16) in center_string(outstring, ' 9.6719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.71', width=5)

width < len (16) in center_string(outstring, ' 9.6480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4386.60', width=5)

width < len (16) in center_string(outstring, ' 9.6211(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.84', width=5)

width < len (16) in center_string(outstring, ' 9.5915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.43', width=5)

width < len (16) in center_string(outstring, ' 9.5591(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^3', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM71.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '366.16', width=5)

width < len (8) in center_string(outstring, '67122.06', width=6)

width < len (12) in center_string(outstring, '607815170.86', width=8)

width < len (7) in center_string(outstring, '1985.76', width=6)

width < len (7) in center_string(outstring, '4371.17', width=5)

width < len (16) in center_string(outstring, ' 9.5536(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.073(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255284(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.98', width=5)

width < len (16) in center_string(outstring, ' 9.5440(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4366.00', width=5)

width < len (16) in center_string(outstring, ' 9.5310(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027219(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.28', width=5)

width < len (16) in center_string(outstring, ' 9.5148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036292(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929031(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.84', width=5)

width < len (16) in center_string(outstring, ' 9.4954(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045365(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931808(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.66', width=5)

width < len (16) in center_string(outstring, ' 9.4728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054438(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.77', width=5)

width < len (16) in center_string(outstring, ' 9.4472(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937378(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.18', width=5)

width < len (16) in center_string(outstring, ' 9.4186(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072584(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM31.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1041.28', width=5)

width < len (9) in center_string(outstring, '542231.19', width=6)

width < len (12) in center_string(outstring, '591441760.94', width=8)

width < len (7) in center_string(outstring, '2574.32', width=6)

width < len (7) in center_string(outstring, '3991.05', width=5)

width < len (16) in center_string(outstring, ' 7.9642(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.608(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255207(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4422.89', width=5)

width < len (16) in center_string(outstring, ' 9.7810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017216(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4418.42', width=5)

width < len (16) in center_string(outstring, ' 9.7612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '3972.90', width=5)

width < len (16) in center_string(outstring, ' 7.8920(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034432(25)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4407.40', width=5)

width < len (16) in center_string(outstring, ' 9.7126(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043040(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4400.87', width=5)

width < len (16) in center_string(outstring, ' 9.6839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4393.69', width=5)

width < len (16) in center_string(outstring, ' 9.6522(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060256(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4385.84', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068864(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM82.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '696.73', width=5)

width < len (9) in center_string(outstring, '242809.70', width=6)

width < len (12) in center_string(outstring, '611120899.58', width=8)

width < len (7) in center_string(outstring, '4299.77', width=6)

width < len (7) in center_string(outstring, '4384.05', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.54', width=5)

width < len (16) in center_string(outstring, ' 9.5990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.25', width=5)

width < len (16) in center_string(outstring, ' 9.5846(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.24', width=5)

width < len (16) in center_string(outstring, ' 9.5670(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.50', width=5)

width < len (16) in center_string(outstring, ' 9.5463(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4364.05', width=5)

width < len (16) in center_string(outstring, ' 9.5225(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4357.89', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.04', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM42.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '799.07', width=5)

width < len (9) in center_string(outstring, '319354.88', width=6)

width < len (12) in center_string(outstring, '584896088.57', width=8)

width < len (7) in center_string(outstring, '3091.52', width=6)

width < len (7) in center_string(outstring, '4399.69', width=5)

width < len (16) in center_string(outstring, ' 9.6787(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.90', width=5)

width < len (16) in center_string(outstring, ' 9.6664(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922836(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3958.14', width=5)

width < len (16) in center_string(outstring, ' 7.8334(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4389.04', width=5)

width < len (16) in center_string(outstring, ' 9.6318(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4384.04', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931030(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4378.33', width=5)

width < len (16) in center_string(outstring, ' 9.5849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4371.93', width=5)

width < len (16) in center_string(outstring, ' 9.5569(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3924.15', width=5)

width < len (16) in center_string(outstring, ' 7.6995(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939209(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM53.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '661.18', width=5)

width < len (9) in center_string(outstring, '218670.58', width=6)

width < len (12) in center_string(outstring, '590906375.67', width=8)

width < len (7) in center_string(outstring, '3236.51', width=6)

width < len (7) in center_string(outstring, '4364.42', width=5)

width < len (16) in center_string(outstring, ' 9.5241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253796(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.22', width=5)

width < len (16) in center_string(outstring, ' 9.5145(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921997(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.21', width=5)

width < len (16) in center_string(outstring, ' 9.5014(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.46', width=5)

width < len (16) in center_string(outstring, ' 9.4850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4350.95', width=5)

width < len (16) in center_string(outstring, ' 9.4654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.49', width=5)

width < len (16) in center_string(outstring, ' 7.6538(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4339.73', width=5)

width < len (16) in center_string(outstring, ' 9.4166(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936081(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.02', width=5)

width < len (16) in center_string(outstring, ' 9.3876(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM13.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.53', width=5)

width < len (9) in center_string(outstring, '175045.78', width=6)

width < len (12) in center_string(outstring, '589205555.37', width=8)

width < len (7) in center_string(outstring, '1595.80', width=6)

width < len (7) in center_string(outstring, '4356.82', width=5)

width < len (16) in center_string(outstring, ' 9.4910(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253769(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.84', width=5)

width < len (16) in center_string(outstring, ' 9.4823(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.08', width=5)

width < len (16) in center_string(outstring, ' 9.4703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924789(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.56', width=5)

width < len (16) in center_string(outstring, ' 9.4550(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.29', width=5)

width < len (16) in center_string(outstring, ' 9.4364(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3910.74', width=5)

width < len (16) in center_string(outstring, ' 7.6470(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.55', width=5)

width < len (16) in center_string(outstring, ' 9.3898(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936050(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4327.10', width=5)

width < len (16) in center_string(outstring, ' 9.3619(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938873(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.8(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM4.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.63', width=5)

width < len (9) in center_string(outstring, '434064.59', width=6)

width < len (12) in center_string(outstring, '586115325.76', width=8)

width < len (7) in center_string(outstring, '3249.34', width=6)

width < len (7) in center_string(outstring, '4406.44', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.753(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4403.21', width=5)

width < len (16) in center_string(outstring, ' 9.6941(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.21', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.52', width=5)

width < len (16) in center_string(outstring, ' 9.6559(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3948.66', width=5)

width < len (16) in center_string(outstring, ' 7.7960(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043763(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930267(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4383.04', width=5)

width < len (16) in center_string(outstring, ' 9.6055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3933.92', width=5)

width < len (16) in center_string(outstring, ' 7.7379(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935669(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4368.85', width=5)

width < len (16) in center_string(outstring, ' 9.5434(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938370(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM64.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '393.10', width=5)

width < len (8) in center_string(outstring, '77350.09', width=6)

width < len (12) in center_string(outstring, '592316323.46', width=8)

width < len (7) in center_string(outstring, '2161.37', width=6)

width < len (7) in center_string(outstring, '3942.04', width=5)

width < len (16) in center_string(outstring, ' 7.7699(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254700(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4366.23', width=5)

width < len (16) in center_string(outstring, ' 9.5320(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.31', width=5)

width < len (16) in center_string(outstring, ' 9.5192(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.64', width=5)

width < len (16) in center_string(outstring, ' 9.5033(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.24', width=5)

width < len (16) in center_string(outstring, ' 9.4841(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931290(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.10', width=5)

width < len (16) in center_string(outstring, ' 9.4617(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.24', width=5)

width < len (16) in center_string(outstring, ' 9.4362(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4337.67', width=5)

width < len (16) in center_string(outstring, ' 9.4077(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM24.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1005.93', width=5)

width < len (9) in center_string(outstring, '506044.47', width=6)

width < len (12) in center_string(outstring, '602511685.14', width=8)

width < len (7) in center_string(outstring, '3154.85', width=6)

width < len (7) in center_string(outstring, '4410.01', width=5)

width < len (16) in center_string(outstring, ' 9.7241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254466(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.71', width=5)

width < len (16) in center_string(outstring, ' 9.7095(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3967.63', width=5)

width < len (16) in center_string(outstring, ' 7.8710(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4397.92', width=5)

width < len (16) in center_string(outstring, ' 9.6709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927521(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.53', width=5)

width < len (16) in center_string(outstring, ' 9.6472(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.47', width=5)

width < len (16) in center_string(outstring, ' 9.6206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.76', width=5)

width < len (16) in center_string(outstring, ' 9.5912(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.41', width=5)

width < len (16) in center_string(outstring, ' 9.5590(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM70.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 80 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '420.53', width=5)

width < len (8) in center_string(outstring, '88509.18', width=6)

width < len (12) in center_string(outstring, '595182659.86', width=8)

width < len (7) in center_string(outstring, '2371.19', width=6)

width < len (7) in center_string(outstring, '4379.73', width=5)

width < len (16) in center_string(outstring, ' 9.5910(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.041(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3946.08', width=5)

width < len (16) in center_string(outstring, ' 7.7858(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018082(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4374.47', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4370.71', width=5)

width < len (16) in center_string(outstring, ' 9.5515(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.21', width=5)

width < len (16) in center_string(outstring, ' 9.5319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4360.99', width=5)

width < len (16) in center_string(outstring, ' 9.5091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.06', width=5)

width < len (16) in center_string(outstring, ' 9.4833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.42', width=5)

width < len (16) in center_string(outstring, ' 9.4544(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072326(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.9)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM35.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1039.79', width=5)

width < len (9) in center_string(outstring, '540685.69', width=6)

width < len (12) in center_string(outstring, '605860728.52', width=8)

width < len (7) in center_string(outstring, '2607.85', width=6)

width < len (7) in center_string(outstring, '4425.30', width=5)

width < len (16) in center_string(outstring, ' 9.7917(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253675(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3984.15', width=5)

width < len (16) in center_string(outstring, ' 7.9367(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.54', width=5)

width < len (16) in center_string(outstring, ' 9.7529(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924698(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4410.95', width=5)

width < len (16) in center_string(outstring, ' 9.7283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927505(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.60', width=5)

width < len (16) in center_string(outstring, ' 9.7003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.50', width=5)

width < len (16) in center_string(outstring, ' 9.6690(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933136(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '4389.66', width=5)

width < len (16) in center_string(outstring, ' 9.6345(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.08', width=5)

width < len (16) in center_string(outstring, ' 9.5969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM81.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '682.82', width=5)

width < len (9) in center_string(outstring, '233218.92', width=6)

width < len (12) in center_string(outstring, '566697479.18', width=8)

width < len (7) in center_string(outstring, '4309.38', width=6)

width < len (7) in center_string(outstring, '3956.08', width=5)

width < len (16) in center_string(outstring, ' 7.8253(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.984(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252888(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4381.85', width=5)

width < len (16) in center_string(outstring, ' 9.6003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.62', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3941.31', width=5)

width < len (16) in center_string(outstring, ' 7.7670(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4369.99', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.60', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053904(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '3921.78', width=5)

width < len (16) in center_string(outstring, ' 7.6902(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062888(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934860(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4351.69', width=5)

width < len (16) in center_string(outstring, ' 9.4686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071872(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM41.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '710.91', width=5)

width < len (9) in center_string(outstring, '252788.81', width=6)

width < len (12) in center_string(outstring, '597991155.78', width=8)

width < len (7) in center_string(outstring, '3456.85', width=6)

width < len (7) in center_string(outstring, '4391.55', width=5)

width < len (16) in center_string(outstring, ' 9.6429(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.919(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4388.98', width=5)

width < len (16) in center_string(outstring, ' 9.6316(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017838(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921738(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4385.63', width=5)

width < len (16) in center_string(outstring, ' 9.6169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026757(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.56', width=5)

width < len (16) in center_string(outstring, ' 7.7837(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035676(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4376.76', width=5)

width < len (16) in center_string(outstring, ' 9.5780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044595(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.26', width=5)

width < len (16) in center_string(outstring, ' 9.5540(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053514(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.06', width=5)

width < len (16) in center_string(outstring, ' 9.5269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062433(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.17', width=5)

width < len (16) in center_string(outstring, ' 9.4968(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071352(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM46.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '784.16', width=5)

width < len (9) in center_string(outstring, '307549.16', width=6)

width < len (12) in center_string(outstring, '599235412.04', width=8)

width < len (7) in center_string(outstring, '3111.72', width=6)

width < len (7) in center_string(outstring, '4395.83', width=5)

width < len (16) in center_string(outstring, ' 9.6617(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253250(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4393.13', width=5)

width < len (16) in center_string(outstring, ' 9.6498(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3956.27', width=5)

width < len (16) in center_string(outstring, ' 7.8261(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4385.60', width=5)

width < len (16) in center_string(outstring, ' 9.6168(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.83', width=5)

width < len (16) in center_string(outstring, ' 9.5958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928894(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.39', width=5)

width < len (16) in center_string(outstring, ' 9.5720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.30', width=5)

width < len (16) in center_string(outstring, ' 9.5454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.57', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM52.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '616.15', width=5)

width < len (9) in center_string(outstring, '189915.83', width=6)

width < len (12) in center_string(outstring, '576741228.83', width=8)

width < len (7) in center_string(outstring, '3629.90', width=6)

width < len (7) in center_string(outstring, '4366.18', width=5)

width < len (16) in center_string(outstring, ' 9.5318(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254185(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.03', width=5)

width < len (16) in center_string(outstring, ' 9.5224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.09', width=5)

width < len (16) in center_string(outstring, ' 9.5095(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.32', width=5)

width < len (16) in center_string(outstring, ' 7.7080(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(18)', width=10)

width < len (7) in center_string(outstring, '3920.64', width=5)

width < len (16) in center_string(outstring, ' 7.6857(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4347.73', width=5)

width < len (16) in center_string(outstring, ' 9.4514(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.80', width=5)

width < len (16) in center_string(outstring, ' 9.4256(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.14', width=5)

width < len (16) in center_string(outstring, ' 9.3967(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(3.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM17.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.40', width=5)

width < len (9) in center_string(outstring, '171437.03', width=6)

width < len (12) in center_string(outstring, '589735291.88', width=8)

width < len (7) in center_string(outstring, '1532.25', width=6)

width < len (7) in center_string(outstring, '4358.76', width=5)

width < len (16) in center_string(outstring, ' 9.4994(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254645(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.81', width=5)

width < len (16) in center_string(outstring, ' 9.4909(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.07', width=5)

width < len (16) in center_string(outstring, ' 9.4790(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.57', width=5)

width < len (16) in center_string(outstring, ' 9.4638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.33', width=5)

width < len (16) in center_string(outstring, ' 9.4453(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.35', width=5)

width < len (16) in center_string(outstring, ' 9.4237(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.32', width=5)

width < len (16) in center_string(outstring, ' 7.6297(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.20', width=5)

width < len (16) in center_string(outstring, ' 9.3710(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939758(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(9.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM3.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '914.73', width=5)

width < len (9) in center_string(outstring, '418463.81', width=6)

width < len (12) in center_string(outstring, '601422343.46', width=8)

width < len (7) in center_string(outstring, '3192.15', width=6)

width < len (7) in center_string(outstring, '3971.39', width=5)

width < len (16) in center_string(outstring, ' 7.8860(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.761(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253877(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4402.59', width=5)

width < len (16) in center_string(outstring, ' 9.6914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017523(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922028(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.63', width=5)

width < len (16) in center_string(outstring, ' 9.6740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026284(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4393.97', width=5)

width < len (16) in center_string(outstring, ' 9.6535(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035045(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927444(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4388.61', width=5)

width < len (16) in center_string(outstring, ' 9.6300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043807(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.57', width=5)

width < len (16) in center_string(outstring, ' 9.6034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.84', width=5)

width < len (16) in center_string(outstring, ' 9.5740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061330(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.44', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070091(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938248(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM63.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.86', width=5)

width < len (9) in center_string(outstring, '184229.06', width=6)

width < len (12) in center_string(outstring, '574625164.27', width=8)

width < len (7) in center_string(outstring, '1944.15', width=6)

width < len (7) in center_string(outstring, '4357.60', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.49', width=5)

width < len (16) in center_string(outstring, ' 9.4852(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.60', width=5)

width < len (16) in center_string(outstring, ' 9.4726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.95', width=5)

width < len (16) in center_string(outstring, ' 9.4567(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3915.74', width=5)

width < len (16) in center_string(outstring, ' 7.6665(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932220(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3909.65', width=5)

width < len (16) in center_string(outstring, ' 7.6427(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.57', width=5)

width < len (16) in center_string(outstring, ' 9.3899(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.99', width=5)

width < len (16) in center_string(outstring, ' 9.3614(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940659(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM8.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '404.51', width=5)

width < len (8) in center_string(outstring, '81901.90', width=6)

width < len (12) in center_string(outstring, '607174143.83', width=8)

width < len (7) in center_string(outstring, '2261.87', width=6)

width < len (7) in center_string(outstring, '4368.63', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.52', width=5)

width < len (16) in center_string(outstring, ' 9.5333(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.62', width=5)

width < len (16) in center_string(outstring, ' 9.5206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.98', width=5)

width < len (16) in center_string(outstring, ' 9.5047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.59', width=5)

width < len (16) in center_string(outstring, ' 9.4856(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932739(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.47', width=5)

width < len (16) in center_string(outstring, ' 9.4633(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.62', width=5)

width < len (16) in center_string(outstring, ' 9.4379(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.06', width=5)

width < len (16) in center_string(outstring, ' 9.4094(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941132(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM23.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '350.69', width=5)

width < len (8) in center_string(outstring, '61574.50', width=6)

width < len (12) in center_string(outstring, '592622354.98', width=8)

width < len (7) in center_string(outstring, '1851.23', width=6)

width < len (7) in center_string(outstring, '4370.36', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.116(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4368.19', width=5)

width < len (16) in center_string(outstring, ' 9.5405(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018232(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.22', width=5)

width < len (16) in center_string(outstring, ' 9.5276(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027348(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923798(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.51', width=5)

width < len (16) in center_string(outstring, ' 9.5114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036465(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.07', width=5)

width < len (16) in center_string(outstring, ' 9.4920(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929382(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3919.64', width=5)

width < len (16) in center_string(outstring, ' 7.6818(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054697(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4345.99', width=5)

width < len (16) in center_string(outstring, ' 9.4438(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063813(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.38', width=5)

width < len (16) in center_string(outstring, ' 9.4151(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072929(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(8.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM28.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1007.87', width=5)

width < len (9) in center_string(outstring, '508002.28', width=6)

width < len (12) in center_string(outstring, '573438711.40', width=8)

width < len (7) in center_string(outstring, '2904.96', width=6)

width < len (7) in center_string(outstring, '3981.34', width=5)

width < len (16) in center_string(outstring, ' 7.9255(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254753(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4410.38', width=5)

width < len (16) in center_string(outstring, ' 9.7257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.22', width=5)

width < len (16) in center_string(outstring, ' 9.7074(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '3964.12', width=5)

width < len (16) in center_string(outstring, ' 7.8571(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4395.88', width=5)

width < len (16) in center_string(outstring, ' 9.6619(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.71', width=5)

width < len (16) in center_string(outstring, ' 9.6348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932938(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.51', width=5)

width < len (16) in center_string(outstring, ' 7.7717(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064499(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.42', width=5)

width < len (16) in center_string(outstring, ' 9.5722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073713(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.130 sec (User: 0.130 sec, System: 0.000 sec)
  Total time: 0.140 sec

Final candidates in binary format are in 'Sband_DM74.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 92 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '406.42', width=5)

width < len (8) in center_string(outstring, '82676.89', width=6)

width < len (12) in center_string(outstring, '578983807.37', width=8)

width < len (7) in center_string(outstring, '2280.12', width=6)

width < len (7) in center_string(outstring, '4374.15', width=5)

width < len (16) in center_string(outstring, ' 9.5666(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256217(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4372.08', width=5)

width < len (16) in center_string(outstring, ' 9.5576(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924164(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4369.30', width=5)

width < len (16) in center_string(outstring, ' 9.5454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4365.85', width=5)

width < len (16) in center_string(outstring, ' 9.5303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4361.73', width=5)

width < len (16) in center_string(outstring, ' 9.5124(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931854(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4356.96', width=5)

width < len (16) in center_string(outstring, ' 9.4916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3917.84', width=5)

width < len (16) in center_string(outstring, ' 7.6748(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(18)', width=10)

width < len (7) in center_string(outstring, '3911.01', width=5)

width < len (16) in center_string(outstring, ' 7.6480(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM34.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1031.07', width=5)

width < len (9) in center_string(outstring, '531650.94', width=6)

width < len (12) in center_string(outstring, '605995006.31', width=8)

width < len (7) in center_string(outstring, '2590.99', width=6)

width < len (7) in center_string(outstring, '4425.67', width=5)

width < len (16) in center_string(outstring, ' 9.7933(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253881(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3984.77', width=5)

width < len (16) in center_string(outstring, ' 7.9392(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.95', width=5)

width < len (16) in center_string(outstring, ' 9.7547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4411.39', width=5)

width < len (16) in center_string(outstring, ' 9.7302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4405.07', width=5)

width < len (16) in center_string(outstring, ' 9.7023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930527(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.99', width=5)

width < len (16) in center_string(outstring, ' 9.6712(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4390.17', width=5)

width < len (16) in center_string(outstring, ' 9.6368(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.62', width=5)

width < len (16) in center_string(outstring, ' 9.5993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938980(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM80.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.88', width=5)

width < len (9) in center_string(outstring, '247111.78', width=6)

width < len (12) in center_string(outstring, '612794508.84', width=8)

width < len (7) in center_string(outstring, '3521.11', width=6)

width < len (7) in center_string(outstring, '4390.08', width=5)

width < len (16) in center_string(outstring, ' 9.6364(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.931(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.56', width=5)

width < len (16) in center_string(outstring, ' 9.6253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.25', width=5)

width < len (16) in center_string(outstring, ' 9.6108(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026793(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926865(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.22', width=5)

width < len (16) in center_string(outstring, ' 9.5932(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.47', width=5)

width < len (16) in center_string(outstring, ' 9.5724(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044654(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.01', width=5)

width < len (16) in center_string(outstring, ' 9.5485(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053585(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.84', width=5)

width < len (16) in center_string(outstring, ' 9.5216(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4356.98', width=5)

width < len (16) in center_string(outstring, ' 9.4917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071447(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM45.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '822.27', width=5)

width < len (9) in center_string(outstring, '338163.19', width=6)

width < len (12) in center_string(outstring, '616159638.85', width=8)

width < len (7) in center_string(outstring, '3041.35', width=6)

width < len (7) in center_string(outstring, '4403.34', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.44', width=5)

width < len (16) in center_string(outstring, ' 9.6819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4396.76', width=5)

width < len (16) in center_string(outstring, ' 9.6657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925644(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4392.36', width=5)

width < len (16) in center_string(outstring, ' 9.6464(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.26', width=5)

width < len (16) in center_string(outstring, ' 9.6240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931076(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.46', width=5)

width < len (16) in center_string(outstring, ' 9.5986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.97', width=5)

width < len (16) in center_string(outstring, ' 9.5702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936508(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.80', width=5)

width < len (16) in center_string(outstring, ' 9.5388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070577(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939240(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM56.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.18', width=5)

width < len (9) in center_string(outstring, '194271.88', width=6)

width < len (12) in center_string(outstring, '591608563.92', width=8)

width < len (7) in center_string(outstring, '3549.62', width=6)

width < len (7) in center_string(outstring, '4366.70', width=5)

width < len (16) in center_string(outstring, ' 9.5340(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.61', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.71', width=5)

width < len (16) in center_string(outstring, ' 9.5123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.07', width=5)

width < len (16) in center_string(outstring, ' 9.4964(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.67', width=5)

width < len (16) in center_string(outstring, ' 9.4772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.53', width=5)

width < len (16) in center_string(outstring, ' 9.4549(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.58', width=5)

width < len (16) in center_string(outstring, ' 7.6385(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4336.05', width=5)

width < len (16) in center_string(outstring, ' 9.4007(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM16.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.36', width=5)

width < len (9) in center_string(outstring, '183927.16', width=6)

width < len (12) in center_string(outstring, '589047687.64', width=8)

width < len (7) in center_string(outstring, '1886.92', width=6)

width < len (7) in center_string(outstring, '4357.02', width=5)

width < len (16) in center_string(outstring, ' 9.4918(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.89', width=5)

width < len (16) in center_string(outstring, ' 9.4825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.96', width=5)

width < len (16) in center_string(outstring, ' 9.4698(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.28', width=5)

width < len (16) in center_string(outstring, ' 9.4538(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.85', width=5)

width < len (16) in center_string(outstring, ' 9.4345(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.69', width=5)

width < len (16) in center_string(outstring, ' 9.4121(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.51', width=5)

width < len (16) in center_string(outstring, ' 7.6148(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.19', width=5)

width < len (16) in center_string(outstring, ' 9.3579(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM7.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '908.71', width=5)

width < len (9) in center_string(outstring, '412979.56', width=6)

width < len (12) in center_string(outstring, '601091985.84', width=8)

width < len (7) in center_string(outstring, '3252.81', width=6)

width < len (7) in center_string(outstring, '4405.51', width=5)

width < len (16) in center_string(outstring, ' 9.7043(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.756(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.37', width=5)

width < len (16) in center_string(outstring, ' 9.6904(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.47', width=5)

width < len (16) in center_string(outstring, ' 9.6733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4393.86', width=5)

width < len (16) in center_string(outstring, ' 9.6530(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927795(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4388.55', width=5)

width < len (16) in center_string(outstring, ' 9.6297(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.56', width=5)

width < len (16) in center_string(outstring, ' 9.6034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933197(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.88', width=5)

width < len (16) in center_string(outstring, ' 9.5742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3925.32', width=5)

width < len (16) in center_string(outstring, ' 7.7041(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070045(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938614(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.150 sec (User: 0.150 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM62.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '983.48', width=5)

width < len (9) in center_string(outstring, '483719.75', width=6)

width < len (12) in center_string(outstring, '617030601.76', width=8)

width < len (7) in center_string(outstring, '3329.15', width=6)

width < len (7) in center_string(outstring, '4408.10', width=5)

width < len (16) in center_string(outstring, ' 9.7157(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253776(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4404.69', width=5)

width < len (16) in center_string(outstring, ' 9.7007(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4400.52', width=5)

width < len (16) in center_string(outstring, ' 9.6823(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4395.65', width=5)

width < len (16) in center_string(outstring, ' 9.6609(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.09', width=5)

width < len (16) in center_string(outstring, ' 9.6365(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4383.85', width=5)

width < len (16) in center_string(outstring, ' 9.6091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4376.93', width=5)

width < len (16) in center_string(outstring, ' 9.5788(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.36', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM67.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.77', width=5)

width < len (8) in center_string(outstring, '63015.86', width=6)

width < len (12) in center_string(outstring, '592476303.81', width=8)

width < len (7) in center_string(outstring, '1868.63', width=6)

width < len (7) in center_string(outstring, '4369.82', width=5)

width < len (16) in center_string(outstring, ' 9.5477(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.117(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.69', width=5)

width < len (16) in center_string(outstring, ' 9.5384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018233(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.78', width=5)

width < len (16) in center_string(outstring, ' 9.5256(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.12', width=5)

width < len (16) in center_string(outstring, ' 9.5097(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927063(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.72', width=5)

width < len (16) in center_string(outstring, ' 9.4905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929855(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.59', width=5)

width < len (16) in center_string(outstring, ' 9.4682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054699(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.25', width=5)

width < len (16) in center_string(outstring, ' 7.6529(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063816(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.17', width=5)

width < len (16) in center_string(outstring, ' 9.4142(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM27.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1002.32', width=5)

width < len (9) in center_string(outstring, '502421.47', width=6)

width < len (12) in center_string(outstring, '603309856.49', width=8)

width < len (7) in center_string(outstring, '2940.83', width=6)

width < len (7) in center_string(outstring, '4413.26', width=5)

width < len (16) in center_string(outstring, ' 9.7384(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252853(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.90', width=5)

width < len (16) in center_string(outstring, ' 9.7236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920807(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4405.80', width=5)

width < len (16) in center_string(outstring, ' 9.7055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3964.55', width=5)

width < len (16) in center_string(outstring, ' 7.8588(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4395.56', width=5)

width < len (16) in center_string(outstring, ' 9.6605(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.44', width=5)

width < len (16) in center_string(outstring, ' 9.6336(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931046(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.66', width=5)

width < len (16) in center_string(outstring, ' 9.6039(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4375.25', width=5)

width < len (16) in center_string(outstring, ' 9.5714(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936172(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM73.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '528.57', width=5)

width < len (9) in center_string(outstring, '139784.33', width=6)

width < len (12) in center_string(outstring, '610545601.93', width=8)

width < len (7) in center_string(outstring, '3310.76', width=6)

width < len (7) in center_string(outstring, '4381.52', width=5)

width < len (16) in center_string(outstring, ' 9.5989(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252401(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.16', width=5)

width < len (16) in center_string(outstring, ' 9.5885(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.01', width=5)

width < len (16) in center_string(outstring, ' 9.5748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.13', width=5)

width < len (16) in center_string(outstring, ' 9.5578(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926117(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.52', width=5)

width < len (16) in center_string(outstring, ' 9.5376(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928894(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4362.19', width=5)

width < len (16) in center_string(outstring, ' 9.5144(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054117(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.15', width=5)

width < len (16) in center_string(outstring, ' 9.4880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063136(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934418(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.40', width=5)

width < len (16) in center_string(outstring, ' 9.4587(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM38.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '706.99', width=5)

width < len (9) in center_string(outstring, '250014.20', width=6)

width < len (12) in center_string(outstring, '597566216.99', width=8)

width < len (7) in center_string(outstring, '3708.07', width=6)

width < len (7) in center_string(outstring, '4389.56', width=5)

width < len (16) in center_string(outstring, ' 9.6341(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.07', width=5)

width < len (16) in center_string(outstring, ' 9.6232(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923309(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3949.39', width=5)

width < len (16) in center_string(outstring, ' 7.7989(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926056(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4379.79', width=5)

width < len (16) in center_string(outstring, ' 9.5913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4375.07', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4369.64', width=5)

width < len (16) in center_string(outstring, ' 9.5469(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934296(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.50', width=5)

width < len (16) in center_string(outstring, ' 9.5201(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4356.67', width=5)

width < len (16) in center_string(outstring, ' 9.4903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM44.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '729.46', width=5)

width < len (9) in center_string(outstring, '266150.19', width=6)

width < len (12) in center_string(outstring, '598729659.40', width=8)

width < len (7) in center_string(outstring, '3116.85', width=6)

width < len (7) in center_string(outstring, '4393.38', width=5)

width < len (16) in center_string(outstring, ' 9.6509(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3957.59', width=5)

width < len (16) in center_string(outstring, ' 7.8313(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4387.60', width=5)

width < len (16) in center_string(outstring, ' 9.6255(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4383.67', width=5)

width < len (16) in center_string(outstring, ' 9.6083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.07', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4373.80', width=5)

width < len (16) in center_string(outstring, ' 9.5651(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930237(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.89', width=5)

width < len (16) in center_string(outstring, ' 9.5392(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4361.32', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM49.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '817.23', width=5)

width < len (9) in center_string(outstring, '334028.62', width=6)

width < len (12) in center_string(outstring, '600945116.12', width=8)

width < len (7) in center_string(outstring, '3066.45', width=6)

width < len (7) in center_string(outstring, '4403.18', width=5)

width < len (16) in center_string(outstring, ' 9.6940(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.837(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.32', width=5)

width < len (16) in center_string(outstring, ' 9.6814(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017673(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3960.80', width=5)

width < len (16) in center_string(outstring, ' 7.8440(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026510(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4392.32', width=5)

width < len (16) in center_string(outstring, ' 9.6463(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035347(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.26', width=5)

width < len (16) in center_string(outstring, ' 9.6240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932007(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.49', width=5)

width < len (16) in center_string(outstring, ' 9.5987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934738(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.03', width=5)

width < len (16) in center_string(outstring, ' 9.5704(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4367.88', width=5)

width < len (16) in center_string(outstring, ' 9.5392(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940186(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM55.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '601.06', width=5)

width < len (9) in center_string(outstring, '180731.33', width=6)

width < len (12) in center_string(outstring, '589323813.82', width=8)

width < len (7) in center_string(outstring, '1803.84', width=6)

width < len (7) in center_string(outstring, '4358.06', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.91', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.98', width=5)

width < len (16) in center_string(outstring, ' 9.4742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.29', width=5)

width < len (16) in center_string(outstring, ' 9.4582(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.86', width=5)

width < len (16) in center_string(outstring, ' 9.4389(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.69', width=5)

width < len (16) in center_string(outstring, ' 9.4165(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.47', width=5)

width < len (16) in center_string(outstring, ' 7.6185(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936508(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.16', width=5)

width < len (16) in center_string(outstring, ' 9.3622(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939316(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM6.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '976.97', width=5)

width < len (9) in center_string(outstring, '477336.81', width=6)

width < len (12) in center_string(outstring, '616725601.45', width=8)

width < len (7) in center_string(outstring, '3340.96', width=6)

width < len (7) in center_string(outstring, '4406.85', width=5)

width < len (16) in center_string(outstring, ' 9.7102(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.732(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253722(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.49', width=5)

width < len (16) in center_string(outstring, ' 9.6954(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.37', width=5)

width < len (16) in center_string(outstring, ' 9.6772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026195(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.55', width=5)

width < len (16) in center_string(outstring, ' 9.6560(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4389.03', width=5)

width < len (16) in center_string(outstring, ' 9.6318(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.84', width=5)

width < len (16) in center_string(outstring, ' 9.6046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932663(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.96', width=5)

width < len (16) in center_string(outstring, ' 9.5745(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.43', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938049(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM66.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '360.99', width=5)

width < len (8) in center_string(outstring, '65240.87', width=6)

width < len (12) in center_string(outstring, '592511339.83', width=8)

width < len (7) in center_string(outstring, '1922.47', width=6)

width < len (7) in center_string(outstring, '4369.27', width=5)

width < len (16) in center_string(outstring, ' 9.5453(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.15', width=5)

width < len (16) in center_string(outstring, ' 9.5360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3936.06', width=5)

width < len (16) in center_string(outstring, ' 7.7463(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027378(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925186(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4360.58', width=5)

width < len (16) in center_string(outstring, ' 9.5073(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.19', width=5)

width < len (16) in center_string(outstring, ' 9.4882(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930771(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.06', width=5)

width < len (16) in center_string(outstring, ' 9.4659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.20', width=5)

width < len (16) in center_string(outstring, ' 9.4404(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.64', width=5)

width < len (16) in center_string(outstring, ' 9.4119(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939163(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM26.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.45', width=5)

width < len (9) in center_string(outstring, '535138.50', width=6)

width < len (12) in center_string(outstring, '604953104.99', width=8)

width < len (7) in center_string(outstring, '2827.34', width=6)

width < len (7) in center_string(outstring, '4421.42', width=5)

width < len (16) in center_string(outstring, ' 9.7745(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254157(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3981.15', width=5)

width < len (16) in center_string(outstring, ' 7.9248(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4412.95', width=5)

width < len (16) in center_string(outstring, ' 9.7371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.52', width=5)

width < len (16) in center_string(outstring, ' 9.7131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927994(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4401.33', width=5)

width < len (16) in center_string(outstring, ' 9.6858(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4394.38', width=5)

width < len (16) in center_string(outstring, ' 9.6553(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933624(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4386.69', width=5)

width < len (16) in center_string(outstring, ' 9.6215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4378.27', width=5)

width < len (16) in center_string(outstring, ' 9.5846(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM77.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '504.73', width=5)

width < len (9) in center_string(outstring, '127465.41', width=6)

width < len (12) in center_string(outstring, '595331524.69', width=8)

width < len (7) in center_string(outstring, '3107.59', width=6)

width < len (7) in center_string(outstring, '4380.53', width=5)

width < len (16) in center_string(outstring, ' 9.5945(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.016(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.28', width=5)

width < len (16) in center_string(outstring, ' 7.7905(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018033(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922134(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4375.07', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.22', width=5)

width < len (16) in center_string(outstring, ' 9.5538(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036066(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.63', width=5)

width < len (16) in center_string(outstring, ' 9.5338(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045082(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4361.33', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054099(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.31', width=5)

width < len (16) in center_string(outstring, ' 9.4844(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.59', width=5)

width < len (16) in center_string(outstring, ' 9.4551(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072132(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.6)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM37.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '723.51', width=5)

width < len (9) in center_string(outstring, '261828.59', width=6)

width < len (12) in center_string(outstring, '597983050.71', width=8)

width < len (7) in center_string(outstring, '3097.15', width=6)

width < len (7) in center_string(outstring, '4392.28', width=5)

width < len (16) in center_string(outstring, ' 9.6461(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.902(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255017(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.63', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017803(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.20', width=5)

width < len (16) in center_string(outstring, ' 9.6194(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026705(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.05', width=5)

width < len (16) in center_string(outstring, ' 9.6012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.18', width=5)

width < len (16) in center_string(outstring, ' 9.5799(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931396(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.61', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3925.43', width=5)

width < len (16) in center_string(outstring, ' 7.7045(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062312(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4358.37', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.5)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM48.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '878.57', width=5)

width < len (9) in center_string(outstring, '386044.81', width=6)

width < len (12) in center_string(outstring, '569085316.59', width=8)

width < len (7) in center_string(outstring, '3247.67', width=6)

width < len (7) in center_string(outstring, '4396.78', width=5)

width < len (16) in center_string(outstring, ' 9.6658(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254149(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3960.08', width=5)

width < len (16) in center_string(outstring, ' 7.8411(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922302(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4389.97', width=5)

width < len (16) in center_string(outstring, ' 9.6359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4385.47', width=5)

width < len (16) in center_string(outstring, ' 9.6162(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3942.27', width=5)

width < len (16) in center_string(outstring, ' 7.7708(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930435(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4374.40', width=5)

width < len (16) in center_string(outstring, ' 9.5677(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052719(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4367.84', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3919.96', width=5)

width < len (16) in center_string(outstring, ' 7.6830(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.8)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(4.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM59.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '539.44', width=5)

width < len (9) in center_string(outstring, '145590.14', width=6)

width < len (12) in center_string(outstring, '607073404.70', width=8)

width < len (7) in center_string(outstring, '3372.41', width=6)

width < len (7) in center_string(outstring, '4368.23', width=5)

width < len (16) in center_string(outstring, ' 9.5407(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253978(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.15', width=5)

width < len (16) in center_string(outstring, ' 9.5316(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.27', width=5)

width < len (16) in center_string(outstring, ' 9.5191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.64', width=5)

width < len (16) in center_string(outstring, ' 9.5032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.25', width=5)

width < len (16) in center_string(outstring, ' 9.4841(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.13', width=5)

width < len (16) in center_string(outstring, ' 9.4618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.26', width=5)

width < len (16) in center_string(outstring, ' 9.4363(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.68', width=5)

width < len (16) in center_string(outstring, ' 9.4077(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM19.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '958.84', width=5)

width < len (9) in center_string(outstring, '459781.53', width=6)

width < len (12) in center_string(outstring, '586216251.77', width=8)

width < len (7) in center_string(outstring, '3278.73', width=6)

width < len (7) in center_string(outstring, '4407.08', width=5)

width < len (16) in center_string(outstring, ' 9.7112(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.737(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.83', width=5)

width < len (16) in center_string(outstring, ' 9.6969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.82', width=5)

width < len (16) in center_string(outstring, ' 9.6792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4395.10', width=5)

width < len (16) in center_string(outstring, ' 9.6584(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.69', width=5)

width < len (16) in center_string(outstring, ' 9.6347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.59', width=5)

width < len (16) in center_string(outstring, ' 9.6079(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3934.90', width=5)

width < len (16) in center_string(outstring, ' 7.7417(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061159(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '3926.79', width=5)

width < len (16) in center_string(outstring, ' 7.7098(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069896(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM65.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1022.21', width=5)

width < len (9) in center_string(outstring, '522557.03', width=6)

width < len (12) in center_string(outstring, '604532491.42', width=8)

width < len (7) in center_string(outstring, '2815.66', width=6)

width < len (7) in center_string(outstring, '4420.60', width=5)

width < len (16) in center_string(outstring, ' 9.7708(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254538(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.79', width=5)

width < len (16) in center_string(outstring, ' 9.7540(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.13', width=5)

width < len (16) in center_string(outstring, ' 9.7334(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.69', width=5)

width < len (16) in center_string(outstring, ' 9.7095(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.49', width=5)

width < len (16) in center_string(outstring, ' 9.6822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.65', width=5)

width < len (16) in center_string(outstring, ' 7.8078(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.85', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.42', width=5)

width < len (16) in center_string(outstring, ' 9.5809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM76.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '715.38', width=5)

width < len (9) in center_string(outstring, '255976.45', width=6)

width < len (12) in center_string(outstring, '598097293.51', width=8)

width < len (7) in center_string(outstring, '3186.10', width=6)

width < len (7) in center_string(outstring, '4392.18', width=5)

width < len (16) in center_string(outstring, ' 9.6456(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.895(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254483(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.55', width=5)

width < len (16) in center_string(outstring, ' 9.6341(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017790(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922653(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.14', width=5)

width < len (16) in center_string(outstring, ' 9.6191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.56', width=5)

width < len (16) in center_string(outstring, ' 7.7837(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035580(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.17', width=5)

width < len (16) in center_string(outstring, ' 9.5798(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.62', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933594(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.38', width=5)

width < len (16) in center_string(outstring, ' 9.5283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.44', width=5)

width < len (16) in center_string(outstring, ' 9.4980(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM47.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '864.25', width=5)

width < len (9) in center_string(outstring, '373562.28', width=6)

width < len (12) in center_string(outstring, '603769435.88', width=8)

width < len (7) in center_string(outstring, '3211.69', width=6)

width < len (7) in center_string(outstring, '4398.23', width=5)

width < len (16) in center_string(outstring, ' 9.6722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016590(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916168(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4398.09', width=5)

width < len (16) in center_string(outstring, ' 9.6716(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4397.93', width=5)

width < len (16) in center_string(outstring, ' 9.6709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912445(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4397.75', width=5)

width < len (16) in center_string(outstring, ' 9.6701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.910583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4397.56', width=5)

width < len (16) in center_string(outstring, ' 9.6693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00082948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3966.02', width=5)

width < len (16) in center_string(outstring, ' 7.8647(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00099538(26)', width=12)

width < len (15) in center_string(outstring, ' 166.906876(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4397.14', width=5)

width < len (16) in center_string(outstring, ' 9.6674(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116128(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905014(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4396.91', width=5)

width < len (16) in center_string(outstring, ' 9.6664(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00132717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.903152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM58.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '628.59', width=5)

width < len (9) in center_string(outstring, '197657.38', width=6)

width < len (12) in center_string(outstring, '590027780.97', width=8)

width < len (7) in center_string(outstring, '2289.19', width=6)

width < len (7) in center_string(outstring, '4360.44', width=5)

width < len (16) in center_string(outstring, ' 9.5067(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.32', width=5)

width < len (16) in center_string(outstring, ' 9.4975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.42', width=5)

width < len (16) in center_string(outstring, ' 9.4848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.76', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927017(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.36', width=5)

width < len (16) in center_string(outstring, ' 9.4498(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929825(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.54', width=5)

width < len (16) in center_string(outstring, ' 7.6540(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.34', width=5)

width < len (16) in center_string(outstring, ' 9.4019(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.74', width=5)

width < len (16) in center_string(outstring, ' 9.3733(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938278(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM9.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '991.83', width=5)

width < len (9) in center_string(outstring, '491964.09', width=6)

width < len (12) in center_string(outstring, '602901191.86', width=8)

width < len (7) in center_string(outstring, '3180.21', width=6)

width < len (7) in center_string(outstring, '4410.31', width=5)

width < len (16) in center_string(outstring, ' 9.7254(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252914(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3972.89', width=5)

width < len (16) in center_string(outstring, ' 7.8919(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.920807(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4403.37', width=5)

width < len (16) in center_string(outstring, ' 9.6948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4398.93', width=5)

width < len (16) in center_string(outstring, ' 9.6753(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4393.88', width=5)

width < len (16) in center_string(outstring, ' 9.6531(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928162(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4388.22', width=5)

width < len (16) in center_string(outstring, ' 9.6282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4381.96', width=5)

width < len (16) in center_string(outstring, ' 9.6008(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4375.10', width=5)

width < len (16) in center_string(outstring, ' 9.5708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM69.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.85', width=5)

width < len (8) in center_string(outstring, '63044.06', width=6)

width < len (12) in center_string(outstring, '608105029.47', width=8)

width < len (7) in center_string(outstring, '1884.71', width=6)

width < len (7) in center_string(outstring, '4372.18', width=5)

width < len (16) in center_string(outstring, ' 9.5580(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.102(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4370.01', width=5)

width < len (16) in center_string(outstring, ' 9.5485(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.04', width=5)

width < len (16) in center_string(outstring, ' 9.5355(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.33', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036409(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.89', width=5)

width < len (16) in center_string(outstring, ' 9.5000(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.71', width=5)

width < len (16) in center_string(outstring, ' 9.4774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.82', width=5)

width < len (16) in center_string(outstring, ' 9.4518(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.21', width=5)

width < len (16) in center_string(outstring, ' 9.4231(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(1.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(9.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM29.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '985.87', width=5)

width < len (9) in center_string(outstring, '486065.44', width=6)

width < len (12) in center_string(outstring, '587311427.52', width=8)

width < len (7) in center_string(outstring, '3187.25', width=6)

width < len (7) in center_string(outstring, '3977.49', width=5)

width < len (16) in center_string(outstring, ' 7.9102(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.708(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253533(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4406.43', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.28', width=5)

width < len (16) in center_string(outstring, ' 9.6901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026125(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.43', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927078(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3953.49', width=5)

width < len (16) in center_string(outstring, ' 7.8150(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043541(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4385.67', width=5)

width < len (16) in center_string(outstring, ' 9.6170(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052249(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4378.77', width=5)

width < len (16) in center_string(outstring, ' 9.5868(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060957(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.20', width=5)

width < len (16) in center_string(outstring, ' 9.5537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069666(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM68.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1029.53', width=5)

width < len (9) in center_string(outstring, '530070.38', width=6)

width < len (12) in center_string(outstring, '605329066.11', width=8)

width < len (7) in center_string(outstring, '2675.83', width=6)

width < len (7) in center_string(outstring, '4423.14', width=5)

width < len (16) in center_string(outstring, ' 9.7821(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253798(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3982.36', width=5)

width < len (16) in center_string(outstring, ' 7.9296(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.921997(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.50', width=5)

width < len (16) in center_string(outstring, ' 9.7439(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4408.97', width=5)

width < len (16) in center_string(outstring, ' 9.7195(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.68', width=5)

width < len (16) in center_string(outstring, ' 9.6918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4395.64', width=5)

width < len (16) in center_string(outstring, ' 9.6608(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4387.86', width=5)

width < len (16) in center_string(outstring, ' 9.6267(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936081(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.34', width=5)

width < len (16) in center_string(outstring, ' 9.5893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.140 sec (User: 0.140 sec, System: 0.000 sec)
  Total time: 0.150 sec

Final candidates in binary format are in 'Sband_DM79.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   3%Amount of optimization complete =   7%Amount of optimization complete =  11%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  51%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  92%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.31', width=5)

width < len (8) in center_string(outstring, '62851.29', width=6)

width < len (12) in center_string(outstring, '578634639.52', width=8)

width < len (7) in center_string(outstring, '1882.68', width=6)

width < len (7) in center_string(outstring, '3946.29', width=5)

width < len (16) in center_string(outstring, ' 7.7866(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.094(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254677(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4370.25', width=5)

width < len (16) in center_string(outstring, ' 9.5495(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018188(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.28', width=5)

width < len (16) in center_string(outstring, ' 9.5366(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3932.31', width=5)

width < len (16) in center_string(outstring, ' 7.7315(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036376(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4359.12', width=5)

width < len (16) in center_string(outstring, ' 9.5010(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045470(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.94', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054564(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.04', width=5)

width < len (16) in center_string(outstring, ' 9.4527(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936798(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.43', width=5)

width < len (16) in center_string(outstring, ' 9.4240(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072752(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.360 sec, System: 0.000 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM30.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '647.71', width=5)

width < len (9) in center_string(outstring, '209860.55', width=6)

width < len (12) in center_string(outstring, '590762295.67', width=8)

width < len (7) in center_string(outstring, '2773.52', width=6)

width < len (7) in center_string(outstring, '4363.56', width=5)

width < len (16) in center_string(outstring, ' 9.5203(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254189(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.35', width=5)

width < len (16) in center_string(outstring, ' 9.5107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.35', width=5)

width < len (16) in center_string(outstring, ' 9.4976(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.08', width=5)

width < len (16) in center_string(outstring, ' 7.6992(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(18)', width=10)

width < len (7) in center_string(outstring, '4350.09', width=5)

width < len (16) in center_string(outstring, ' 9.4616(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.84', width=5)

width < len (16) in center_string(outstring, ' 9.4388(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.87', width=5)

width < len (16) in center_string(outstring, ' 9.4129(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936462(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4332.17', width=5)

width < len (16) in center_string(outstring, ' 9.3838(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM12.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '629.27', width=5)

width < len (9) in center_string(outstring, '198085.61', width=6)

width < len (12) in center_string(outstring, '610906962.04', width=8)

width < len (7) in center_string(outstring, '4037.88', width=6)

width < len (7) in center_string(outstring, '4382.91', width=5)

width < len (16) in center_string(outstring, ' 9.6050(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.004(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4380.52', width=5)

width < len (16) in center_string(outstring, ' 9.5945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.35', width=5)

width < len (16) in center_string(outstring, ' 9.5806(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027012(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.44', width=5)

width < len (16) in center_string(outstring, ' 9.5635(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4368.80', width=5)

width < len (16) in center_string(outstring, ' 9.5432(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930099(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4363.44', width=5)

width < len (16) in center_string(outstring, ' 9.5198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4357.38', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.61', width=5)

width < len (16) in center_string(outstring, ' 9.4639(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM40.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '753.39', width=5)

width < len (9) in center_string(outstring, '283892.56', width=6)

width < len (12) in center_string(outstring, '583547392.54', width=8)

width < len (7) in center_string(outstring, '3009.39', width=6)

width < len (7) in center_string(outstring, '4394.03', width=5)

width < len (16) in center_string(outstring, ' 9.6538(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.27', width=5)

width < len (16) in center_string(outstring, ' 9.6416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.97', width=5)

width < len (16) in center_string(outstring, ' 7.8130(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3947.25', width=5)

width < len (16) in center_string(outstring, ' 7.7904(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.51', width=5)

width < len (16) in center_string(outstring, ' 9.5857(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.84', width=5)

width < len (16) in center_string(outstring, ' 9.5609(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.47', width=5)

width < len (16) in center_string(outstring, ' 9.5331(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4359.42', width=5)

width < len (16) in center_string(outstring, ' 9.5023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM51.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '638.78', width=5)

width < len (9) in center_string(outstring, '204115.02', width=6)

width < len (12) in center_string(outstring, '590370361.12', width=8)

width < len (7) in center_string(outstring, '2617.82', width=6)

width < len (7) in center_string(outstring, '4361.81', width=5)

width < len (16) in center_string(outstring, ' 9.5127(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253912(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4359.62', width=5)

width < len (16) in center_string(outstring, ' 9.5031(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.64', width=5)

width < len (16) in center_string(outstring, ' 9.4902(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.36', width=5)

width < len (16) in center_string(outstring, ' 7.7003(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927750(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4348.43', width=5)

width < len (16) in center_string(outstring, ' 9.4544(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.21', width=5)

width < len (16) in center_string(outstring, ' 9.4317(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.26', width=5)

width < len (16) in center_string(outstring, ' 9.4059(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.58', width=5)

width < len (16) in center_string(outstring, ' 9.3770(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM11.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.82', width=5)

width < len (9) in center_string(outstring, '167606.84', width=6)

width < len (12) in center_string(outstring, '589835006.03', width=8)

width < len (7) in center_string(outstring, '1439.63', width=6)

width < len (7) in center_string(outstring, '4358.79', width=5)

width < len (16) in center_string(outstring, ' 9.4995(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254314(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.25', width=5)

width < len (16) in center_string(outstring, ' 9.4797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.83', width=5)

width < len (16) in center_string(outstring, ' 9.4649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.66', width=5)

width < len (16) in center_string(outstring, ' 9.4467(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.75', width=5)

width < len (16) in center_string(outstring, ' 9.4254(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.38', width=5)

width < len (16) in center_string(outstring, ' 7.6338(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.74', width=5)

width < len (16) in center_string(outstring, ' 9.3733(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM2.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '443.26', width=5)

width < len (8) in center_string(outstring, '98328.67', width=6)

width < len (12) in center_string(outstring, '591792021.42', width=8)

width < len (7) in center_string(outstring, '2617.63', width=6)

width < len (7) in center_string(outstring, '4366.48', width=5)

width < len (16) in center_string(outstring, ' 9.5331(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.153(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.86', width=5)

width < len (16) in center_string(outstring, ' 7.7494(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018307(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921021(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4361.51', width=5)

width < len (16) in center_string(outstring, ' 9.5114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027460(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.88', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.51', width=5)

width < len (16) in center_string(outstring, ' 9.4765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929428(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.41', width=5)

width < len (16) in center_string(outstring, ' 9.4543(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932220(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.58', width=5)

width < len (16) in center_string(outstring, ' 9.4290(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064073(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.03', width=5)

width < len (16) in center_string(outstring, ' 9.4006(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073227(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937836(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.1)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM22.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '379.19', width=5)

width < len (8) in center_string(outstring, '71976.68', width=6)

width < len (12) in center_string(outstring, '593266506.94', width=8)

width < len (7) in center_string(outstring, '2067.69', width=6)

width < len (7) in center_string(outstring, '4372.38', width=5)

width < len (16) in center_string(outstring, ' 9.5588(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.063(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.18', width=5)

width < len (16) in center_string(outstring, ' 9.5492(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '3937.91', width=5)

width < len (16) in center_string(outstring, ' 7.7536(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027189(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(17)', width=10)

width < len (7) in center_string(outstring, '4363.47', width=5)

width < len (16) in center_string(outstring, ' 9.5199(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929230(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.02', width=5)

width < len (16) in center_string(outstring, ' 9.5005(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045316(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932022(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.84', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.95', width=5)

width < len (16) in center_string(outstring, ' 9.4523(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.35', width=5)

width < len (16) in center_string(outstring, ' 9.4237(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM33.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '738.56', width=5)

width < len (9) in center_string(outstring, '272829.03', width=6)

width < len (12) in center_string(outstring, '598881090.44', width=8)

width < len (7) in center_string(outstring, '2954.54', width=6)

width < len (7) in center_string(outstring, '4394.28', width=5)

width < len (16) in center_string(outstring, ' 9.6549(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252778(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.03', width=5)

width < len (16) in center_string(outstring, ' 7.8330(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.32', width=5)

width < len (16) in center_string(outstring, ' 9.6287(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.30', width=5)

width < len (16) in center_string(outstring, ' 9.6111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925842(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.62', width=5)

width < len (16) in center_string(outstring, ' 9.5905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.27', width=5)

width < len (16) in center_string(outstring, ' 9.5671(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.26', width=5)

width < len (16) in center_string(outstring, ' 9.5409(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4361.61', width=5)

width < len (16) in center_string(outstring, ' 9.5118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM50.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '642.62', width=5)

width < len (9) in center_string(outstring, '206572.41', width=6)

width < len (12) in center_string(outstring, '589976594.13', width=8)

width < len (7) in center_string(outstring, '2542.54', width=6)

width < len (7) in center_string(outstring, '4360.39', width=5)

width < len (16) in center_string(outstring, ' 9.5065(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254063(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.25', width=5)

width < len (16) in center_string(outstring, ' 9.4972(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922272(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4355.32', width=5)

width < len (16) in center_string(outstring, ' 9.4844(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.64', width=5)

width < len (16) in center_string(outstring, ' 9.4684(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.21', width=5)

width < len (16) in center_string(outstring, ' 9.4491(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.95', width=5)

width < len (16) in center_string(outstring, ' 7.6517(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.14', width=5)

width < len (16) in center_string(outstring, ' 9.4011(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4329.52', width=5)

width < len (16) in center_string(outstring, ' 9.3724(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939163(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM10.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '657.96', width=5)

width < len (9) in center_string(outstring, '216547.52', width=6)

width < len (12) in center_string(outstring, '591139015.04', width=8)

width < len (7) in center_string(outstring, '3516.10', width=6)

width < len (7) in center_string(outstring, '4365.15', width=5)

width < len (16) in center_string(outstring, ' 9.5273(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.02', width=5)

width < len (16) in center_string(outstring, ' 9.5180(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.10', width=5)

width < len (16) in center_string(outstring, ' 9.5052(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.41', width=5)

width < len (16) in center_string(outstring, ' 9.4892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.99', width=5)

width < len (16) in center_string(outstring, ' 9.4699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.81', width=5)

width < len (16) in center_string(outstring, ' 9.4474(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933807(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.51', width=5)

width < len (16) in center_string(outstring, ' 7.6304(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4334.28', width=5)

width < len (16) in center_string(outstring, ' 9.3930(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939438(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(5.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM15.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.25', width=5)

width < len (9) in center_string(outstring, '170181.52', width=6)

width < len (12) in center_string(outstring, '589888291.57', width=8)

width < len (7) in center_string(outstring, '1461.51', width=6)

width < len (7) in center_string(outstring, '4358.78', width=5)

width < len (16) in center_string(outstring, ' 9.4995(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255011(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.96', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.34', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.98', width=5)

width < len (16) in center_string(outstring, ' 9.4655(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928848(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.87', width=5)

width < len (16) in center_string(outstring, ' 9.4476(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.01', width=5)

width < len (16) in center_string(outstring, ' 9.4265(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934479(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.81', width=5)

width < len (16) in center_string(outstring, ' 7.6355(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.11', width=5)

width < len (16) in center_string(outstring, ' 9.3750(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940109(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(7.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM1.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '886.40', width=5)

width < len (9) in center_string(outstring, '392951.56', width=6)

width < len (12) in center_string(outstring, '599552501.91', width=8)

width < len (7) in center_string(outstring, '3199.95', width=6)

width < len (7) in center_string(outstring, '4398.89', width=5)

width < len (16) in center_string(outstring, ' 9.6751(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252788(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4395.87', width=5)

width < len (16) in center_string(outstring, ' 9.6618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.10', width=5)

width < len (16) in center_string(outstring, ' 9.6453(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4387.67', width=5)

width < len (16) in center_string(outstring, ' 9.6258(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4382.57', width=5)

width < len (16) in center_string(outstring, ' 9.6035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3937.26', width=5)

width < len (16) in center_string(outstring, ' 7.7510(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4370.39', width=5)

width < len (16) in center_string(outstring, ' 9.5502(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4363.33', width=5)

width < len (16) in center_string(outstring, ' 9.5194(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM61.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '465.79', width=5)

width < len (9) in center_string(outstring, '108569.68', width=6)

width < len (12) in center_string(outstring, '592127186.27', width=8)

width < len (7) in center_string(outstring, '2738.66', width=6)

width < len (7) in center_string(outstring, '4368.10', width=5)

width < len (16) in center_string(outstring, ' 9.5401(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.167(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253445(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.02', width=5)

width < len (16) in center_string(outstring, ' 9.5311(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.15', width=5)

width < len (16) in center_string(outstring, ' 9.5185(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027500(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.65', width=5)

width < len (16) in center_string(outstring, ' 7.7171(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036667(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4355.16', width=5)

width < len (16) in center_string(outstring, ' 9.4837(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930069(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.05', width=5)

width < len (16) in center_string(outstring, ' 9.4615(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.21', width=5)

width < len (16) in center_string(outstring, ' 9.4361(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935669(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.66', width=5)

width < len (16) in center_string(outstring, ' 9.4076(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938477(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.9(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.350 sec, System: 0.000 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM21.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1012.22', width=5)

width < len (9) in center_string(outstring, '512394.00', width=6)

width < len (12) in center_string(outstring, '602857842.30', width=8)

width < len (7) in center_string(outstring, '3094.29', width=6)

width < len (7) in center_string(outstring, '4411.22', width=5)

width < len (16) in center_string(outstring, ' 9.7294(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254515(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.91', width=5)

width < len (16) in center_string(outstring, ' 9.7149(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922455(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3969.10', width=5)

width < len (16) in center_string(outstring, ' 7.8769(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.14', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4393.74', width=5)

width < len (16) in center_string(outstring, ' 9.6525(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930130(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4387.69', width=5)

width < len (16) in center_string(outstring, ' 9.6259(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4380.98', width=5)

width < len (16) in center_string(outstring, ' 9.5965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935242(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4373.63', width=5)

width < len (16) in center_string(outstring, ' 9.5643(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937805(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM72.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '372.07', width=5)

width < len (8) in center_string(outstring, '69303.11', width=6)

width < len (12) in center_string(outstring, '593070090.48', width=8)

width < len (7) in center_string(outstring, '2019.29', width=6)

width < len (7) in center_string(outstring, '4372.16', width=5)

width < len (16) in center_string(outstring, ' 9.5579(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.064(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4369.99', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.03', width=5)

width < len (16) in center_string(outstring, ' 9.5355(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.34', width=5)

width < len (16) in center_string(outstring, ' 9.5194(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.92', width=5)

width < len (16) in center_string(outstring, ' 9.5001(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.77', width=5)

width < len (16) in center_string(outstring, ' 9.4777(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054382(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3913.83', width=5)

width < len (16) in center_string(outstring, ' 7.6591(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063445(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4341.33', width=5)

width < len (16) in center_string(outstring, ' 9.4236(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM32.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '699.14', width=5)

width < len (9) in center_string(outstring, '244491.59', width=6)

width < len (12) in center_string(outstring, '611608364.78', width=8)

width < len (7) in center_string(outstring, '4063.50', width=6)

width < len (7) in center_string(outstring, '4385.58', width=5)

width < len (16) in center_string(outstring, ' 9.6167(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4383.14', width=5)

width < len (16) in center_string(outstring, ' 9.6059(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920868(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.91', width=5)

width < len (16) in center_string(outstring, ' 9.5918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.95', width=5)

width < len (16) in center_string(outstring, ' 9.5745(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4371.28', width=5)

width < len (16) in center_string(outstring, ' 9.5540(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.88', width=5)

width < len (16) in center_string(outstring, ' 9.5305(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.78', width=5)

width < len (16) in center_string(outstring, ' 9.5039(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934647(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4352.98', width=5)

width < len (16) in center_string(outstring, ' 9.4742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM43.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '807.81', width=5)

width < len (9) in center_string(outstring, '326374.53', width=6)

width < len (12) in center_string(outstring, '615547411.69', width=8)

width < len (7) in center_string(outstring, '3147.74', width=6)

width < len (7) in center_string(outstring, '4400.60', width=5)

width < len (16) in center_string(outstring, ' 9.6826(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.802(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252326(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.85', width=5)

width < len (16) in center_string(outstring, ' 9.6705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920486(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.33', width=5)

width < len (16) in center_string(outstring, ' 9.6551(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.09', width=5)

width < len (16) in center_string(outstring, ' 9.6365(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.16', width=5)

width < len (16) in center_string(outstring, ' 9.6148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4379.52', width=5)

width < len (16) in center_string(outstring, ' 9.5901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931335(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.20', width=5)

width < len (16) in center_string(outstring, ' 9.5625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061612(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.20', width=5)

width < len (16) in center_string(outstring, ' 9.5319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM54.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '664.42', width=5)

width < len (9) in center_string(outstring, '220817.52', width=6)

width < len (12) in center_string(outstring, '591032605.83', width=8)

width < len (7) in center_string(outstring, '3385.68', width=6)

width < len (7) in center_string(outstring, '4364.78', width=5)

width < len (16) in center_string(outstring, ' 9.5257(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.64', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.71', width=5)

width < len (16) in center_string(outstring, ' 9.5036(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.02', width=5)

width < len (16) in center_string(outstring, ' 9.4875(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.59', width=5)

width < len (16) in center_string(outstring, ' 9.4682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.41', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.15', width=5)

width < len (16) in center_string(outstring, ' 7.6290(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4333.86', width=5)

width < len (16) in center_string(outstring, ' 9.3912(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939697(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM14.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.36', width=5)

width < len (9) in center_string(outstring, '176725.53', width=6)

width < len (12) in center_string(outstring, '588992582.04', width=8)

width < len (7) in center_string(outstring, '1662.92', width=6)

width < len (7) in center_string(outstring, '4356.25', width=5)

width < len (16) in center_string(outstring, ' 9.4885(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.21', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.38', width=5)

width < len (16) in center_string(outstring, ' 9.4673(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.80', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.48', width=5)

width < len (16) in center_string(outstring, ' 9.4329(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929626(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.93', width=5)

width < len (16) in center_string(outstring, ' 7.6438(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932434(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.62', width=5)

width < len (16) in center_string(outstring, ' 9.3858(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935257(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4326.11', width=5)

width < len (16) in center_string(outstring, ' 9.3576(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM5.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '888.61', width=5)

width < len (9) in center_string(outstring, '394909.84', width=6)

width < len (12) in center_string(outstring, '599470678.50', width=8)

width < len (7) in center_string(outstring, '3283.97', width=6)

width < len (7) in center_string(outstring, '4398.41', width=5)

width < len (16) in center_string(outstring, ' 9.6730(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.768(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254877(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3960.80', width=5)

width < len (16) in center_string(outstring, ' 7.8440(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017537(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923035(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4391.46', width=5)

width < len (16) in center_string(outstring, ' 9.6425(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026305(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925735(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.89', width=5)

width < len (16) in center_string(outstring, ' 9.6224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.64', width=5)

width < len (16) in center_string(outstring, ' 9.5994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4375.69', width=5)

width < len (16) in center_string(outstring, ' 9.5733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933853(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4369.07', width=5)

width < len (16) in center_string(outstring, ' 9.5444(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936554(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4361.77', width=5)

width < len (16) in center_string(outstring, ' 9.5125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939270(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM60.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '381.58', width=5)

width < len (8) in center_string(outstring, '72887.57', width=6)

width < len (12) in center_string(outstring, '592620608.75', width=8)

width < len (7) in center_string(outstring, '2089.61', width=6)

width < len (7) in center_string(outstring, '4369.91', width=5)

width < len (16) in center_string(outstring, ' 9.5481(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.136(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254716(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.83', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018271(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.96', width=5)

width < len (16) in center_string(outstring, ' 9.5265(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027407(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3930.13', width=5)

width < len (16) in center_string(outstring, ' 7.7230(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036542(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4356.98', width=5)

width < len (16) in center_string(outstring, ' 9.4917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045678(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.89', width=5)

width < len (16) in center_string(outstring, ' 9.4695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054813(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4346.07', width=5)

width < len (16) in center_string(outstring, ' 9.4442(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063949(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936890(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.54', width=5)

width < len (16) in center_string(outstring, ' 9.4158(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939697(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM25.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1003.40', width=5)

width < len (9) in center_string(outstring, '503502.00', width=6)

width < len (12) in center_string(outstring, '587370230.33', width=8)

width < len (7) in center_string(outstring, '3103.26', width=6)

width < len (7) in center_string(outstring, '4410.58', width=5)

width < len (16) in center_string(outstring, ' 9.7266(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253417(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.22', width=5)

width < len (16) in center_string(outstring, ' 9.7118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.11', width=5)

width < len (16) in center_string(outstring, ' 9.6937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.33', width=5)

width < len (16) in center_string(outstring, ' 9.6727(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926483(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3955.34', width=5)

width < len (16) in center_string(outstring, ' 7.8223(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4386.76', width=5)

width < len (16) in center_string(outstring, ' 9.6218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931610(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3940.56', width=5)

width < len (16) in center_string(outstring, ' 7.7640(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4372.57', width=5)

width < len (16) in center_string(outstring, ' 9.5597(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM71.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 78 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '367.10', width=5)

width < len (8) in center_string(outstring, '67466.04', width=6)

width < len (12) in center_string(outstring, '592972601.58', width=8)

width < len (7) in center_string(outstring, '1986.75', width=6)

width < len (7) in center_string(outstring, '4371.48', width=5)

width < len (16) in center_string(outstring, ' 9.5549(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.072(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4369.31', width=5)

width < len (16) in center_string(outstring, ' 9.5455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018145(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923111(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4366.36', width=5)

width < len (16) in center_string(outstring, ' 9.5326(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.67', width=5)

width < len (16) in center_string(outstring, ' 9.5165(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3926.69', width=5)

width < len (16) in center_string(outstring, ' 7.7095(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045362(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4353.11', width=5)

width < len (16) in center_string(outstring, ' 9.4748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054435(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.24', width=5)

width < len (16) in center_string(outstring, ' 9.4493(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.67', width=5)

width < len (16) in center_string(outstring, ' 9.4207(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.3)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(7.9)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM31.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '441.16', width=5)

width < len (8) in center_string(outstring, '97400.20', width=6)

width < len (12) in center_string(outstring, '595319194.00', width=8)

width < len (7) in center_string(outstring, '2535.46', width=6)

width < len (7) in center_string(outstring, '4380.97', width=5)

width < len (16) in center_string(outstring, ' 9.5964(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.038(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253972(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.74', width=5)

width < len (16) in center_string(outstring, ' 9.5867(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.72', width=5)

width < len (16) in center_string(outstring, ' 9.5735(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.96', width=5)

width < len (16) in center_string(outstring, ' 9.5570(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036153(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.47', width=5)

width < len (16) in center_string(outstring, ' 9.5374(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930481(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.26', width=5)

width < len (16) in center_string(outstring, ' 9.5147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054230(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3918.80', width=5)

width < len (16) in center_string(outstring, ' 7.6785(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4349.70', width=5)

width < len (16) in center_string(outstring, ' 9.4599(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM36.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.11', width=5)

width < len (9) in center_string(outstring, '548318.75', width=6)

width < len (12) in center_string(outstring, '606005655.55', width=8)

width < len (7) in center_string(outstring, '2600.42', width=6)

width < len (7) in center_string(outstring, '4426.57', width=5)

width < len (16) in center_string(outstring, ' 9.7973(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.204(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253830(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3984.90', width=5)

width < len (16) in center_string(outstring, ' 7.9397(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018408(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922104(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786835(17)', width=10)

width < len (7) in center_string(outstring, '4417.49', width=5)

width < len (16) in center_string(outstring, ' 9.7571(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4411.70', width=5)

width < len (16) in center_string(outstring, ' 9.7316(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4405.12', width=5)

width < len (16) in center_string(outstring, ' 9.7026(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.77', width=5)

width < len (16) in center_string(outstring, ' 9.6702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055225(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.64', width=5)

width < len (16) in center_string(outstring, ' 9.6345(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (7) in center_string(outstring, '4380.76', width=5)

width < len (16) in center_string(outstring, ' 9.5955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790955(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.5)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.150 sec (User: 0.150 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM82.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '698.99', width=5)

width < len (9) in center_string(outstring, '244387.55', width=6)

width < len (12) in center_string(outstring, '611272601.05', width=8)

width < len (7) in center_string(outstring, '4226.22', width=6)

width < len (7) in center_string(outstring, '4384.55', width=5)

width < len (16) in center_string(outstring, ' 9.6122(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254176(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.06', width=5)

width < len (16) in center_string(outstring, ' 9.6012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922348(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.78', width=5)

width < len (16) in center_string(outstring, ' 9.5869(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.78', width=5)

width < len (16) in center_string(outstring, ' 9.5693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927872(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.05', width=5)

width < len (16) in center_string(outstring, ' 9.5487(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.61', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.46', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.62', width=5)

width < len (16) in center_string(outstring, ' 9.4683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM42.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '802.02', width=5)

width < len (9) in center_string(outstring, '321717.44', width=6)

width < len (12) in center_string(outstring, '600154180.29', width=8)

width < len (7) in center_string(outstring, '3093.67', width=6)

width < len (7) in center_string(outstring, '3968.21', width=5)

width < len (16) in center_string(outstring, ' 7.8733(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.855(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254020(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4396.68', width=5)

width < len (16) in center_string(outstring, ' 9.6654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4393.13', width=5)

width < len (16) in center_string(outstring, ' 9.6498(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026566(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4388.85', width=5)

width < len (16) in center_string(outstring, ' 9.6310(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.87', width=5)

width < len (16) in center_string(outstring, ' 9.6092(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044276(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4378.18', width=5)

width < len (16) in center_string(outstring, ' 9.5842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933090(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4371.80', width=5)

width < len (16) in center_string(outstring, ' 9.5563(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061987(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935822(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4364.73', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM53.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '659.04', width=5)

width < len (9) in center_string(outstring, '217261.52', width=6)

width < len (12) in center_string(outstring, '591036601.00', width=8)

width < len (7) in center_string(outstring, '3284.06', width=6)

width < len (7) in center_string(outstring, '4364.72', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.56', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.60', width=5)

width < len (16) in center_string(outstring, ' 9.5031(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924240(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.89', width=5)

width < len (16) in center_string(outstring, ' 9.4869(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.43', width=5)

width < len (16) in center_string(outstring, ' 9.4675(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929871(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.13', width=5)

width < len (16) in center_string(outstring, ' 7.6563(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.30', width=5)

width < len (16) in center_string(outstring, ' 9.4191(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.64', width=5)

width < len (16) in center_string(outstring, ' 9.3902(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938324(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM13.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.99', width=5)

width < len (9) in center_string(outstring, '177098.66', width=6)

width < len (12) in center_string(outstring, '591285580.22', width=8)

width < len (7) in center_string(outstring, '3596.39', width=6)

width < len (7) in center_string(outstring, '4365.21', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.209(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.09', width=5)

width < len (16) in center_string(outstring, ' 9.5183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018419(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.17', width=5)

width < len (16) in center_string(outstring, ' 9.5056(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3925.61', width=5)

width < len (16) in center_string(outstring, ' 7.7052(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036838(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4352.08', width=5)

width < len (16) in center_string(outstring, ' 9.4703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046047(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.92', width=5)

width < len (16) in center_string(outstring, ' 9.4479(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055257(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.03', width=5)

width < len (16) in center_string(outstring, ' 9.4223(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4334.41', width=5)

width < len (16) in center_string(outstring, ' 9.3936(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073675(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(8.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(6.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.310 sec, System: 0.000 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM18.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '592.79', width=5)

width < len (9) in center_string(outstring, '175792.80', width=6)

width < len (12) in center_string(outstring, '574559199.67', width=8)

width < len (7) in center_string(outstring, '1625.88', width=6)

width < len (7) in center_string(outstring, '4356.70', width=5)

width < len (16) in center_string(outstring, ' 9.4904(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.70', width=5)

width < len (16) in center_string(outstring, ' 9.4817(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4351.91', width=5)

width < len (16) in center_string(outstring, ' 9.4696(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.36', width=5)

width < len (16) in center_string(outstring, ' 9.4541(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.43', width=5)

width < len (16) in center_string(outstring, ' 7.6692(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931732(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3910.44', width=5)

width < len (16) in center_string(outstring, ' 7.6458(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.29', width=5)

width < len (16) in center_string(outstring, ' 9.3887(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937363(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.81', width=5)

width < len (16) in center_string(outstring, ' 9.3606(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940186(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.3)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.1(9.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM4.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.52', width=5)

width < len (9) in center_string(outstring, '433964.47', width=6)

width < len (12) in center_string(outstring, '586027774.48', width=8)

width < len (7) in center_string(outstring, '3229.97', width=6)

width < len (7) in center_string(outstring, '4406.27', width=5)

width < len (16) in center_string(outstring, ' 9.7076(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.753(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.04', width=5)

width < len (16) in center_string(outstring, ' 9.6934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.04', width=5)

width < len (16) in center_string(outstring, ' 9.6758(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.33', width=5)

width < len (16) in center_string(outstring, ' 9.6551(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '3947.94', width=5)

width < len (16) in center_string(outstring, ' 7.7931(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043763(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930405(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4382.84', width=5)

width < len (16) in center_string(outstring, ' 9.6047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933105(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.18', width=5)

width < len (16) in center_string(outstring, ' 7.7350(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935806(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4368.64', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM64.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '390.40', width=5)

width < len (8) in center_string(outstring, '76293.18', width=6)

width < len (12) in center_string(outstring, '563423173.88', width=8)

width < len (7) in center_string(outstring, '2143.34', width=6)

width < len (7) in center_string(outstring, '3943.18', width=5)

width < len (16) in center_string(outstring, ' 7.7743(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.655(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250925(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.41', width=5)

width < len (16) in center_string(outstring, ' 9.5371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017311(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.70', width=5)

width < len (16) in center_string(outstring, ' 9.5253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025966(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '3930.13', width=5)

width < len (16) in center_string(outstring, ' 7.7230(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034621(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924500(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(18)', width=10)

width < len (7) in center_string(outstring, '4357.21', width=5)

width < len (16) in center_string(outstring, ' 9.4926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4352.44', width=5)

width < len (16) in center_string(outstring, ' 9.4719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929916(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788818(16)', width=10)

width < len (7) in center_string(outstring, '3912.56', width=5)

width < len (16) in center_string(outstring, ' 7.6541(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060587(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932617(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(18)', width=10)

width < len (7) in center_string(outstring, '4340.90', width=5)

width < len (16) in center_string(outstring, ' 9.4217(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM24.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1002.70', width=5)

width < len (9) in center_string(outstring, '502804.53', width=6)

width < len (12) in center_string(outstring, '602295856.04', width=8)

width < len (7) in center_string(outstring, '3127.36', width=6)

width < len (7) in center_string(outstring, '4409.76', width=5)

width < len (16) in center_string(outstring, ' 9.7230(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253225(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.43', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.34', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.58', width=5)

width < len (16) in center_string(outstring, ' 9.6694(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.15', width=5)

width < len (16) in center_string(outstring, ' 9.6455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928848(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3947.70', width=5)

width < len (16) in center_string(outstring, ' 7.7922(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4379.32', width=5)

width < len (16) in center_string(outstring, ' 9.5892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.93', width=5)

width < len (16) in center_string(outstring, ' 9.5569(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(9.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.6)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM70.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1019.40', width=5)

width < len (9) in center_string(outstring, '519693.09', width=6)

width < len (12) in center_string(outstring, '604118404.13', width=8)

width < len (7) in center_string(outstring, '2908.66', width=6)

width < len (7) in center_string(outstring, '4419.09', width=5)

width < len (16) in center_string(outstring, ' 9.7642(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255961(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4415.29', width=5)

width < len (16) in center_string(outstring, ' 9.7474(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924164(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4410.64', width=5)

width < len (16) in center_string(outstring, ' 9.7269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4405.22', width=5)

width < len (16) in center_string(outstring, ' 9.7030(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.03', width=5)

width < len (16) in center_string(outstring, ' 9.6757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.02', width=5)

width < len (16) in center_string(outstring, ' 7.8014(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4384.41', width=5)

width < len (16) in center_string(outstring, ' 9.6115(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938263(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4375.99', width=5)

width < len (16) in center_string(outstring, ' 9.5747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941086(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.140 sec (User: 0.140 sec, System: 0.000 sec)
  Total time: 0.140 sec

Final candidates in binary format are in 'Sband_DM75.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '423.16', width=5)

width < len (8) in center_string(outstring, '89621.03', width=6)

width < len (12) in center_string(outstring, '610541159.23', width=8)

width < len (7) in center_string(outstring, '2398.00', width=6)

width < len (7) in center_string(outstring, '4381.14', width=5)

width < len (16) in center_string(outstring, ' 9.5972(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.045(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254199(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4378.89', width=5)

width < len (16) in center_string(outstring, ' 9.5873(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018089(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.85', width=5)

width < len (16) in center_string(outstring, ' 9.5741(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027134(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925156(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.08', width=5)

width < len (16) in center_string(outstring, ' 9.5575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.57', width=5)

width < len (16) in center_string(outstring, ' 9.5378(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045223(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.34', width=5)

width < len (16) in center_string(outstring, ' 9.5150(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.39', width=5)

width < len (16) in center_string(outstring, ' 9.4891(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.73', width=5)

width < len (16) in center_string(outstring, ' 9.4601(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939026(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM35.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1037.57', width=5)

width < len (9) in center_string(outstring, '538375.56', width=6)

width < len (12) in center_string(outstring, '605942451.71', width=8)

width < len (7) in center_string(outstring, '2570.16', width=6)

width < len (7) in center_string(outstring, '4426.42', width=5)

width < len (16) in center_string(outstring, ' 9.7966(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254872(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4422.44', width=5)

width < len (16) in center_string(outstring, ' 9.7790(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4417.60', width=5)

width < len (16) in center_string(outstring, ' 9.7576(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4411.98', width=5)

width < len (16) in center_string(outstring, ' 9.7328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928726(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4405.61', width=5)

width < len (16) in center_string(outstring, ' 9.7047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3955.52', width=5)

width < len (16) in center_string(outstring, ' 7.8231(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4390.59', width=5)

width < len (16) in center_string(outstring, ' 9.6386(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4381.98', width=5)

width < len (16) in center_string(outstring, ' 9.6009(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(7.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM81.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '709.13', width=5)

width < len (9) in center_string(outstring, '251528.12', width=6)

width < len (12) in center_string(outstring, '598250118.42', width=8)

width < len (7) in center_string(outstring, '3413.93', width=6)

width < len (7) in center_string(outstring, '4391.67', width=5)

width < len (16) in center_string(outstring, ' 9.6434(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.20', width=5)

width < len (16) in center_string(outstring, ' 9.6325(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919937(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.94', width=5)

width < len (16) in center_string(outstring, ' 7.8050(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4382.13', width=5)

width < len (16) in center_string(outstring, ' 9.6015(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925064(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.59', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4372.39', width=5)

width < len (16) in center_string(outstring, ' 9.5589(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930191(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4366.53', width=5)

width < len (16) in center_string(outstring, ' 9.5333(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4360.02', width=5)

width < len (16) in center_string(outstring, ' 9.5049(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.3)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(7.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM46.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '789.41', width=5)

width < len (9) in center_string(outstring, '311678.66', width=6)

width < len (12) in center_string(outstring, '599746529.13', width=8)

width < len (7) in center_string(outstring, '3078.13', width=6)

width < len (7) in center_string(outstring, '4398.89', width=5)

width < len (16) in center_string(outstring, ' 9.6751(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4396.12', width=5)

width < len (16) in center_string(outstring, ' 9.6629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4392.57', width=5)

width < len (16) in center_string(outstring, ' 9.6473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924881(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4388.30', width=5)

width < len (16) in center_string(outstring, ' 9.6286(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.32', width=5)

width < len (16) in center_string(outstring, ' 9.6068(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3939.02', width=5)

width < len (16) in center_string(outstring, ' 7.7580(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4371.26', width=5)

width < len (16) in center_string(outstring, ' 9.5540(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4364.20', width=5)

width < len (16) in center_string(outstring, ' 9.5231(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(5.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM52.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '842.13', width=5)

width < len (9) in center_string(outstring, '354689.78', width=6)

width < len (12) in center_string(outstring, '601054498.52', width=8)

width < len (7) in center_string(outstring, '3124.86', width=6)

width < len (7) in center_string(outstring, '4403.91', width=5)

width < len (16) in center_string(outstring, ' 9.6972(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253311(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4401.04', width=5)

width < len (16) in center_string(outstring, ' 9.6846(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4397.44', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4393.15', width=5)

width < len (16) in center_string(outstring, ' 9.6499(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4388.20', width=5)

width < len (16) in center_string(outstring, ' 9.6281(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928940(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3942.02', width=5)

width < len (16) in center_string(outstring, ' 7.7698(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4376.30', width=5)

width < len (16) in center_string(outstring, ' 9.5760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4369.38', width=5)

width < len (16) in center_string(outstring, ' 9.5457(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM57.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '614.27', width=5)

width < len (9) in center_string(outstring, '188759.38', width=6)

width < len (12) in center_string(outstring, '576704531.77', width=8)

width < len (7) in center_string(outstring, '3655.04', width=6)

width < len (7) in center_string(outstring, '4365.97', width=5)

width < len (16) in center_string(outstring, ' 9.5308(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.82', width=5)

width < len (16) in center_string(outstring, ' 9.5215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.87', width=5)

width < len (16) in center_string(outstring, ' 9.5086(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.40', width=5)

width < len (16) in center_string(outstring, ' 7.7083(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926697(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '3920.72', width=5)

width < len (16) in center_string(outstring, ' 7.6860(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929504(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4347.53', width=5)

width < len (16) in center_string(outstring, ' 9.4505(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.60', width=5)

width < len (16) in center_string(outstring, ' 9.4248(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4334.95', width=5)

width < len (16) in center_string(outstring, ' 9.3959(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937958(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(8.5)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM17.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '924.79', width=5)

width < len (9) in center_string(outstring, '427715.84', width=6)

width < len (12) in center_string(outstring, '620547903.39', width=8)

width < len (7) in center_string(outstring, '3244.50', width=6)

width < len (7) in center_string(outstring, '4406.89', width=5)

width < len (16) in center_string(outstring, ' 9.7104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014515(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916595(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4406.13', width=5)

width < len (16) in center_string(outstring, ' 9.7070(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4405.28', width=5)

width < len (16) in center_string(outstring, ' 9.7033(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.35', width=5)

width < len (16) in center_string(outstring, ' 9.6992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058061(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914429(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4403.35', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913712(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4402.26', width=5)

width < len (16) in center_string(outstring, ' 9.6899(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087092(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.08', width=5)

width < len (16) in center_string(outstring, ' 9.6848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00101607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4399.83', width=5)

width < len (16) in center_string(outstring, ' 9.6793(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM63.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '607.84', width=5)

width < len (9) in center_string(outstring, '184827.73', width=6)

width < len (12) in center_string(outstring, '589195287.43', width=8)

width < len (7) in center_string(outstring, '1986.41', width=6)

width < len (7) in center_string(outstring, '4357.41', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.30', width=5)

width < len (16) in center_string(outstring, ' 9.4843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.40', width=5)

width < len (16) in center_string(outstring, ' 9.4717(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.75', width=5)

width < len (16) in center_string(outstring, ' 9.4558(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.35', width=5)

width < len (16) in center_string(outstring, ' 9.4367(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929749(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.37', width=5)

width < len (16) in center_string(outstring, ' 7.6416(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932556(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4333.35', width=5)

width < len (16) in center_string(outstring, ' 9.3890(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935379(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.76', width=5)

width < len (16) in center_string(outstring, ' 9.3604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(7.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM8.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.27', width=5)

width < len (8) in center_string(outstring, '61779.80', width=6)

width < len (12) in center_string(outstring, '592603339.84', width=8)

width < len (7) in center_string(outstring, '1843.82', width=6)

width < len (7) in center_string(outstring, '3944.45', width=5)

width < len (16) in center_string(outstring, ' 7.7794(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254009(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.21', width=5)

width < len (16) in center_string(outstring, ' 9.5363(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.24', width=5)

width < len (16) in center_string(outstring, ' 9.5233(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.53', width=5)

width < len (16) in center_string(outstring, ' 9.5071(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.08', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4350.90', width=5)

width < len (16) in center_string(outstring, ' 9.4652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933365(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.00', width=5)

width < len (16) in center_string(outstring, ' 9.4395(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.40', width=5)

width < len (16) in center_string(outstring, ' 9.4108(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938934(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.380 sec, System: 0.000 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM28.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1015.29', width=5)

width < len (9) in center_string(outstring, '515508.75', width=6)

width < len (12) in center_string(outstring, '604104486.34', width=8)

width < len (7) in center_string(outstring, '2928.98', width=6)

width < len (7) in center_string(outstring, '3982.86', width=5)

width < len (16) in center_string(outstring, ' 7.9316(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252017(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4412.46', width=5)

width < len (16) in center_string(outstring, ' 9.7349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919968(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4408.30', width=5)

width < len (16) in center_string(outstring, ' 9.7166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4403.47', width=5)

width < len (16) in center_string(outstring, ' 9.6953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4397.96', width=5)

width < len (16) in center_string(outstring, ' 9.6710(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4391.79', width=5)

width < len (16) in center_string(outstring, ' 9.6439(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930206(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4384.96', width=5)

width < len (16) in center_string(outstring, ' 9.6139(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4377.49', width=5)

width < len (16) in center_string(outstring, ' 9.5812(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.7(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM74.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  13%Amount of optimization complete =  18%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  40%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  59%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  81%Amount of optimization complete =  86%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '411.97', width=5)

width < len (8) in center_string(outstring, '84945.09', width=6)

width < len (12) in center_string(outstring, '593934311.69', width=8)

width < len (7) in center_string(outstring, '2320.14', width=6)

width < len (7) in center_string(outstring, '3948.86', width=5)

width < len (16) in center_string(outstring, ' 7.7968(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.034(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253083(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(17)', width=10)

width < len (7) in center_string(outstring, '4372.20', width=5)

width < len (16) in center_string(outstring, ' 9.5581(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4369.18', width=5)

width < len (16) in center_string(outstring, ' 9.5449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027101(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4365.43', width=5)

width < len (16) in center_string(outstring, ' 9.5285(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036135(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.96', width=5)

width < len (16) in center_string(outstring, ' 9.5090(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045168(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929596(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.76', width=5)

width < len (16) in center_string(outstring, ' 9.4863(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054202(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4349.84', width=5)

width < len (16) in center_string(outstring, ' 9.4606(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4343.22', width=5)

width < len (16) in center_string(outstring, ' 9.4318(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM34.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '564.41', width=5)

width < len (9) in center_string(outstring, '159369.88', width=6)

width < len (12) in center_string(outstring, '581084546.81', width=8)

width < len (7) in center_string(outstring, '3592.67', width=6)

width < len (7) in center_string(outstring, '3953.66', width=5)

width < len (16) in center_string(outstring, ' 7.8157(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.005(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255736(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4380.63', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018011(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.47', width=5)

width < len (16) in center_string(outstring, ' 9.5811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027016(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.59', width=5)

width < len (16) in center_string(outstring, ' 9.5641(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3933.15', width=5)

width < len (16) in center_string(outstring, ' 7.7349(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045027(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4363.64', width=5)

width < len (16) in center_string(outstring, ' 9.5207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.60', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063038(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937744(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.85', width=5)

width < len (16) in center_string(outstring, ' 9.4650(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072043(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940506(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.2(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM39.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '700.90', width=5)

width < len (9) in center_string(outstring, '245722.53', width=6)

width < len (12) in center_string(outstring, '612866679.64', width=8)

width < len (7) in center_string(outstring, '3454.59', width=6)

width < len (7) in center_string(outstring, '4390.48', width=5)

width < len (16) in center_string(outstring, ' 9.6382(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.930(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253914(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.91', width=5)

width < len (16) in center_string(outstring, ' 9.6269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.56', width=5)

width < len (16) in center_string(outstring, ' 9.6122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026789(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.49', width=5)

width < len (16) in center_string(outstring, ' 9.5944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.71', width=5)

width < len (16) in center_string(outstring, ' 9.5734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.21', width=5)

width < len (16) in center_string(outstring, ' 9.5494(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053578(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4364.00', width=5)

width < len (16) in center_string(outstring, ' 9.5223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935806(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4357.11', width=5)

width < len (16) in center_string(outstring, ' 9.4922(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071437(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM45.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '831.69', width=5)

width < len (9) in center_string(outstring, '345950.09', width=6)

width < len (12) in center_string(outstring, '600486327.30', width=8)

width < len (7) in center_string(outstring, '3101.77', width=6)

width < len (7) in center_string(outstring, '4402.37', width=5)

width < len (16) in center_string(outstring, ' 9.6904(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253497(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.43', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.72', width=5)

width < len (16) in center_string(outstring, ' 9.6612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.30', width=5)

width < len (16) in center_string(outstring, ' 9.6418(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.18', width=5)

width < len (16) in center_string(outstring, ' 9.6193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4380.35', width=5)

width < len (16) in center_string(outstring, ' 9.5937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932526(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.05', width=5)

width < len (16) in center_string(outstring, ' 7.7344(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935257(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4366.64', width=5)

width < len (16) in center_string(outstring, ' 9.5338(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM56.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '615.58', width=5)

width < len (9) in center_string(outstring, '189563.72', width=6)

width < len (12) in center_string(outstring, '591591609.08', width=8)

width < len (7) in center_string(outstring, '3520.54', width=6)

width < len (7) in center_string(outstring, '4366.77', width=5)

width < len (16) in center_string(outstring, ' 9.5343(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.64', width=5)

width < len (16) in center_string(outstring, ' 9.5251(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.72', width=5)

width < len (16) in center_string(outstring, ' 9.5123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.04', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.61', width=5)

width < len (16) in center_string(outstring, ' 9.4770(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.44', width=5)

width < len (16) in center_string(outstring, ' 9.4545(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.29', width=5)

width < len (16) in center_string(outstring, ' 7.6374(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4335.90', width=5)

width < len (16) in center_string(outstring, ' 9.4000(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939606(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM16.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.12', width=5)

width < len (9) in center_string(outstring, '181969.39', width=6)

width < len (12) in center_string(outstring, '589110304.61', width=8)

width < len (7) in center_string(outstring, '1902.91', width=6)

width < len (7) in center_string(outstring, '4357.22', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4355.07', width=5)

width < len (16) in center_string(outstring, ' 9.4833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.13', width=5)

width < len (16) in center_string(outstring, ' 9.4705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.45', width=5)

width < len (16) in center_string(outstring, ' 9.4545(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.01', width=5)

width < len (16) in center_string(outstring, ' 9.4352(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.84', width=5)

width < len (16) in center_string(outstring, ' 9.4128(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.17', width=5)

width < len (16) in center_string(outstring, ' 7.6174(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.32', width=5)

width < len (16) in center_string(outstring, ' 9.3585(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939316(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM7.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.87', width=5)

width < len (9) in center_string(outstring, '492993.06', width=6)

width < len (12) in center_string(outstring, '616371932.02', width=8)

width < len (7) in center_string(outstring, '3372.02', width=6)

width < len (7) in center_string(outstring, '4405.76', width=5)

width < len (16) in center_string(outstring, ' 9.7054(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254574(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.35', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.17', width=5)

width < len (16) in center_string(outstring, ' 9.6720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925415(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4393.30', width=5)

width < len (16) in center_string(outstring, ' 9.6506(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928116(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4387.75', width=5)

width < len (16) in center_string(outstring, ' 9.6262(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.51', width=5)

width < len (16) in center_string(outstring, ' 9.5988(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.59', width=5)

width < len (16) in center_string(outstring, ' 9.5685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.02', width=5)

width < len (16) in center_string(outstring, ' 9.5354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM67.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '353.44', width=5)

width < len (8) in center_string(outstring, '62545.87', width=6)

width < len (12) in center_string(outstring, '577850869.33', width=8)

width < len (7) in center_string(outstring, '1856.21', width=6)

width < len (7) in center_string(outstring, '4370.33', width=5)

width < len (16) in center_string(outstring, ' 9.5499(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.121(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.20', width=5)

width < len (16) in center_string(outstring, ' 9.5406(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920914(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.27', width=5)

width < len (16) in center_string(outstring, ' 9.5278(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.60', width=5)

width < len (16) in center_string(outstring, ' 9.5118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '3925.77', width=5)

width < len (16) in center_string(outstring, ' 7.7059(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045607(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4352.05', width=5)

width < len (16) in center_string(outstring, ' 9.4702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054729(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.76', width=5)

width < len (16) in center_string(outstring, ' 7.6549(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063850(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934891(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.61', width=5)

width < len (16) in center_string(outstring, ' 9.4161(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072972(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937683(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM27.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1013.39', width=5)

width < len (9) in center_string(outstring, '513578.66', width=6)

width < len (12) in center_string(outstring, '573533028.79', width=8)

width < len (7) in center_string(outstring, '2955.21', width=6)

width < len (7) in center_string(outstring, '3981.84', width=5)

width < len (16) in center_string(outstring, ' 7.9275(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254463(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4410.54', width=5)

width < len (16) in center_string(outstring, ' 9.7264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.40', width=5)

width < len (16) in center_string(outstring, ' 9.7082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3964.68', width=5)

width < len (16) in center_string(outstring, ' 7.8593(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927536(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4396.11', width=5)

width < len (16) in center_string(outstring, ' 9.6629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.96', width=5)

width < len (16) in center_string(outstring, ' 9.6359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3943.12', width=5)

width < len (16) in center_string(outstring, ' 7.7741(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064499(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935211(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.71', width=5)

width < len (16) in center_string(outstring, ' 9.5734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073713(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.3(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM73.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.27', width=5)

width < len (9) in center_string(outstring, '541176.56', width=6)

width < len (12) in center_string(outstring, '604849629.92', width=8)

width < len (7) in center_string(outstring, '2813.48', width=6)

width < len (7) in center_string(outstring, '4422.05', width=5)

width < len (16) in center_string(outstring, ' 9.7773(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256144(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4418.16', width=5)

width < len (16) in center_string(outstring, ' 9.7601(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4413.42', width=5)

width < len (16) in center_string(outstring, ' 9.7392(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.91', width=5)

width < len (16) in center_string(outstring, ' 9.7148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4401.64', width=5)

width < len (16) in center_string(outstring, ' 9.6872(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3952.39', width=5)

width < len (16) in center_string(outstring, ' 7.8107(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4386.83', width=5)

width < len (16) in center_string(outstring, ' 9.6222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4378.33', width=5)

width < len (16) in center_string(outstring, ' 9.5849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941269(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM78.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '536.09', width=5)

width < len (9) in center_string(outstring, '143788.61', width=6)

width < len (12) in center_string(outstring, '595754805.83', width=8)

width < len (7) in center_string(outstring, '3387.80', width=6)

width < len (7) in center_string(outstring, '4382.50', width=5)

width < len (16) in center_string(outstring, ' 9.6032(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.017(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255268(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4380.12', width=5)

width < len (16) in center_string(outstring, ' 9.5927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3943.73', width=5)

width < len (16) in center_string(outstring, ' 7.7765(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027052(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926224(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4373.06', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4368.44', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045087(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4363.09', width=5)

width < len (16) in center_string(outstring, ' 9.5183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054104(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.03', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063121(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4350.27', width=5)

width < len (16) in center_string(outstring, ' 9.4624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072138(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM38.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '733.49', width=5)

width < len (9) in center_string(outstring, '269100.56', width=6)

width < len (12) in center_string(outstring, '613460839.06', width=8)

width < len (7) in center_string(outstring, '3083.57', width=6)

width < len (7) in center_string(outstring, '4392.91', width=5)

width < len (16) in center_string(outstring, ' 9.6488(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.893(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4390.25', width=5)

width < len (16) in center_string(outstring, ' 9.6372(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017786(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.81', width=5)

width < len (16) in center_string(outstring, ' 9.6221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026678(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.65', width=5)

width < len (16) in center_string(outstring, ' 9.6038(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035571(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.77', width=5)

width < len (16) in center_string(outstring, ' 9.5824(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044464(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.19', width=5)

width < len (16) in center_string(outstring, ' 9.5580(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.91', width=5)

width < len (16) in center_string(outstring, ' 9.5306(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062250(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.94', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071143(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM49.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '818.12', width=5)

width < len (9) in center_string(outstring, '334755.97', width=6)

width < len (12) in center_string(outstring, '619899624.39', width=8)

width < len (7) in center_string(outstring, '3075.58', width=6)

width < len (7) in center_string(outstring, '4404.03', width=5)

width < len (16) in center_string(outstring, ' 9.6978(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014627(23)', width=12)

width < len (13) in center_string(outstring, ' 0.251215(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4403.42', width=5)

width < len (16) in center_string(outstring, ' 9.6950(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029255(23)', width=12)

width < len (13) in center_string(outstring, ' 0.250423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4402.72', width=5)

width < len (16) in center_string(outstring, ' 9.6920(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916306(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4401.96', width=5)

width < len (16) in center_string(outstring, ' 9.6886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915512(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4401.11', width=5)

width < len (16) in center_string(outstring, ' 9.6849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073137(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4400.19', width=5)

width < len (16) in center_string(outstring, ' 9.6809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087764(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4399.20', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.13', width=5)

width < len (16) in center_string(outstring, ' 9.6718(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM55.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.93', width=5)

width < len (9) in center_string(outstring, '481212.31', width=6)

width < len (12) in center_string(outstring, '601339364.23', width=8)

width < len (7) in center_string(outstring, '3348.25', width=6)

width < len (7) in center_string(outstring, '4406.69', width=5)

width < len (16) in center_string(outstring, ' 9.7095(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.730(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253671(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.34', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017460(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.22', width=5)

width < len (16) in center_string(outstring, ' 9.6766(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924515(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.40', width=5)

width < len (16) in center_string(outstring, ' 9.6554(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4388.89', width=5)

width < len (16) in center_string(outstring, ' 9.6312(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043651(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929916(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3942.97', width=5)

width < len (16) in center_string(outstring, ' 7.7735(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052381(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932602(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4375.83', width=5)

width < len (16) in center_string(outstring, ' 9.5740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061111(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935303(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.30', width=5)

width < len (16) in center_string(outstring, ' 9.5410(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069841(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM66.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1036.51', width=5)

width < len (9) in center_string(outstring, '537279.38', width=6)

width < len (12) in center_string(outstring, '604602429.72', width=8)

width < len (7) in center_string(outstring, '2871.20', width=6)

width < len (7) in center_string(outstring, '4420.98', width=5)

width < len (16) in center_string(outstring, ' 9.7725(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254798(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.13', width=5)

width < len (16) in center_string(outstring, ' 9.7555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923004(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.44', width=5)

width < len (16) in center_string(outstring, ' 9.7348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925827(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.98', width=5)

width < len (16) in center_string(outstring, ' 9.7107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.75', width=5)

width < len (16) in center_string(outstring, ' 9.6833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.70', width=5)

width < len (16) in center_string(outstring, ' 7.8080(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934280(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.04', width=5)

width < len (16) in center_string(outstring, ' 9.6187(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.59', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM77.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '514.08', width=5)

width < len (9) in center_string(outstring, '132229.28', width=6)

width < len (12) in center_string(outstring, '610443979.46', width=8)

width < len (7) in center_string(outstring, '3185.95', width=6)

width < len (7) in center_string(outstring, '4381.05', width=5)

width < len (16) in center_string(outstring, ' 9.5968(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.72', width=5)

width < len (16) in center_string(outstring, ' 9.5866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.60', width=5)

width < len (16) in center_string(outstring, ' 9.5730(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.75', width=5)

width < len (16) in center_string(outstring, ' 9.5561(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927322(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.18', width=5)

width < len (16) in center_string(outstring, ' 9.5361(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4361.88', width=5)

width < len (16) in center_string(outstring, ' 9.5130(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054117(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.87', width=5)

width < len (16) in center_string(outstring, ' 9.4868(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063136(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4349.15', width=5)

width < len (16) in center_string(outstring, ' 9.4576(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM37.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '719.74', width=5)

width < len (9) in center_string(outstring, '259109.31', width=6)

width < len (12) in center_string(outstring, '598937114.07', width=8)

width < len (7) in center_string(outstring, '3095.21', width=6)

width < len (7) in center_string(outstring, '4394.37', width=5)

width < len (16) in center_string(outstring, ' 9.6552(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.206(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.84', width=5)

width < len (16) in center_string(outstring, ' 9.6441(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3953.41', width=5)

width < len (16) in center_string(outstring, ' 7.8147(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027618(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926682(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4384.65', width=5)

width < len (16) in center_string(outstring, ' 9.6126(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929245(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.05', width=5)

width < len (16) in center_string(outstring, ' 9.5924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.79', width=5)

width < len (16) in center_string(outstring, ' 9.5694(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.88', width=5)

width < len (16) in center_string(outstring, ' 9.5436(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.32', width=5)

width < len (16) in center_string(outstring, ' 9.5149(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM48.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '878.47', width=5)

width < len (9) in center_string(outstring, '385952.75', width=6)

width < len (12) in center_string(outstring, '599238243.54', width=8)

width < len (7) in center_string(outstring, '3231.45', width=6)

width < len (7) in center_string(outstring, '4397.36', width=5)

width < len (16) in center_string(outstring, ' 9.6684(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.43', width=5)

width < len (16) in center_string(outstring, ' 9.6555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920761(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4390.76', width=5)

width < len (16) in center_string(outstring, ' 9.6394(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4386.42', width=5)

width < len (16) in center_string(outstring, ' 9.6203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4381.41', width=5)

width < len (16) in center_string(outstring, ' 9.5984(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.76', width=5)

width < len (16) in center_string(outstring, ' 7.7491(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4369.42', width=5)

width < len (16) in center_string(outstring, ' 9.5459(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4362.45', width=5)

width < len (16) in center_string(outstring, ' 9.5155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(7.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM59.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '535.98', width=5)

width < len (9) in center_string(outstring, '143730.19', width=6)

width < len (12) in center_string(outstring, '591631394.53', width=8)

width < len (7) in center_string(outstring, '3371.57', width=6)

width < len (7) in center_string(outstring, '4366.39', width=5)

width < len (16) in center_string(outstring, ' 9.5327(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.188(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.31', width=5)

width < len (16) in center_string(outstring, ' 9.5236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920074(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.43', width=5)

width < len (16) in center_string(outstring, ' 9.5111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.35', width=5)

width < len (16) in center_string(outstring, ' 7.7081(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036751(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.43', width=5)

width < len (16) in center_string(outstring, ' 9.4762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.31', width=5)

width < len (16) in center_string(outstring, ' 9.4539(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.46', width=5)

width < len (16) in center_string(outstring, ' 9.4285(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.89', width=5)

width < len (16) in center_string(outstring, ' 9.4000(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM19.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.81', width=5)

width < len (9) in center_string(outstring, '529330.12', width=6)

width < len (12) in center_string(outstring, '604640014.72', width=8)

width < len (7) in center_string(outstring, '2848.60', width=6)

width < len (7) in center_string(outstring, '4421.01', width=5)

width < len (16) in center_string(outstring, ' 9.7727(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254481(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4417.21', width=5)

width < len (16) in center_string(outstring, ' 9.7559(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922684(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.57', width=5)

width < len (16) in center_string(outstring, ' 9.7354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.15', width=5)

width < len (16) in center_string(outstring, ' 9.7115(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.97', width=5)

width < len (16) in center_string(outstring, ' 9.6843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3951.50', width=5)

width < len (16) in center_string(outstring, ' 7.8072(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.35', width=5)

width < len (16) in center_string(outstring, ' 9.6200(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.93', width=5)

width < len (16) in center_string(outstring, ' 9.5832(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '0.0(8.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM76.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '868.02', width=5)

width < len (9) in center_string(outstring, '376831.06', width=6)

width < len (12) in center_string(outstring, '583848757.63', width=8)

width < len (7) in center_string(outstring, '3203.25', width=6)

width < len (7) in center_string(outstring, '4396.22', width=5)

width < len (16) in center_string(outstring, ' 9.6634(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.789(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4393.22', width=5)

width < len (16) in center_string(outstring, ' 9.6502(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017578(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4389.46', width=5)

width < len (16) in center_string(outstring, ' 9.6337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026367(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925781(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3948.77', width=5)

width < len (16) in center_string(outstring, ' 7.7964(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035156(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '3942.34', width=5)

width < len (16) in center_string(outstring, ' 7.7710(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043945(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4373.95', width=5)

width < len (16) in center_string(outstring, ' 9.5657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052735(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933914(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4367.41', width=5)

width < len (16) in center_string(outstring, ' 9.5371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061524(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4360.20', width=5)

width < len (16) in center_string(outstring, ' 9.5057(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070313(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(2.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM58.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '987.25', width=5)

width < len (9) in center_string(outstring, '487429.34', width=6)

width < len (12) in center_string(outstring, '602680671.39', width=8)

width < len (7) in center_string(outstring, '3131.00', width=6)

width < len (7) in center_string(outstring, '3977.59', width=5)

width < len (16) in center_string(outstring, ' 7.9106(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.710(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254407(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4407.52', width=5)

width < len (16) in center_string(outstring, ' 9.7131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.34', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026130(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.46', width=5)

width < len (16) in center_string(outstring, ' 9.6733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.90', width=5)

width < len (16) in center_string(outstring, ' 9.6488(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043549(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.64', width=5)

width < len (16) in center_string(outstring, ' 9.6213(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052259(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4379.72', width=5)

width < len (16) in center_string(outstring, ' 9.5910(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060969(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4372.13', width=5)

width < len (16) in center_string(outstring, ' 9.5578(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069679(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM69.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.20', width=5)

width < len (9) in center_string(outstring, '530760.50', width=6)

width < len (12) in center_string(outstring, '621457239.64', width=8)

width < len (7) in center_string(outstring, '2645.07', width=6)

width < len (7) in center_string(outstring, '4424.42', width=5)

width < len (16) in center_string(outstring, ' 9.7878(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253048(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4420.82', width=5)

width < len (16) in center_string(outstring, ' 9.7718(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920990(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4416.46', width=5)

width < len (16) in center_string(outstring, ' 9.7526(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923553(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4411.41', width=5)

width < len (16) in center_string(outstring, ' 9.7303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926117(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4405.70', width=5)

width < len (16) in center_string(outstring, ' 9.7051(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4399.31', width=5)

width < len (16) in center_string(outstring, ' 9.6770(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4392.27', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064496(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4384.58', width=5)

width < len (16) in center_string(outstring, ' 9.6123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936356(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM79.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.50', width=5)

width < len (9) in center_string(outstring, '175026.61', width=6)

width < len (12) in center_string(outstring, '589777943.82', width=8)

width < len (7) in center_string(outstring, '1436.81', width=6)

width < len (7) in center_string(outstring, '4358.24', width=5)

width < len (16) in center_string(outstring, ' 9.4971(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.43', width=5)

width < len (16) in center_string(outstring, ' 9.4893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921112(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.84', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.50', width=5)

width < len (16) in center_string(outstring, ' 9.4634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4346.40', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.57', width=5)

width < len (16) in center_string(outstring, ' 9.4246(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.96', width=5)

width < len (16) in center_string(outstring, ' 7.6361(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.71', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM0.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '533.30', width=5)

width < len (9) in center_string(outstring, '142296.66', width=6)

width < len (12) in center_string(outstring, '576971395.97', width=8)

width < len (7) in center_string(outstring, '3343.31', width=6)

width < len (7) in center_string(outstring, '4367.60', width=5)

width < len (16) in center_string(outstring, ' 9.5380(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.50', width=5)

width < len (16) in center_string(outstring, ' 9.5288(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018374(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4362.60', width=5)

width < len (16) in center_string(outstring, ' 9.5161(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.94', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036748(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928574(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.55', width=5)

width < len (16) in center_string(outstring, ' 9.4810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045935(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3915.50', width=5)

width < len (16) in center_string(outstring, ' 7.6656(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055122(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4343.54', width=5)

width < len (16) in center_string(outstring, ' 9.4332(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936996(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.51', width=5)

width < len (16) in center_string(outstring, ' 7.6109(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073495(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939804(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM20.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '356.48', width=5)

width < len (8) in center_string(outstring, '63622.61', width=6)

width < len (12) in center_string(outstring, '593186925.85', width=8)

width < len (7) in center_string(outstring, '1907.38', width=6)

width < len (7) in center_string(outstring, '4371.94', width=5)

width < len (16) in center_string(outstring, ' 9.5569(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.099(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.43', width=5)

width < len (16) in center_string(outstring, ' 7.7674(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018198(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923676(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4366.79', width=5)

width < len (16) in center_string(outstring, ' 9.5344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027297(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.07', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036396(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929260(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.62', width=5)

width < len (16) in center_string(outstring, ' 9.4988(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.44', width=5)

width < len (16) in center_string(outstring, ' 9.4762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054594(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934830(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.54', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.93', width=5)

width < len (16) in center_string(outstring, ' 9.4219(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072792(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940414(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM30.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '662.79', width=5)

width < len (9) in center_string(outstring, '219738.27', width=6)

width < len (12) in center_string(outstring, '595967185.01', width=8)

width < len (7) in center_string(outstring, '4257.02', width=6)

width < len (7) in center_string(outstring, '4383.88', width=5)

width < len (16) in center_string(outstring, ' 9.6092(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.992(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254733(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.49', width=5)

width < len (16) in center_string(outstring, ' 9.5988(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.32', width=5)

width < len (16) in center_string(outstring, ' 9.5849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.42', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.79', width=5)

width < len (16) in center_string(outstring, ' 9.5475(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.44', width=5)

width < len (16) in center_string(outstring, ' 9.5242(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4358.38', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062944(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936722(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3913.67', width=5)

width < len (16) in center_string(outstring, ' 7.6584(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939484(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM41.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.25', width=5)

width < len (9) in center_string(outstring, '211509.11', width=6)

width < len (12) in center_string(outstring, '590672876.20', width=8)

width < len (7) in center_string(outstring, '2824.26', width=6)

width < len (7) in center_string(outstring, '4363.50', width=5)

width < len (16) in center_string(outstring, ' 9.5201(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251479(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.28', width=5)

width < len (16) in center_string(outstring, ' 9.5104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.27', width=5)

width < len (16) in center_string(outstring, ' 9.4973(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4354.51', width=5)

width < len (16) in center_string(outstring, ' 9.4809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925308(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.99', width=5)

width < len (16) in center_string(outstring, ' 9.4612(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3912.35', width=5)

width < len (16) in center_string(outstring, ' 7.6532(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.76', width=5)

width < len (16) in center_string(outstring, ' 9.4124(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4332.05', width=5)

width < len (16) in center_string(outstring, ' 9.3833(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM12.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.71', width=5)

width < len (9) in center_string(outstring, '169284.56', width=6)

width < len (12) in center_string(outstring, '590123053.49', width=8)

width < len (7) in center_string(outstring, '1482.93', width=6)

width < len (7) in center_string(outstring, '4359.99', width=5)

width < len (16) in center_string(outstring, ' 9.5047(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.10', width=5)

width < len (16) in center_string(outstring, ' 9.4965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920898(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4355.42', width=5)

width < len (16) in center_string(outstring, ' 9.4849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.99', width=5)

width < len (16) in center_string(outstring, ' 9.4699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.82', width=5)

width < len (16) in center_string(outstring, ' 9.4518(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.90', width=5)

width < len (16) in center_string(outstring, ' 9.4304(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932159(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.62', width=5)

width < len (16) in center_string(outstring, ' 7.6347(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934982(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4330.86', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937790(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM3.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 80 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '424.45', width=5)

width < len (8) in center_string(outstring, '90165.45', width=6)

width < len (12) in center_string(outstring, '562561796.37', width=8)

width < len (7) in center_string(outstring, '2407.20', width=6)

width < len (7) in center_string(outstring, '4367.46', width=5)

width < len (16) in center_string(outstring, ' 9.5374(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3937.09', width=5)

width < len (16) in center_string(outstring, ' 7.7503(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921051(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.55', width=5)

width < len (16) in center_string(outstring, ' 9.5159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4358.95', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926651(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.83', width=5)

width < len (16) in center_string(outstring, ' 7.6904(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045752(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.53', width=5)

width < len (16) in center_string(outstring, ' 9.4592(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932251(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.72', width=5)

width < len (16) in center_string(outstring, ' 9.4340(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.73', width=5)

width < len (16) in center_string(outstring, ' 7.6118(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.3(6.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM23.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1031.44', width=5)

width < len (9) in center_string(outstring, '532036.19', width=6)

width < len (12) in center_string(outstring, '605405237.75', width=8)

width < len (7) in center_string(outstring, '2637.76', width=6)

width < len (7) in center_string(outstring, '4424.22', width=5)

width < len (16) in center_string(outstring, ' 9.7869(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.29', width=5)

width < len (16) in center_string(outstring, ' 9.7695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.50', width=5)

width < len (16) in center_string(outstring, ' 9.7483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.95', width=5)

width < len (16) in center_string(outstring, ' 9.7238(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.62', width=5)

width < len (16) in center_string(outstring, ' 9.6960(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3954.22', width=5)

width < len (16) in center_string(outstring, ' 7.8179(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934479(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.72', width=5)

width < len (16) in center_string(outstring, ' 9.6305(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4380.17', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940125(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM80.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '639.14', width=5)

width < len (9) in center_string(outstring, '204341.89', width=6)

width < len (12) in center_string(outstring, '595949567.75', width=8)

width < len (7) in center_string(outstring, '4134.09', width=6)

width < len (7) in center_string(outstring, '4383.47', width=5)

width < len (16) in center_string(outstring, ' 9.6074(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.000(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.08', width=5)

width < len (16) in center_string(outstring, ' 9.5969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.90', width=5)

width < len (16) in center_string(outstring, ' 9.5830(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.98', width=5)

width < len (16) in center_string(outstring, ' 9.5659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.40', width=5)

width < len (16) in center_string(outstring, ' 7.7397(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044999(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930817(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4363.99', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.92', width=5)

width < len (16) in center_string(outstring, ' 9.4957(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.15', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM40.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '756.26', width=5)

width < len (9) in center_string(outstring, '286058.50', width=6)

width < len (12) in center_string(outstring, '583587932.87', width=8)

width < len (7) in center_string(outstring, '3032.13', width=6)

width < len (7) in center_string(outstring, '4394.17', width=5)

width < len (16) in center_string(outstring, ' 9.6544(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.42', width=5)

width < len (16) in center_string(outstring, ' 9.6423(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.95', width=5)

width < len (16) in center_string(outstring, ' 7.8129(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3947.24', width=5)

width < len (16) in center_string(outstring, ' 7.7903(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.71', width=5)

width < len (16) in center_string(outstring, ' 9.5866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.06', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933304(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.71', width=5)

width < len (16) in center_string(outstring, ' 9.5341(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.68', width=5)

width < len (16) in center_string(outstring, ' 9.5034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.6(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.7)x10^-2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM51.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '634.31', width=5)

width < len (9) in center_string(outstring, '201265.47', width=6)

width < len (12) in center_string(outstring, '590654942.60', width=8)

width < len (7) in center_string(outstring, '2613.78', width=6)

width < len (7) in center_string(outstring, '3938.14', width=5)

width < len (16) in center_string(outstring, ' 7.7545(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252996(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4360.16', width=5)

width < len (16) in center_string(outstring, ' 9.5055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.16', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924011(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.41', width=5)

width < len (16) in center_string(outstring, ' 9.4761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926834(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4348.91', width=5)

width < len (16) in center_string(outstring, ' 9.4565(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929657(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.67', width=5)

width < len (16) in center_string(outstring, ' 9.4338(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.70', width=5)

width < len (16) in center_string(outstring, ' 9.4078(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935287(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.01', width=5)

width < len (16) in center_string(outstring, ' 9.3788(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM11.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '580.57', width=5)

width < len (9) in center_string(outstring, '168623.61', width=6)

width < len (12) in center_string(outstring, '575391966.03', width=8)

width < len (7) in center_string(outstring, '1470.43', width=6)

width < len (7) in center_string(outstring, '4359.28', width=5)

width < len (16) in center_string(outstring, ' 9.5017(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.208(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.41', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018415(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.75', width=5)

width < len (16) in center_string(outstring, ' 9.4819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.35', width=5)

width < len (16) in center_string(outstring, ' 9.4671(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929062(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.66', width=5)

width < len (16) in center_string(outstring, ' 7.6819(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046038(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.78', width=5)

width < len (16) in center_string(outstring, ' 7.6588(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055246(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.66', width=5)

width < len (16) in center_string(outstring, ' 9.4033(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064454(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937515(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.31', width=5)

width < len (16) in center_string(outstring, ' 9.3758(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940323(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(9.7)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.310 sec, System: 0.000 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM2.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '898.49', width=5)

width < len (9) in center_string(outstring, '403738.12', width=6)

width < len (12) in center_string(outstring, '620490837.33', width=8)

width < len (7) in center_string(outstring, '3203.93', width=6)

width < len (7) in center_string(outstring, '4406.45', width=5)

width < len (16) in center_string(outstring, ' 9.7084(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4405.74', width=5)

width < len (16) in center_string(outstring, ' 9.7053(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4404.96', width=5)

width < len (16) in center_string(outstring, ' 9.7018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043922(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915070(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.10', width=5)

width < len (16) in center_string(outstring, ' 9.6981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4403.17', width=5)

width < len (16) in center_string(outstring, ' 9.6939(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4402.16', width=5)

width < len (16) in center_string(outstring, ' 9.6895(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.07', width=5)

width < len (16) in center_string(outstring, ' 9.6847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102484(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4399.91', width=5)

width < len (16) in center_string(outstring, ' 9.6796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117124(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911133(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(4.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM62.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '438.20', width=5)

width < len (8) in center_string(outstring, '96096.64', width=6)

width < len (12) in center_string(outstring, '591805641.62', width=8)

width < len (7) in center_string(outstring, '2529.96', width=6)

width < len (7) in center_string(outstring, '4366.87', width=5)

width < len (16) in center_string(outstring, ' 9.5348(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.79', width=5)

width < len (16) in center_string(outstring, ' 9.5257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.92', width=5)

width < len (16) in center_string(outstring, ' 9.5132(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3927.71', width=5)

width < len (16) in center_string(outstring, ' 7.7135(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036601(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.95', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045751(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931625(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.86', width=5)

width < len (16) in center_string(outstring, ' 9.4563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.04', width=5)

width < len (16) in center_string(outstring, ' 9.4310(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064052(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.50', width=5)

width < len (16) in center_string(outstring, ' 9.4026(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073202(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.5)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM22.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '381.35', width=5)

width < len (8) in center_string(outstring, '72800.80', width=6)

width < len (12) in center_string(outstring, '563706145.26', width=8)

width < len (7) in center_string(outstring, '2080.79', width=6)

width < len (7) in center_string(outstring, '4372.92', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.058(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.71', width=5)

width < len (16) in center_string(outstring, ' 9.5516(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.71', width=5)

width < len (16) in center_string(outstring, ' 9.5384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027173(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.97', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036231(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.51', width=5)

width < len (16) in center_string(outstring, ' 9.5027(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '3921.04', width=5)

width < len (16) in center_string(outstring, ' 7.6873(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054346(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933197(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '3914.21', width=5)

width < len (16) in center_string(outstring, ' 7.6605(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063404(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935974(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '3906.88', width=5)

width < len (16) in center_string(outstring, ' 7.6318(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072462(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM33.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '699.64', width=5)

width < len (9) in center_string(outstring, '244845.41', width=6)

width < len (12) in center_string(outstring, '597757843.81', width=8)

width < len (7) in center_string(outstring, '3816.88', width=6)

width < len (7) in center_string(outstring, '4389.49', width=5)

width < len (16) in center_string(outstring, ' 9.6338(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253019(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.14', width=5)

width < len (16) in center_string(outstring, ' 9.6235(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.05', width=5)

width < len (16) in center_string(outstring, ' 9.6100(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '3945.15', width=5)

width < len (16) in center_string(outstring, ' 7.7821(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926086(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(17)', width=10)

width < len (7) in center_string(outstring, '4375.88', width=5)

width < len (16) in center_string(outstring, ' 9.5742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4370.79', width=5)

width < len (16) in center_string(outstring, ' 9.5519(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4365.05', width=5)

width < len (16) in center_string(outstring, ' 9.5269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4358.67', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.5)x10^-1', width=10)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.6(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM44.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '742.86', width=5)

width < len (9) in center_string(outstring, '276013.03', width=6)

width < len (12) in center_string(outstring, '598532326.35', width=8)

width < len (7) in center_string(outstring, '2984.95', width=6)

width < len (7) in center_string(outstring, '4394.18', width=5)

width < len (16) in center_string(outstring, ' 9.6544(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.880(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.41', width=5)

width < len (16) in center_string(outstring, ' 9.6423(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.87', width=5)

width < len (16) in center_string(outstring, ' 9.6267(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3947.43', width=5)

width < len (16) in center_string(outstring, ' 7.7911(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035519(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.64', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053279(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934372(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.59', width=5)

width < len (16) in center_string(outstring, ' 9.5336(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062159(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.53', width=5)

width < len (16) in center_string(outstring, ' 9.5028(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM50.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '655.19', width=5)

width < len (9) in center_string(outstring, '214728.69', width=6)

width < len (12) in center_string(outstring, '576701869.24', width=8)

width < len (7) in center_string(outstring, '3544.83', width=6)

width < len (7) in center_string(outstring, '4366.35', width=5)

width < len (16) in center_string(outstring, ' 9.5325(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.23', width=5)

width < len (16) in center_string(outstring, ' 9.5233(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.31', width=5)

width < len (16) in center_string(outstring, ' 9.5105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.63', width=5)

width < len (16) in center_string(outstring, ' 9.4945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3920.42', width=5)

width < len (16) in center_string(outstring, ' 7.6849(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3914.23', width=5)

width < len (16) in center_string(outstring, ' 7.6606(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.12', width=5)

width < len (16) in center_string(outstring, ' 9.4270(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937210(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.49', width=5)

width < len (16) in center_string(outstring, ' 9.3983(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM15.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '586.94', width=5)

width < len (9) in center_string(outstring, '172341.41', width=6)

width < len (12) in center_string(outstring, '589576495.05', width=8)

width < len (7) in center_string(outstring, '1469.39', width=6)

width < len (7) in center_string(outstring, '4357.77', width=5)

width < len (16) in center_string(outstring, ' 9.4951(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.92', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923111(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.28', width=5)

width < len (16) in center_string(outstring, ' 9.4755(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.89', width=5)

width < len (16) in center_string(outstring, ' 9.4608(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.75', width=5)

width < len (16) in center_string(outstring, ' 9.4428(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.88', width=5)

width < len (16) in center_string(outstring, ' 9.4216(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934372(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.36', width=5)

width < len (16) in center_string(outstring, ' 7.6298(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937195(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4328.93', width=5)

width < len (16) in center_string(outstring, ' 9.3698(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM1.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.16', width=5)

width < len (9) in center_string(outstring, '177794.14', width=6)

width < len (12) in center_string(outstring, '604169548.70', width=8)

width < len (7) in center_string(outstring, '1729.61', width=6)

width < len (7) in center_string(outstring, '4356.81', width=5)

width < len (16) in center_string(outstring, ' 9.4909(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.808(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.257222(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.88', width=5)

width < len (16) in center_string(outstring, ' 9.4825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017616(23)', width=12)

width < len (13) in center_string(outstring, ' 0.258714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4352.23', width=5)

width < len (16) in center_string(outstring, ' 9.4710(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026423(23)', width=12)

width < len (13) in center_string(outstring, ' 0.261429(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4348.88', width=5)

width < len (16) in center_string(outstring, ' 9.4564(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035231(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930817(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4344.85', width=5)

width < len (16) in center_string(outstring, ' 9.4389(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4340.13', width=5)

width < len (16) in center_string(outstring, ' 9.4184(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4334.73', width=5)

width < len (16) in center_string(outstring, ' 9.3949(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938950(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4328.66', width=5)

width < len (16) in center_string(outstring, ' 9.3686(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941666(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM6.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.28', width=5)

width < len (9) in center_string(outstring, '393734.19', width=6)

width < len (12) in center_string(outstring, '584396114.05', width=8)

width < len (7) in center_string(outstring, '3198.82', width=6)

width < len (7) in center_string(outstring, '4399.21', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.757(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254093(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.09', width=5)

width < len (16) in center_string(outstring, ' 9.6628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017515(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922241(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.20', width=5)

width < len (16) in center_string(outstring, ' 9.6457(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026272(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4387.61', width=5)

width < len (16) in center_string(outstring, ' 9.6256(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927658(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3943.70', width=5)

width < len (16) in center_string(outstring, ' 7.7764(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043787(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '3936.68', width=5)

width < len (16) in center_string(outstring, ' 7.7487(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052544(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4369.71', width=5)

width < len (16) in center_string(outstring, ' 9.5472(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061302(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4362.39', width=5)

width < len (16) in center_string(outstring, ' 9.5152(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070059(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938461(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM61.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '461.45', width=5)

width < len (9) in center_string(outstring, '106556.55', width=6)

width < len (12) in center_string(outstring, '592267909.93', width=8)

width < len (7) in center_string(outstring, '2700.98', width=6)

width < len (7) in center_string(outstring, '4368.64', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.167(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4366.56', width=5)

width < len (16) in center_string(outstring, ' 9.5334(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.69', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027500(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923996(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.95', width=5)

width < len (16) in center_string(outstring, ' 7.7183(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036667(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4355.70', width=5)

width < len (16) in center_string(outstring, ' 9.4861(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929596(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.59', width=5)

width < len (16) in center_string(outstring, ' 9.4638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932404(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.75', width=5)

width < len (16) in center_string(outstring, ' 9.4384(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.19', width=5)

width < len (16) in center_string(outstring, ' 9.4100(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938019(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM21.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '368.79', width=5)

width < len (8) in center_string(outstring, '68087.65', width=6)

width < len (12) in center_string(outstring, '607793070.40', width=8)

width < len (7) in center_string(outstring, '1978.17', width=6)

width < len (7) in center_string(outstring, '4370.74', width=5)

width < len (16) in center_string(outstring, ' 9.5517(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.66', width=5)

width < len (16) in center_string(outstring, ' 9.5426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018257(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.79', width=5)

width < len (16) in center_string(outstring, ' 9.5301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924591(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.18', width=5)

width < len (16) in center_string(outstring, ' 9.5143(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036514(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.82', width=5)

width < len (16) in center_string(outstring, ' 9.4953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930176(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.74', width=5)

width < len (16) in center_string(outstring, ' 9.4732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.92', width=5)

width < len (16) in center_string(outstring, ' 9.4479(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063900(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4340.39', width=5)

width < len (16) in center_string(outstring, ' 9.4195(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM26.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1019.18', width=5)

width < len (9) in center_string(outstring, '519468.84', width=6)

width < len (12) in center_string(outstring, '587822076.28', width=8)

width < len (7) in center_string(outstring, '3107.85', width=6)

width < len (7) in center_string(outstring, '4412.13', width=5)

width < len (16) in center_string(outstring, ' 9.7334(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253442(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.82', width=5)

width < len (16) in center_string(outstring, ' 9.7188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921387(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.76', width=5)

width < len (16) in center_string(outstring, ' 9.7009(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.02', width=5)

width < len (16) in center_string(outstring, ' 9.6801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3956.86', width=5)

width < len (16) in center_string(outstring, ' 7.8284(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.53', width=5)

width < len (16) in center_string(outstring, ' 9.6296(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.13', width=5)

width < len (16) in center_string(outstring, ' 7.7702(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.42', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(6.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM72.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '374.05', width=5)

width < len (8) in center_string(outstring, '70040.32', width=6)

width < len (12) in center_string(outstring, '593207603.77', width=8)

width < len (7) in center_string(outstring, '2031.29', width=6)

width < len (7) in center_string(outstring, '3946.33', width=5)

width < len (16) in center_string(outstring, ' 7.7868(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.061(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255549(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(17)', width=10)

width < len (7) in center_string(outstring, '4369.52', width=5)

width < len (16) in center_string(outstring, ' 9.5464(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4366.52', width=5)

width < len (16) in center_string(outstring, ' 9.5332(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.78', width=5)

width < len (16) in center_string(outstring, ' 9.5169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.31', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932068(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4353.12', width=5)

width < len (16) in center_string(outstring, ' 9.4748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054367(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.21', width=5)

width < len (16) in center_string(outstring, ' 9.4491(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.60', width=5)

width < len (16) in center_string(outstring, ' 9.4204(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072489(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940399(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM32.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  12%Amount of optimization complete =  25%Amount of optimization complete =  37%Amount of optimization complete =  50%Amount of optimization complete =  62%Amount of optimization complete =  75%Amount of optimization complete =  87%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.88', width=5)

width < len (9) in center_string(outstring, '549126.81', width=6)

width < len (12) in center_string(outstring, '606635984.60', width=8)

width < len (7) in center_string(outstring, '2584.95', width=6)

width < len (7) in center_string(outstring, '4427.39', width=5)

width < len (16) in center_string(outstring, ' 9.8009(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.603(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253771(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.69', width=5)

width < len (16) in center_string(outstring, ' 9.7845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.23', width=5)

width < len (16) in center_string(outstring, ' 9.7648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025810(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.07', width=5)

width < len (16) in center_string(outstring, ' 9.7420(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927231(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.24', width=5)

width < len (16) in center_string(outstring, ' 9.7163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043017(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4401.74', width=5)

width < len (16) in center_string(outstring, ' 9.6876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051620(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932571(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3950.95', width=5)

width < len (16) in center_string(outstring, ' 7.8050(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060223(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4386.74', width=5)

width < len (16) in center_string(outstring, ' 9.6218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068827(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.140 sec (User: 0.140 sec, System: 0.000 sec)
  Total time: 0.150 sec

Final candidates in binary format are in 'Sband_DM83.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.71', width=5)

width < len (9) in center_string(outstring, '246998.58', width=6)

width < len (12) in center_string(outstring, '596867890.78', width=8)

width < len (7) in center_string(outstring, '4053.79', width=6)

width < len (7) in center_string(outstring, '4386.63', width=5)

width < len (16) in center_string(outstring, ' 9.6213(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.977(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4384.18', width=5)

width < len (16) in center_string(outstring, ' 9.6105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3948.72', width=5)

width < len (16) in center_string(outstring, ' 7.7962(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026930(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4376.99', width=5)

width < len (16) in center_string(outstring, ' 9.5790(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035907(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926941(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4372.30', width=5)

width < len (16) in center_string(outstring, ' 9.5585(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044884(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929703(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4366.90', width=5)

width < len (16) in center_string(outstring, ' 9.5349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4360.79', width=5)

width < len (16) in center_string(outstring, ' 9.5082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062838(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4353.98', width=5)

width < len (16) in center_string(outstring, ' 9.4786(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071814(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM43.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '808.49', width=5)

width < len (9) in center_string(outstring, '326925.00', width=6)

width < len (12) in center_string(outstring, '585369869.30', width=8)

width < len (7) in center_string(outstring, '3174.66', width=6)

width < len (7) in center_string(outstring, '4401.36', width=5)

width < len (16) in center_string(outstring, ' 9.6860(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.59', width=5)

width < len (16) in center_string(outstring, ' 9.6738(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3959.79', width=5)

width < len (16) in center_string(outstring, ' 7.8400(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4390.78', width=5)

width < len (16) in center_string(outstring, ' 9.6395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.81', width=5)

width < len (16) in center_string(outstring, ' 9.6177(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932266(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.13', width=5)

width < len (16) in center_string(outstring, ' 9.5928(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.75', width=5)

width < len (16) in center_string(outstring, ' 9.5649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3925.85', width=5)

width < len (16) in center_string(outstring, ' 7.7062(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.940445(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM54.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '657.93', width=5)

width < len (9) in center_string(outstring, '216527.97', width=6)

width < len (12) in center_string(outstring, '591084972.25', width=8)

width < len (7) in center_string(outstring, '3422.73', width=6)

width < len (7) in center_string(outstring, '4365.02', width=5)

width < len (16) in center_string(outstring, ' 9.5267(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.87', width=5)

width < len (16) in center_string(outstring, ' 9.5173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.92', width=5)

width < len (16) in center_string(outstring, ' 9.5045(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.22', width=5)

width < len (16) in center_string(outstring, ' 9.4883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.77', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931335(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.57', width=5)

width < len (16) in center_string(outstring, ' 9.4464(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934158(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.32', width=5)

width < len (16) in center_string(outstring, ' 7.6297(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4333.99', width=5)

width < len (16) in center_string(outstring, ' 9.3918(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM14.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '592.93', width=5)

width < len (9) in center_string(outstring, '175876.52', width=6)

width < len (12) in center_string(outstring, '589032885.96', width=8)

width < len (7) in center_string(outstring, '1694.36', width=6)

width < len (7) in center_string(outstring, '4356.41', width=5)

width < len (16) in center_string(outstring, ' 9.4891(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.37', width=5)

width < len (16) in center_string(outstring, ' 9.4803(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.56', width=5)

width < len (16) in center_string(outstring, ' 9.4680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924362(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.98', width=5)

width < len (16) in center_string(outstring, ' 9.4525(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4343.67', width=5)

width < len (16) in center_string(outstring, ' 9.4337(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3909.81', width=5)

width < len (16) in center_string(outstring, ' 7.6433(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.83', width=5)

width < len (16) in center_string(outstring, ' 9.3867(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.32', width=5)

width < len (16) in center_string(outstring, ' 9.3585(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM5.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '890.41', width=5)

width < len (9) in center_string(outstring, '396513.12', width=6)

width < len (12) in center_string(outstring, '615032733.10', width=8)

width < len (7) in center_string(outstring, '3232.05', width=6)

width < len (7) in center_string(outstring, '4399.90', width=5)

width < len (16) in center_string(outstring, ' 9.6796(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.769(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253475(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.81', width=5)

width < len (16) in center_string(outstring, ' 9.6660(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921631(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.96', width=5)

width < len (16) in center_string(outstring, ' 9.6490(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026308(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4388.40', width=5)

width < len (16) in center_string(outstring, ' 9.6290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.14', width=5)

width < len (16) in center_string(outstring, ' 9.6060(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929749(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4377.20', width=5)

width < len (16) in center_string(outstring, ' 9.5799(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052615(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932449(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4370.58', width=5)

width < len (16) in center_string(outstring, ' 9.5510(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061385(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4363.28', width=5)

width < len (16) in center_string(outstring, ' 9.5191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070154(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM60.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '940.04', width=5)

width < len (9) in center_string(outstring, '441940.59', width=6)

width < len (12) in center_string(outstring, '620901772.13', width=8)

width < len (7) in center_string(outstring, '3221.35', width=6)

width < len (7) in center_string(outstring, '4408.04', width=5)

width < len (16) in center_string(outstring, ' 9.7154(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916611(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4407.30', width=5)

width < len (16) in center_string(outstring, ' 9.7121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915817(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4406.48', width=5)

width < len (16) in center_string(outstring, ' 9.7085(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915039(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.58', width=5)

width < len (16) in center_string(outstring, ' 9.7046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058577(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4404.61', width=5)

width < len (16) in center_string(outstring, ' 9.7003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073221(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4403.56', width=5)

width < len (16) in center_string(outstring, ' 9.6957(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087865(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4402.43', width=5)

width < len (16) in center_string(outstring, ' 9.6907(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911880(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4401.23', width=5)

width < len (16) in center_string(outstring, ' 9.6854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117154(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM65.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '377.27', width=5)

width < len (8) in center_string(outstring, '71251.09', width=6)

width < len (12) in center_string(outstring, '592880340.69', width=8)

width < len (7) in center_string(outstring, '2049.67', width=6)

width < len (7) in center_string(outstring, '3944.03', width=5)

width < len (16) in center_string(outstring, ' 7.7777(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253774(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4368.14', width=5)

width < len (16) in center_string(outstring, ' 9.5403(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.27', width=5)

width < len (16) in center_string(outstring, ' 9.5278(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.65', width=5)

width < len (16) in center_string(outstring, ' 9.5120(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927567(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.30', width=5)

width < len (16) in center_string(outstring, ' 9.4930(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.21', width=5)

width < len (16) in center_string(outstring, ' 9.4709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.40', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.87', width=5)

width < len (16) in center_string(outstring, ' 9.4172(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM25.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1001.42', width=5)

width < len (9) in center_string(outstring, '501518.12', width=6)

width < len (12) in center_string(outstring, '602936162.29', width=8)

width < len (7) in center_string(outstring, '3081.38', width=6)

width < len (7) in center_string(outstring, '4411.59', width=5)

width < len (16) in center_string(outstring, ' 9.7311(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254706(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4408.27', width=5)

width < len (16) in center_string(outstring, ' 9.7164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922653(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3969.34', width=5)

width < len (16) in center_string(outstring, ' 7.8778(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925217(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.44', width=5)

width < len (16) in center_string(outstring, ' 9.6776(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4394.02', width=5)

width < len (16) in center_string(outstring, ' 9.6537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4387.95', width=5)

width < len (16) in center_string(outstring, ' 9.6270(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932877(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4381.21', width=5)

width < len (16) in center_string(outstring, ' 9.5975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4373.84', width=5)

width < len (16) in center_string(outstring, ' 9.5652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM71.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '445.71', width=5)

width < len (8) in center_string(outstring, '99415.75', width=6)

width < len (12) in center_string(outstring, '595641560.25', width=8)

width < len (7) in center_string(outstring, '2584.08', width=6)

width < len (7) in center_string(outstring, '4381.26', width=5)

width < len (16) in center_string(outstring, ' 9.5977(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.035(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3948.40', width=5)

width < len (16) in center_string(outstring, ' 7.7949(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018070(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921722(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4376.02', width=5)

width < len (16) in center_string(outstring, ' 9.5748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.27', width=5)

width < len (16) in center_string(outstring, ' 9.5584(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036140(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.78', width=5)

width < len (16) in center_string(outstring, ' 9.5388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.57', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.65', width=5)

width < len (16) in center_string(outstring, ' 9.4902(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.01', width=5)

width < len (16) in center_string(outstring, ' 9.4613(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938370(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM36.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1048.87', width=5)

width < len (9) in center_string(outstring, '550168.31', width=6)

width < len (12) in center_string(outstring, '606505261.40', width=8)

width < len (7) in center_string(outstring, '2593.46', width=6)

width < len (7) in center_string(outstring, '4426.88', width=5)

width < len (16) in center_string(outstring, ' 9.7986(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.605(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254018(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.17', width=5)

width < len (16) in center_string(outstring, ' 9.7822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4418.69', width=5)

width < len (16) in center_string(outstring, ' 9.7624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4413.52', width=5)

width < len (16) in center_string(outstring, ' 9.7396(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927490(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4407.68', width=5)

width < len (16) in center_string(outstring, ' 9.7138(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4401.16', width=5)

width < len (16) in center_string(outstring, ' 9.6851(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051629(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3951.06', width=5)

width < len (16) in center_string(outstring, ' 7.8054(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060234(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935486(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4386.14', width=5)

width < len (16) in center_string(outstring, ' 9.6191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(6.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM82.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.81', width=5)

width < len (9) in center_string(outstring, '247065.05', width=6)

width < len (12) in center_string(outstring, '611356806.63', width=8)

width < len (7) in center_string(outstring, '4145.70', width=6)

width < len (7) in center_string(outstring, '4384.79', width=5)

width < len (16) in center_string(outstring, ' 9.6132(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.31', width=5)

width < len (16) in center_string(outstring, ' 9.6023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921753(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.05', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924500(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.07', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.36', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930023(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.94', width=5)

width < len (16) in center_string(outstring, ' 9.5264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.81', width=5)

width < len (16) in center_string(outstring, ' 9.4996(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935532(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.98', width=5)

width < len (16) in center_string(outstring, ' 9.4699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM42.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '708.29', width=5)

width < len (9) in center_string(outstring, '250935.27', width=6)

width < len (12) in center_string(outstring, '583032155.75', width=8)

width < len (7) in center_string(outstring, '3293.02', width=6)

width < len (7) in center_string(outstring, '3960.66', width=5)

width < len (16) in center_string(outstring, ' 7.8434(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.908(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255104(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4389.09', width=5)

width < len (16) in center_string(outstring, ' 9.6320(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4385.69', width=5)

width < len (16) in center_string(outstring, ' 9.6171(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026725(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.57', width=5)

width < len (16) in center_string(outstring, ' 9.5991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.73', width=5)

width < len (16) in center_string(outstring, ' 9.5779(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044542(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931488(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.19', width=5)

width < len (16) in center_string(outstring, ' 9.5536(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4364.94', width=5)

width < len (16) in center_string(outstring, ' 9.5264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3917.81', width=5)

width < len (16) in center_string(outstring, ' 7.6746(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939713(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM47.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '804.51', width=5)

width < len (9) in center_string(outstring, '323714.06', width=6)

width < len (12) in center_string(outstring, '600187918.40', width=8)

width < len (7) in center_string(outstring, '3101.39', width=6)

width < len (7) in center_string(outstring, '4400.65', width=5)

width < len (16) in center_string(outstring, ' 9.6829(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.85', width=5)

width < len (16) in center_string(outstring, ' 9.6706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.27', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4389.98', width=5)

width < len (16) in center_string(outstring, ' 9.6360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928543(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4384.97', width=5)

width < len (16) in center_string(outstring, ' 9.6140(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3940.09', width=5)

width < len (16) in center_string(outstring, ' 7.7622(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4372.85', width=5)

width < len (16) in center_string(outstring, ' 9.5609(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4365.76', width=5)

width < len (16) in center_string(outstring, ' 9.5299(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM53.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '587.87', width=5)

width < len (9) in center_string(outstring, '172885.19', width=6)

width < len (12) in center_string(outstring, '606442847.30', width=8)

width < len (7) in center_string(outstring, '3587.39', width=6)

width < len (7) in center_string(outstring, '4366.08', width=5)

width < len (16) in center_string(outstring, ' 9.5313(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.96', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.05', width=5)

width < len (16) in center_string(outstring, ' 9.5094(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.38', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927429(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.97', width=5)

width < len (16) in center_string(outstring, ' 9.4742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930252(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4347.81', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.92', width=5)

width < len (16) in center_string(outstring, ' 9.4262(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.31', width=5)

width < len (16) in center_string(outstring, ' 9.3975(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938690(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(4.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM18.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.91', width=5)

width < len (9) in center_string(outstring, '178243.72', width=6)

width < len (12) in center_string(outstring, '589524822.14', width=8)

width < len (7) in center_string(outstring, '1648.73', width=6)

width < len (7) in center_string(outstring, '4356.50', width=5)

width < len (16) in center_string(outstring, ' 9.4896(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.671(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.67', width=5)

width < len (16) in center_string(outstring, ' 9.4816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017343(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3927.23', width=5)

width < len (16) in center_string(outstring, ' 7.7116(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026014(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926819(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(18)', width=10)

width < len (7) in center_string(outstring, '4348.90', width=5)

width < len (16) in center_string(outstring, ' 9.4565(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929504(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4345.00', width=5)

width < len (16) in center_string(outstring, ' 9.4395(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4340.44', width=5)

width < len (16) in center_string(outstring, ' 9.4197(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934875(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4335.22', width=5)

width < len (16) in center_string(outstring, ' 9.3971(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937546(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '4329.34', width=5)

width < len (16) in center_string(outstring, ' 9.3716(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069371(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.4)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM4.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.43', width=5)

width < len (9) in center_string(outstring, '433878.12', width=6)

width < len (12) in center_string(outstring, '601284926.33', width=8)

width < len (7) in center_string(outstring, '3218.23', width=6)

width < len (7) in center_string(outstring, '4405.85', width=5)

width < len (16) in center_string(outstring, ' 9.7058(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.70', width=5)

width < len (16) in center_string(outstring, ' 9.6919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921219(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.81', width=5)

width < len (16) in center_string(outstring, ' 9.6748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.24', width=5)

width < len (16) in center_string(outstring, ' 9.6547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.00', width=5)

width < len (16) in center_string(outstring, ' 9.6317(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3941.56', width=5)

width < len (16) in center_string(outstring, ' 7.7680(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4376.55', width=5)

width < len (16) in center_string(outstring, ' 9.5771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.35', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM64.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '617.20', width=5)

width < len (9) in center_string(outstring, '190563.45', width=6)

width < len (12) in center_string(outstring, '574987512.13', width=8)

width < len (7) in center_string(outstring, '2149.96', width=6)

width < len (7) in center_string(outstring, '4359.09', width=5)

width < len (16) in center_string(outstring, ' 9.5009(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.95', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.02', width=5)

width < len (16) in center_string(outstring, ' 9.4787(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926147(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.33', width=5)

width < len (16) in center_string(outstring, ' 9.4627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928955(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.98', width=5)

width < len (16) in center_string(outstring, ' 7.6714(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931778(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(18)', width=10)

width < len (7) in center_string(outstring, '3910.85', width=5)

width < len (16) in center_string(outstring, ' 7.6474(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4334.83', width=5)

width < len (16) in center_string(outstring, ' 9.3954(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4328.21', width=5)

width < len (16) in center_string(outstring, ' 9.3667(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM9.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '388.36', width=5)

width < len (8) in center_string(outstring, '75496.34', width=6)

width < len (12) in center_string(outstring, '607390712.19', width=8)

width < len (7) in center_string(outstring, '2137.93', width=6)

width < len (7) in center_string(outstring, '4369.29', width=5)

width < len (16) in center_string(outstring, ' 9.5453(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.136(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252742(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.21', width=5)

width < len (16) in center_string(outstring, ' 9.5363(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018272(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.35', width=5)

width < len (16) in center_string(outstring, ' 9.5238(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027408(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.74', width=5)

width < len (16) in center_string(outstring, ' 9.5080(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036544(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.38', width=5)

width < len (16) in center_string(outstring, ' 9.4890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045680(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929321(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.30', width=5)

width < len (16) in center_string(outstring, ' 9.4669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.48', width=5)

width < len (16) in center_string(outstring, ' 9.4416(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063953(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.95', width=5)

width < len (16) in center_string(outstring, ' 9.4133(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073089(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM24.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '352.30', width=5)

width < len (8) in center_string(outstring, '62143.64', width=6)

width < len (12) in center_string(outstring, '593261745.99', width=8)

width < len (7) in center_string(outstring, '1855.42', width=6)

width < len (7) in center_string(outstring, '4370.87', width=5)

width < len (16) in center_string(outstring, ' 9.5523(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.98', width=5)

width < len (16) in center_string(outstring, ' 7.7696(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257766(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4366.16', width=5)

width < len (16) in center_string(outstring, ' 9.5317(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4362.78', width=5)

width < len (16) in center_string(outstring, ' 9.5169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4358.74', width=5)

width < len (16) in center_string(outstring, ' 9.4993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4354.04', width=5)

width < len (16) in center_string(outstring, ' 9.4788(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4348.68', width=5)

width < len (16) in center_string(outstring, ' 9.4555(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4342.69', width=5)

width < len (16) in center_string(outstring, ' 9.4295(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM29.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1027.19', width=5)

width < len (9) in center_string(outstring, '527661.62', width=6)

width < len (12) in center_string(outstring, '604230195.11', width=8)

width < len (7) in center_string(outstring, '2945.57', width=6)

width < len (7) in center_string(outstring, '4419.51', width=5)

width < len (16) in center_string(outstring, ' 9.7660(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255688(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4415.70', width=5)

width < len (16) in center_string(outstring, ' 9.7492(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923889(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.04', width=5)

width < len (16) in center_string(outstring, ' 9.7287(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4405.61', width=5)

width < len (16) in center_string(outstring, ' 9.7047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.42', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.48', width=5)

width < len (16) in center_string(outstring, ' 7.8032(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4384.78', width=5)

width < len (16) in center_string(outstring, ' 9.6132(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4376.36', width=5)

width < len (16) in center_string(outstring, ' 9.5763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM75.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '429.40', width=5)

width < len (8) in center_string(outstring, '92278.96', width=6)

width < len (12) in center_string(outstring, '595631787.27', width=8)

width < len (7) in center_string(outstring, '2437.22', width=6)

width < len (7) in center_string(outstring, '4381.85', width=5)

width < len (16) in center_string(outstring, ' 9.6003(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.056(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4379.60', width=5)

width < len (16) in center_string(outstring, ' 9.5904(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.55', width=5)

width < len (16) in center_string(outstring, ' 9.5771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027168(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3937.98', width=5)

width < len (16) in center_string(outstring, ' 7.7539(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036224(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4368.26', width=5)

width < len (16) in center_string(outstring, ' 9.5408(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4363.01', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054336(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933701(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.05', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.38', width=5)

width < len (16) in center_string(outstring, ' 9.4629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM35.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1041.85', width=5)

width < len (9) in center_string(outstring, '542822.31', width=6)

width < len (12) in center_string(outstring, '606429315.67', width=8)

width < len (7) in center_string(outstring, '2583.04', width=6)

width < len (7) in center_string(outstring, '4426.04', width=5)

width < len (16) in center_string(outstring, ' 9.7949(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.610(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253906(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4422.34', width=5)

width < len (16) in center_string(outstring, ' 9.7786(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017220(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3979.03', width=5)

width < len (16) in center_string(outstring, ' 7.9163(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025830(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4412.74', width=5)

width < len (16) in center_string(outstring, ' 9.7361(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4406.91', width=5)

width < len (16) in center_string(outstring, ' 9.7104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4400.40', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4393.24', width=5)

width < len (16) in center_string(outstring, ' 9.6503(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4385.41', width=5)

width < len (16) in center_string(outstring, ' 9.6159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.8(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM81.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '711.60', width=5)

width < len (9) in center_string(outstring, '253284.03', width=6)

width < len (12) in center_string(outstring, '598093943.91', width=8)

width < len (7) in center_string(outstring, '3426.89', width=6)

width < len (7) in center_string(outstring, '4391.71', width=5)

width < len (16) in center_string(outstring, ' 9.6436(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.915(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255537(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3955.91', width=5)

width < len (16) in center_string(outstring, ' 7.8246(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017830(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4385.71', width=5)

width < len (16) in center_string(outstring, ' 9.6172(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026745(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.59', width=5)

width < len (16) in center_string(outstring, ' 9.5992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929184(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.76', width=5)

width < len (16) in center_string(outstring, ' 9.5780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044575(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.22', width=5)

width < len (16) in center_string(outstring, ' 9.5538(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.98', width=5)

width < len (16) in center_string(outstring, ' 9.5266(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.05', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^4', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM46.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '842.92', width=5)

width < len (9) in center_string(outstring, '355351.22', width=6)

width < len (12) in center_string(outstring, '568550363.45', width=8)

width < len (7) in center_string(outstring, '3129.29', width=6)

width < len (7) in center_string(outstring, '3962.94', width=5)

width < len (16) in center_string(outstring, ' 7.8525(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.800(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253717(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4390.86', width=5)

width < len (16) in center_string(outstring, ' 9.6399(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017600(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.11', width=5)

width < len (16) in center_string(outstring, ' 9.6234(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026400(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924591(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.80', width=5)

width < len (16) in center_string(outstring, ' 7.7886(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035200(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.51', width=5)

width < len (16) in center_string(outstring, ' 9.5813(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4371.66', width=5)

width < len (16) in center_string(outstring, ' 9.5557(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052799(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932724(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3926.08', width=5)

width < len (16) in center_string(outstring, ' 7.7071(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061599(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(18)', width=10)

width < len (7) in center_string(outstring, '4357.94', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938156(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM57.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.58', width=5)

width < len (9) in center_string(outstring, '184060.67', width=6)

width < len (12) in center_string(outstring, '591565759.62', width=8)

width < len (7) in center_string(outstring, '3636.26', width=6)

width < len (7) in center_string(outstring, '4365.83', width=5)

width < len (16) in center_string(outstring, ' 9.5302(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3935.90', width=5)

width < len (16) in center_string(outstring, ' 7.7457(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4360.80', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.14', width=5)

width < len (16) in center_string(outstring, ' 9.4923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.72', width=5)

width < len (16) in center_string(outstring, ' 9.4731(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.56', width=5)

width < len (16) in center_string(outstring, ' 9.4507(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.67', width=5)

width < len (16) in center_string(outstring, ' 9.4251(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064476(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.05', width=5)

width < len (16) in center_string(outstring, ' 9.3964(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073687(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM17.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '610.03', width=5)

width < len (9) in center_string(outstring, '186162.58', width=6)

width < len (12) in center_string(outstring, '574691280.13', width=8)

width < len (7) in center_string(outstring, '2012.21', width=6)

width < len (7) in center_string(outstring, '4357.49', width=5)

width < len (16) in center_string(outstring, ' 9.4939(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.216(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.40', width=5)

width < len (16) in center_string(outstring, ' 9.4847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920929(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '3926.93', width=5)

width < len (16) in center_string(outstring, ' 7.7104(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027647(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(18)', width=10)

width < len (7) in center_string(outstring, '4348.87', width=5)

width < len (16) in center_string(outstring, ' 9.4563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.49', width=5)

width < len (16) in center_string(outstring, ' 9.4373(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929367(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.36', width=5)

width < len (16) in center_string(outstring, ' 9.4150(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4333.51', width=5)

width < len (16) in center_string(outstring, ' 9.3897(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3896.49', width=5)

width < len (16) in center_string(outstring, ' 7.5913(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937820(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '-0.2(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM8.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '922.67', width=5)

width < len (9) in center_string(outstring, '425756.09', width=6)

width < len (12) in center_string(outstring, '601275803.72', width=8)

width < len (7) in center_string(outstring, '3207.97', width=6)

width < len (7) in center_string(outstring, '4405.85', width=5)

width < len (16) in center_string(outstring, ' 9.7058(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.748(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254122(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.65', width=5)

width < len (16) in center_string(outstring, ' 9.6917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017496(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922272(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.68', width=5)

width < len (16) in center_string(outstring, ' 9.6742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3955.13', width=5)

width < len (16) in center_string(outstring, ' 7.8215(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034992(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4388.64', width=5)

width < len (16) in center_string(outstring, ' 9.6301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043740(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4382.58', width=5)

width < len (16) in center_string(outstring, ' 9.6035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052488(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933075(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.85', width=5)

width < len (16) in center_string(outstring, ' 9.5740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.44', width=5)

width < len (16) in center_string(outstring, ' 9.5417(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM63.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.90', width=5)

width < len (9) in center_string(outstring, '493020.88', width=6)

width < len (12) in center_string(outstring, '617222212.85', width=8)

width < len (7) in center_string(outstring, '3303.57', width=6)

width < len (7) in center_string(outstring, '4408.64', width=5)

width < len (16) in center_string(outstring, ' 9.7181(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254751(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.27', width=5)

width < len (16) in center_string(outstring, ' 9.7032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4401.14', width=5)

width < len (16) in center_string(outstring, ' 9.6850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4396.31', width=5)

width < len (16) in center_string(outstring, ' 9.6638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928284(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4390.80', width=5)

width < len (16) in center_string(outstring, ' 9.6395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4384.59', width=5)

width < len (16) in center_string(outstring, ' 9.6123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4377.72', width=5)

width < len (16) in center_string(outstring, ' 9.5822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.17', width=5)

width < len (16) in center_string(outstring, ' 9.5492(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM68.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.81', width=5)

width < len (8) in center_string(outstring, '61968.08', width=6)

width < len (12) in center_string(outstring, '592850927.20', width=8)

width < len (7) in center_string(outstring, '1847.72', width=6)

width < len (7) in center_string(outstring, '3945.20', width=5)

width < len (16) in center_string(outstring, ' 7.7823(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253929(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4368.13', width=5)

width < len (16) in center_string(outstring, ' 9.5403(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.16', width=5)

width < len (16) in center_string(outstring, ' 9.5273(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.45', width=5)

width < len (16) in center_string(outstring, ' 9.5111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.00', width=5)

width < len (16) in center_string(outstring, ' 9.4917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4351.83', width=5)

width < len (16) in center_string(outstring, ' 9.4692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.93', width=5)

width < len (16) in center_string(outstring, ' 9.4436(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.32', width=5)

width < len (16) in center_string(outstring, ' 9.4149(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938858(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.400 sec, System: 0.000 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM28.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1013.23', width=5)

width < len (9) in center_string(outstring, '513415.06', width=6)

width < len (12) in center_string(outstring, '602870745.47', width=8)

width < len (7) in center_string(outstring, '2923.35', width=6)

width < len (7) in center_string(outstring, '4414.14', width=5)

width < len (16) in center_string(outstring, ' 9.7423(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254261(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4410.39', width=5)

width < len (16) in center_string(outstring, ' 9.7258(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922470(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4405.79', width=5)

width < len (16) in center_string(outstring, ' 9.7055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4400.41', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928101(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4394.28', width=5)

width < len (16) in center_string(outstring, ' 9.6549(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3947.59', width=5)

width < len (16) in center_string(outstring, ' 7.7917(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4379.77', width=5)

width < len (16) in center_string(outstring, ' 9.5912(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4371.41', width=5)

width < len (16) in center_string(outstring, ' 9.5546(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.140 sec (User: 0.140 sec, System: 0.000 sec)
  Total time: 0.140 sec

Final candidates in binary format are in 'Sband_DM74.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '572.89', width=5)

width < len (9) in center_string(outstring, '164194.08', width=6)

width < len (12) in center_string(outstring, '580737304.79', width=8)

width < len (7) in center_string(outstring, '3652.51', width=6)

width < len (7) in center_string(outstring, '4382.71', width=5)

width < len (16) in center_string(outstring, ' 9.6041(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.949(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4380.36', width=5)

width < len (16) in center_string(outstring, ' 9.5938(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017899(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919418(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.23', width=5)

width < len (16) in center_string(outstring, ' 9.5801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.37', width=5)

width < len (16) in center_string(outstring, ' 9.5632(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035797(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '3932.89', width=5)

width < len (16) in center_string(outstring, ' 7.7338(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044746(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4363.50', width=5)

width < len (16) in center_string(outstring, ' 9.5201(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053696(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3919.54', width=5)

width < len (16) in center_string(outstring, ' 7.6814(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062645(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4350.80', width=5)

width < len (16) in center_string(outstring, ' 9.4647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071594(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM39.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.54', width=5)

width < len (9) in center_string(outstring, '248989.77', width=6)

width < len (12) in center_string(outstring, '597574216.17', width=8)

width < len (7) in center_string(outstring, '3455.52', width=6)

width < len (7) in center_string(outstring, '4390.49', width=5)

width < len (16) in center_string(outstring, ' 9.6382(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.926(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.92', width=5)

width < len (16) in center_string(outstring, ' 9.6269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017851(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.58', width=5)

width < len (16) in center_string(outstring, ' 9.6123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026777(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925552(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.51', width=5)

width < len (16) in center_string(outstring, ' 9.5944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035703(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.72', width=5)

width < len (16) in center_string(outstring, ' 9.5735(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931030(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4370.22', width=5)

width < len (16) in center_string(outstring, ' 9.5494(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053554(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.02', width=5)

width < len (16) in center_string(outstring, ' 9.5223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062479(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3917.46', width=5)

width < len (16) in center_string(outstring, ' 7.6732(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071405(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939270(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM45.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '830.25', width=5)

width < len (9) in center_string(outstring, '344757.72', width=6)

width < len (12) in center_string(outstring, '585728392.20', width=8)

width < len (7) in center_string(outstring, '3108.99', width=6)

width < len (7) in center_string(outstring, '4403.36', width=5)

width < len (16) in center_string(outstring, ' 9.6948(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.821(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255663(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.42', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3960.58', width=5)

width < len (16) in center_string(outstring, ' 7.8431(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026463(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926544(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4392.27', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035284(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929260(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.13', width=5)

width < len (16) in center_string(outstring, ' 9.6235(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931976(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.29', width=5)

width < len (16) in center_string(outstring, ' 9.5979(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052926(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.94', width=5)

width < len (16) in center_string(outstring, ' 7.7379(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061747(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937424(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4367.56', width=5)

width < len (16) in center_string(outstring, ' 9.5378(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM56.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.97', width=5)

width < len (9) in center_string(outstring, '182481.47', width=6)

width < len (12) in center_string(outstring, '574535094.11', width=8)

width < len (7) in center_string(outstring, '1925.82', width=6)

width < len (7) in center_string(outstring, '4357.34', width=5)

width < len (16) in center_string(outstring, ' 9.4932(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255543(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.20', width=5)

width < len (16) in center_string(outstring, ' 9.4839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.27', width=5)

width < len (16) in center_string(outstring, ' 9.4711(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.59', width=5)

width < len (16) in center_string(outstring, ' 9.4551(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929382(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3915.53', width=5)

width < len (16) in center_string(outstring, ' 7.6657(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(18)', width=10)

width < len (7) in center_string(outstring, '3909.41', width=5)

width < len (16) in center_string(outstring, ' 7.6417(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935013(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4333.11', width=5)

width < len (16) in center_string(outstring, ' 9.3879(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937836(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.49', width=5)

width < len (16) in center_string(outstring, ' 9.3593(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940643(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM7.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 38 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.92', width=5)

width < len (9) in center_string(outstring, '493045.28', width=6)

width < len (12) in center_string(outstring, '602249219.91', width=8)

width < len (7) in center_string(outstring, '3349.06', width=6)

width < len (7) in center_string(outstring, '4408.00', width=5)

width < len (16) in center_string(outstring, ' 9.7152(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253011(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3970.62', width=5)

width < len (16) in center_string(outstring, ' 7.8829(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.920898(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4401.03', width=5)

width < len (16) in center_string(outstring, ' 9.6845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4396.58', width=5)

width < len (16) in center_string(outstring, ' 9.6650(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4391.52', width=5)

width < len (16) in center_string(outstring, ' 9.6427(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928253(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4385.85', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4379.58', width=5)

width < len (16) in center_string(outstring, ' 9.5903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4372.71', width=5)

width < len (16) in center_string(outstring, ' 9.5603(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935608(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM67.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.35', width=5)

width < len (8) in center_string(outstring, '61806.75', width=6)

width < len (12) in center_string(outstring, '592551449.21', width=8)

width < len (7) in center_string(outstring, '1850.49', width=6)

width < len (7) in center_string(outstring, '4370.16', width=5)

width < len (16) in center_string(outstring, ' 9.5492(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.117(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.00', width=5)

width < len (16) in center_string(outstring, ' 9.5397(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018233(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.06', width=5)

width < len (16) in center_string(outstring, ' 9.5269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.36', width=5)

width < len (16) in center_string(outstring, ' 9.5107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927795(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.93', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930588(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4351.77', width=5)

width < len (16) in center_string(outstring, ' 9.4690(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054699(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.74', width=5)

width < len (16) in center_string(outstring, ' 7.6548(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063816(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936172(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.29', width=5)

width < len (16) in center_string(outstring, ' 9.4147(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM27.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1037.26', width=5)

width < len (9) in center_string(outstring, '538052.56', width=6)

width < len (12) in center_string(outstring, '605601711.68', width=8)

width < len (7) in center_string(outstring, '2799.89', width=6)

width < len (7) in center_string(outstring, '4422.90', width=5)

width < len (16) in center_string(outstring, ' 9.7810(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253308(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4419.34', width=5)

width < len (16) in center_string(outstring, ' 9.7653(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921249(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4415.03', width=5)

width < len (16) in center_string(outstring, ' 9.7462(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4410.03', width=5)

width < len (16) in center_string(outstring, ' 9.7242(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4404.36', width=5)

width < len (16) in center_string(outstring, ' 9.6992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928940(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3956.27', width=5)

width < len (16) in center_string(outstring, ' 7.8260(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4391.03', width=5)

width < len (16) in center_string(outstring, ' 9.6406(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4383.39', width=5)

width < len (16) in center_string(outstring, ' 9.6070(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM78.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '541.31', width=5)

width < len (9) in center_string(outstring, '146599.66', width=6)

width < len (12) in center_string(outstring, '595345221.25', width=8)

width < len (7) in center_string(outstring, '3474.39', width=6)

width < len (7) in center_string(outstring, '4381.44', width=5)

width < len (16) in center_string(outstring, ' 9.5985(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.009(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.06', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018018(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920761(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.89', width=5)

width < len (16) in center_string(outstring, ' 9.5742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4371.99', width=5)

width < len (16) in center_string(outstring, ' 9.5572(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036036(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926285(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.37', width=5)

width < len (16) in center_string(outstring, ' 9.5369(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045044(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3925.45', width=5)

width < len (16) in center_string(outstring, ' 7.7046(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054053(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931824(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4355.96', width=5)

width < len (16) in center_string(outstring, ' 9.4872(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063062(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934586(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.20', width=5)

width < len (16) in center_string(outstring, ' 9.4578(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM38.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '735.22', width=5)

width < len (9) in center_string(outstring, '270369.19', width=6)

width < len (12) in center_string(outstring, '598578890.86', width=8)

width < len (7) in center_string(outstring, '3052.36', width=6)

width < len (7) in center_string(outstring, '4393.07', width=5)

width < len (16) in center_string(outstring, ' 9.6495(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253349(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4390.53', width=5)

width < len (16) in center_string(outstring, ' 9.6384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.63', width=5)

width < len (16) in center_string(outstring, ' 7.8116(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4383.30', width=5)

width < len (16) in center_string(outstring, ' 9.6067(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4378.68', width=5)

width < len (16) in center_string(outstring, ' 9.5864(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4373.40', width=5)

width < len (16) in center_string(outstring, ' 9.5633(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.46', width=5)

width < len (16) in center_string(outstring, ' 9.5374(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '4360.88', width=5)

width < len (16) in center_string(outstring, ' 9.5086(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM49.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '974.50', width=5)

width < len (9) in center_string(outstring, '474923.12', width=6)

width < len (12) in center_string(outstring, '601631095.50', width=8)

width < len (7) in center_string(outstring, '3287.42', width=6)

width < len (7) in center_string(outstring, '4407.93', width=5)

width < len (16) in center_string(outstring, ' 9.7149(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254393(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4404.56', width=5)

width < len (16) in center_string(outstring, ' 9.7001(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4400.42', width=5)

width < len (16) in center_string(outstring, ' 9.6819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4395.59', width=5)

width < len (16) in center_string(outstring, ' 9.6606(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.06', width=5)

width < len (16) in center_string(outstring, ' 9.6363(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4383.85', width=5)

width < len (16) in center_string(outstring, ' 9.6091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3936.23', width=5)

width < len (16) in center_string(outstring, ' 7.7470(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4369.41', width=5)

width < len (16) in center_string(outstring, ' 9.5459(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM66.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1033.76', width=5)

width < len (9) in center_string(outstring, '534432.94', width=6)

width < len (12) in center_string(outstring, '605702855.87', width=8)

width < len (7) in center_string(outstring, '2803.48', width=6)

width < len (7) in center_string(outstring, '3987.47', width=5)

width < len (16) in center_string(outstring, ' 7.9500(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.212(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256205(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4418.73', width=5)

width < len (16) in center_string(outstring, ' 9.7626(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924149(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4414.45', width=5)

width < len (16) in center_string(outstring, ' 9.7437(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4409.50', width=5)

width < len (16) in center_string(outstring, ' 9.7218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929276(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4403.87', width=5)

width < len (16) in center_string(outstring, ' 9.6970(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046059(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931839(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4397.58', width=5)

width < len (16) in center_string(outstring, ' 9.6693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055271(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4390.63', width=5)

width < len (16) in center_string(outstring, ' 9.6388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4383.03', width=5)

width < len (16) in center_string(outstring, ' 9.6055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073695(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM77.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '725.24', width=5)

width < len (9) in center_string(outstring, '263084.59', width=6)

width < len (12) in center_string(outstring, '613378942.82', width=8)

width < len (7) in center_string(outstring, '3075.20', width=6)

width < len (7) in center_string(outstring, '4392.59', width=5)

width < len (16) in center_string(outstring, ' 9.6474(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.902(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.94', width=5)

width < len (16) in center_string(outstring, ' 9.6358(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017804(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.51', width=5)

width < len (16) in center_string(outstring, ' 9.6207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026706(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.35', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035608(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.49', width=5)

width < len (16) in center_string(outstring, ' 9.5812(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.91', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933289(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.63', width=5)

width < len (16) in center_string(outstring, ' 9.5294(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.67', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071216(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM48.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '884.23', width=5)

width < len (9) in center_string(outstring, '391032.09', width=6)

width < len (12) in center_string(outstring, '599093650.91', width=8)

width < len (7) in center_string(outstring, '3255.99', width=6)

width < len (7) in center_string(outstring, '4397.20', width=5)

width < len (16) in center_string(outstring, ' 9.6677(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.776(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254963(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.15', width=5)

width < len (16) in center_string(outstring, ' 9.6543(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4390.32', width=5)

width < len (16) in center_string(outstring, ' 9.6375(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026327(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925827(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3949.05', width=5)

width < len (16) in center_string(outstring, ' 7.7975(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035103(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928543(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4380.57', width=5)

width < len (16) in center_string(outstring, ' 9.5947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.66', width=5)

width < len (16) in center_string(outstring, ' 9.5688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4368.07', width=5)

width < len (16) in center_string(outstring, ' 9.5400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4360.80', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM59.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '986.41', width=5)

width < len (9) in center_string(outstring, '486598.78', width=6)

width < len (12) in center_string(outstring, '618073982.41', width=8)

width < len (7) in center_string(outstring, '3109.37', width=6)

width < len (7) in center_string(outstring, '4411.91', width=5)

width < len (16) in center_string(outstring, ' 9.7325(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.691(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253435(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.47', width=5)

width < len (16) in center_string(outstring, ' 9.7173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017381(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921585(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.27', width=5)

width < len (16) in center_string(outstring, ' 9.6988(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4399.37', width=5)

width < len (16) in center_string(outstring, ' 9.6772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034762(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926956(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4393.78', width=5)

width < len (16) in center_string(outstring, ' 9.6527(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043453(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929642(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4387.52', width=5)

width < len (16) in center_string(outstring, ' 9.6252(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052143(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4380.58', width=5)

width < len (16) in center_string(outstring, ' 9.5947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060834(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935013(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.98', width=5)

width < len (16) in center_string(outstring, ' 9.5615(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937698(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM69.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '634.53', width=5)

width < len (9) in center_string(outstring, '201404.17', width=6)

width < len (12) in center_string(outstring, '590185445.90', width=8)

width < len (7) in center_string(outstring, '2354.29', width=6)

width < len (7) in center_string(outstring, '4361.07', width=5)

width < len (16) in center_string(outstring, ' 9.5095(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.94', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.01', width=5)

width < len (16) in center_string(outstring, ' 9.4874(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4352.33', width=5)

width < len (16) in center_string(outstring, ' 9.4714(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4347.90', width=5)

width < len (16) in center_string(outstring, ' 9.4521(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.23', width=5)

width < len (16) in center_string(outstring, ' 7.6567(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.83', width=5)

width < len (16) in center_string(outstring, ' 9.4041(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936386(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4330.21', width=5)

width < len (16) in center_string(outstring, ' 9.3754(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM10.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '590.16', width=5)

width < len (9) in center_string(outstring, '174236.91', width=6)

width < len (12) in center_string(outstring, '589801861.66', width=8)

width < len (7) in center_string(outstring, '1442.31', width=6)

width < len (7) in center_string(outstring, '4358.37', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253288(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.54', width=5)

width < len (16) in center_string(outstring, ' 9.4897(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921494(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.93', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924301(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.57', width=5)

width < len (16) in center_string(outstring, ' 9.4637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.46', width=5)

width < len (16) in center_string(outstring, ' 9.4458(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.60', width=5)

width < len (16) in center_string(outstring, ' 9.4248(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.17', width=5)

width < len (16) in center_string(outstring, ' 7.6369(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.70', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM0.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '527.33', width=5)

width < len (9) in center_string(outstring, '139130.66', width=6)

width < len (12) in center_string(outstring, '606787897.71', width=8)

width < len (7) in center_string(outstring, '3299.88', width=6)

width < len (7) in center_string(outstring, '4367.23', width=5)

width < len (16) in center_string(outstring, ' 9.5364(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.185(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.14', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.25', width=5)

width < len (16) in center_string(outstring, ' 9.5146(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027554(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.61', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036739(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929703(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.22', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045924(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.09', width=5)

width < len (16) in center_string(outstring, ' 9.4573(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055109(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.23', width=5)

width < len (16) in center_string(outstring, ' 9.4318(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.65', width=5)

width < len (16) in center_string(outstring, ' 9.4033(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940933(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM20.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   3%Amount of optimization complete =   7%Amount of optimization complete =  11%Amount of optimization complete =  15%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  46%Amount of optimization complete =  50%Amount of optimization complete =  53%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  84%Amount of optimization complete =  88%Amount of optimization complete =  92%Amount of optimization complete =  96%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '361.36', width=5)

width < len (8) in center_string(outstring, '65375.98', width=6)

width < len (12) in center_string(outstring, '593169577.57', width=8)

width < len (7) in center_string(outstring, '1926.17', width=6)

width < len (7) in center_string(outstring, '4371.80', width=5)

width < len (16) in center_string(outstring, ' 9.5563(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.080(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4369.64', width=5)

width < len (16) in center_string(outstring, ' 9.5469(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921310(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3938.30', width=5)

width < len (16) in center_string(outstring, ' 7.7551(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027240(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924103(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4363.00', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926880(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.57', width=5)

width < len (16) in center_string(outstring, ' 9.4986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929672(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.42', width=5)

width < len (16) in center_string(outstring, ' 9.4762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932449(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.56', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.98', width=5)

width < len (16) in center_string(outstring, ' 9.4221(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938019(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.380 sec, System: 0.000 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM31.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '659.82', width=5)

width < len (9) in center_string(outstring, '217778.25', width=6)

width < len (12) in center_string(outstring, '590719153.14', width=8)

width < len (7) in center_string(outstring, '3073.29', width=6)

width < len (7) in center_string(outstring, '4363.35', width=5)

width < len (16) in center_string(outstring, ' 9.5194(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253907(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.15', width=5)

width < len (16) in center_string(outstring, ' 9.5098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.15', width=5)

width < len (16) in center_string(outstring, ' 9.4967(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.20', width=5)

width < len (16) in center_string(outstring, ' 7.6997(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927734(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4349.89', width=5)

width < len (16) in center_string(outstring, ' 9.4608(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.65', width=5)

width < len (16) in center_string(outstring, ' 9.4380(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933365(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.68', width=5)

width < len (16) in center_string(outstring, ' 9.4121(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.98', width=5)

width < len (16) in center_string(outstring, ' 9.3830(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM13.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '990.67', width=5)

width < len (9) in center_string(outstring, '490809.31', width=6)

width < len (12) in center_string(outstring, '602861152.24', width=8)

width < len (7) in center_string(outstring, '3128.67', width=6)

width < len (7) in center_string(outstring, '4410.45', width=5)

width < len (16) in center_string(outstring, ' 9.7260(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252017(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3972.74', width=5)

width < len (16) in center_string(outstring, ' 7.8913(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.919907(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4403.36', width=5)

width < len (16) in center_string(outstring, ' 9.6948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4398.85', width=5)

width < len (16) in center_string(outstring, ' 9.6749(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4393.72', width=5)

width < len (16) in center_string(outstring, ' 9.6524(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4387.99', width=5)

width < len (16) in center_string(outstring, ' 9.6272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4381.66', width=5)

width < len (16) in center_string(outstring, ' 9.5995(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932159(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4374.73', width=5)

width < len (16) in center_string(outstring, ' 9.5691(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM70.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  12%Amount of optimization complete =  16%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  29%Amount of optimization complete =  33%Amount of optimization complete =  37%Amount of optimization complete =  41%Amount of optimization complete =  45%Amount of optimization complete =  50%Amount of optimization complete =  54%Amount of optimization complete =  58%Amount of optimization complete =  62%Amount of optimization complete =  66%Amount of optimization complete =  70%Amount of optimization complete =  75%Amount of optimization complete =  79%Amount of optimization complete =  83%Amount of optimization complete =  87%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '357.12', width=5)

width < len (8) in center_string(outstring, '63851.66', width=6)

width < len (12) in center_string(outstring, '608245359.30', width=8)

width < len (7) in center_string(outstring, '1906.16', width=6)

width < len (7) in center_string(outstring, '4372.67', width=5)

width < len (16) in center_string(outstring, ' 9.5601(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.097(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255013(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4370.50', width=5)

width < len (16) in center_string(outstring, ' 9.5506(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018193(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.54', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.83', width=5)

width < len (16) in center_string(outstring, ' 9.5215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928772(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.39', width=5)

width < len (16) in center_string(outstring, ' 9.5022(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.22', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054579(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.33', width=5)

width < len (16) in center_string(outstring, ' 9.4540(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937134(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.73', width=5)

width < len (16) in center_string(outstring, ' 9.4253(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM30.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '672.08', width=5)

width < len (9) in center_string(outstring, '225939.05', width=6)

width < len (12) in center_string(outstring, '611189535.01', width=8)

width < len (7) in center_string(outstring, '4306.46', width=6)

width < len (7) in center_string(outstring, '4383.95', width=5)

width < len (16) in center_string(outstring, ' 9.6095(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.985(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255313(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.54', width=5)

width < len (16) in center_string(outstring, ' 9.5990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.36', width=5)

width < len (16) in center_string(outstring, ' 9.5850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026956(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.44', width=5)

width < len (16) in center_string(outstring, ' 9.5679(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035942(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929016(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.80', width=5)

width < len (16) in center_string(outstring, ' 9.5476(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.44', width=5)

width < len (16) in center_string(outstring, ' 9.5242(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053913(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.38', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062898(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.61', width=5)

width < len (16) in center_string(outstring, ' 9.4683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071884(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM41.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '775.49', width=5)

width < len (9) in center_string(outstring, '300785.25', width=6)

width < len (12) in center_string(outstring, '614126978.51', width=8)

width < len (7) in center_string(outstring, '3092.23', width=6)

width < len (7) in center_string(outstring, '4395.57', width=5)

width < len (16) in center_string(outstring, ' 9.6605(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.869(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251640(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.82', width=5)

width < len (16) in center_string(outstring, ' 9.6484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017738(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4389.30', width=5)

width < len (16) in center_string(outstring, ' 9.6330(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4385.05', width=5)

width < len (16) in center_string(outstring, ' 9.6144(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4380.10', width=5)

width < len (16) in center_string(outstring, ' 9.5927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044344(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.45', width=5)

width < len (16) in center_string(outstring, ' 9.5679(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930725(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4368.10', width=5)

width < len (16) in center_string(outstring, ' 9.5401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062082(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4361.06', width=5)

width < len (16) in center_string(outstring, ' 9.5094(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070951(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.3(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM52.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.32', width=5)

width < len (9) in center_string(outstring, '211552.66', width=6)

width < len (12) in center_string(outstring, '605448227.32', width=8)

width < len (7) in center_string(outstring, '2864.66', width=6)

width < len (7) in center_string(outstring, '4362.87', width=5)

width < len (16) in center_string(outstring, ' 9.5173(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253321(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4360.65', width=5)

width < len (16) in center_string(outstring, ' 9.5076(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921524(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.63', width=5)

width < len (16) in center_string(outstring, ' 9.4945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.86', width=5)

width < len (16) in center_string(outstring, ' 9.4781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.34', width=5)

width < len (16) in center_string(outstring, ' 9.4584(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929977(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.09', width=5)

width < len (16) in center_string(outstring, ' 9.4355(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932785(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.10', width=5)

width < len (16) in center_string(outstring, ' 9.4095(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935608(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.38', width=5)

width < len (16) in center_string(outstring, ' 9.3804(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938431(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM12.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.62', width=5)

width < len (9) in center_string(outstring, '169230.19', width=6)

width < len (12) in center_string(outstring, '589829767.79', width=8)

width < len (7) in center_string(outstring, '1492.11', width=6)

width < len (7) in center_string(outstring, '4358.81', width=5)

width < len (16) in center_string(outstring, ' 9.4996(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253713(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.22', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.78', width=5)

width < len (16) in center_string(outstring, ' 9.4646(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.59', width=5)

width < len (16) in center_string(outstring, ' 9.4464(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.26', width=5)

width < len (16) in center_string(outstring, ' 7.6568(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.00', width=5)

width < len (16) in center_string(outstring, ' 9.4004(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.61', width=5)

width < len (16) in center_string(outstring, ' 9.3728(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938812(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM3.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 84 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '422.33', width=5)

width < len (8) in center_string(outstring, '89267.28', width=6)

width < len (12) in center_string(outstring, '562597375.93', width=8)

width < len (7) in center_string(outstring, '2400.98', width=6)

width < len (7) in center_string(outstring, '4367.86', width=5)

width < len (16) in center_string(outstring, ' 9.5391(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.93', width=5)

width < len (16) in center_string(outstring, ' 7.7497(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922241(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.90', width=5)

width < len (16) in center_string(outstring, ' 9.5175(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.28', width=5)

width < len (16) in center_string(outstring, ' 9.5017(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.63', width=5)

width < len (16) in center_string(outstring, ' 7.6896(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045752(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.82', width=5)

width < len (16) in center_string(outstring, ' 9.4605(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.00', width=5)

width < len (16) in center_string(outstring, ' 9.4352(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.48', width=5)

width < len (16) in center_string(outstring, ' 7.6108(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939041(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM23.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '394.91', width=5)

width < len (8) in center_string(outstring, '78064.34', width=6)

width < len (12) in center_string(outstring, '593668067.21', width=8)

width < len (7) in center_string(outstring, '2176.81', width=6)

width < len (7) in center_string(outstring, '3948.38', width=5)

width < len (16) in center_string(outstring, ' 7.7949(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252272(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(17)', width=10)

width < len (7) in center_string(outstring, '4371.16', width=5)

width < len (16) in center_string(outstring, ' 9.5535(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018103(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4368.15', width=5)

width < len (16) in center_string(outstring, ' 9.5404(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027155(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.40', width=5)

width < len (16) in center_string(outstring, ' 9.5240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.92', width=5)

width < len (16) in center_string(outstring, ' 9.5045(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.72', width=5)

width < len (16) in center_string(outstring, ' 9.4818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.81', width=5)

width < len (16) in center_string(outstring, ' 9.4561(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063361(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4342.19', width=5)

width < len (16) in center_string(outstring, ' 9.4273(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM34.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1035.14', width=5)

width < len (9) in center_string(outstring, '535853.75', width=6)

width < len (12) in center_string(outstring, '605376279.35', width=8)

width < len (7) in center_string(outstring, '2647.89', width=6)

width < len (7) in center_string(outstring, '4424.00', width=5)

width < len (16) in center_string(outstring, ' 9.7859(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255874(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.09', width=5)

width < len (16) in center_string(outstring, ' 9.7686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.32', width=5)

width < len (16) in center_string(outstring, ' 9.7476(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.78', width=5)

width < len (16) in center_string(outstring, ' 9.7231(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.48', width=5)

width < len (16) in center_string(outstring, ' 9.6953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3954.50', width=5)

width < len (16) in center_string(outstring, ' 7.8190(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4388.61', width=5)

width < len (16) in center_string(outstring, ' 9.6300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4380.07', width=5)

width < len (16) in center_string(outstring, ' 9.5925(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(4.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.160 sec (User: 0.160 sec, System: 0.000 sec)
  Total time: 0.170 sec

Final candidates in binary format are in 'Sband_DM80.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '645.37', width=5)

width < len (9) in center_string(outstring, '208344.78', width=6)

width < len (12) in center_string(outstring, '580953211.09', width=8)

width < len (7) in center_string(outstring, '4141.61', width=6)

width < len (7) in center_string(outstring, '4383.32', width=5)

width < len (16) in center_string(outstring, ' 9.6067(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.000(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254439(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4380.93', width=5)

width < len (16) in center_string(outstring, ' 9.5963(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.75', width=5)

width < len (16) in center_string(outstring, ' 9.5824(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.84', width=5)

width < len (16) in center_string(outstring, ' 9.5653(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.28', width=5)

width < len (16) in center_string(outstring, ' 7.7393(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045001(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930908(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '3927.80', width=5)

width < len (16) in center_string(outstring, ' 7.7138(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054001(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(18)', width=10)

width < len (7) in center_string(outstring, '4357.79', width=5)

width < len (16) in center_string(outstring, ' 9.4952(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063001(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.03', width=5)

width < len (16) in center_string(outstring, ' 9.4657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072001(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.300 sec, System: 0.000 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM40.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '760.65', width=5)

width < len (9) in center_string(outstring, '289393.28', width=6)

width < len (12) in center_string(outstring, '599054667.67', width=8)

width < len (7) in center_string(outstring, '3028.28', width=6)

width < len (7) in center_string(outstring, '3964.10', width=5)

width < len (16) in center_string(outstring, ' 7.8570(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256429(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4391.94', width=5)

width < len (16) in center_string(outstring, ' 9.6446(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.58', width=5)

width < len (16) in center_string(outstring, ' 9.6298(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926941(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.54', width=5)

width < len (16) in center_string(outstring, ' 9.6121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929489(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.84', width=5)

width < len (16) in center_string(outstring, ' 9.5915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.47', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055287(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.45', width=5)

width < len (16) in center_string(outstring, ' 9.5417(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4361.79', width=5)

width < len (16) in center_string(outstring, ' 9.5126(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.0)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM51.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '642.92', width=5)

width < len (9) in center_string(outstring, '206766.50', width=6)

width < len (12) in center_string(outstring, '590595614.84', width=8)

width < len (7) in center_string(outstring, '2700.26', width=6)

width < len (7) in center_string(outstring, '3937.27', width=5)

width < len (16) in center_string(outstring, ' 7.7511(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252742(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4360.05', width=5)

width < len (16) in center_string(outstring, ' 9.5050(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.05', width=5)

width < len (16) in center_string(outstring, ' 9.4920(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.29', width=5)

width < len (16) in center_string(outstring, ' 9.4756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4348.79', width=5)

width < len (16) in center_string(outstring, ' 9.4560(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.55', width=5)

width < len (16) in center_string(outstring, ' 9.4332(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.57', width=5)

width < len (16) in center_string(outstring, ' 9.4073(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.87', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM11.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '632.56', width=5)

width < len (9) in center_string(outstring, '200156.31', width=6)

width < len (12) in center_string(outstring, '591498828.16', width=8)

width < len (7) in center_string(outstring, '3487.51', width=6)

width < len (7) in center_string(outstring, '4366.18', width=5)

width < len (16) in center_string(outstring, ' 9.5318(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.08', width=5)

width < len (16) in center_string(outstring, ' 9.5226(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.19', width=5)

width < len (16) in center_string(outstring, ' 9.5100(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.53', width=5)

width < len (16) in center_string(outstring, ' 9.4941(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4353.13', width=5)

width < len (16) in center_string(outstring, ' 9.4749(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3914.98', width=5)

width < len (16) in center_string(outstring, ' 7.6636(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.11', width=5)

width < len (16) in center_string(outstring, ' 9.4270(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.51', width=5)

width < len (16) in center_string(outstring, ' 9.3983(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938950(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM16.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.43', width=5)

width < len (9) in center_string(outstring, '167383.33', width=6)

width < len (12) in center_string(outstring, '589776614.30', width=8)

width < len (7) in center_string(outstring, '1468.85', width=6)

width < len (7) in center_string(outstring, '4358.60', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.73', width=5)

width < len (16) in center_string(outstring, ' 9.4905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.06', width=5)

width < len (16) in center_string(outstring, ' 9.4789(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.64', width=5)

width < len (16) in center_string(outstring, ' 9.4641(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927963(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.48', width=5)

width < len (16) in center_string(outstring, ' 9.4459(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.57', width=5)

width < len (16) in center_string(outstring, ' 9.4246(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933594(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.97', width=5)

width < len (16) in center_string(outstring, ' 7.6322(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936417(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.57', width=5)

width < len (16) in center_string(outstring, ' 9.3726(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM2.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '903.13', width=5)

width < len (9) in center_string(outstring, '407915.84', width=6)

width < len (12) in center_string(outstring, '591391310.73', width=8)

width < len (7) in center_string(outstring, '3212.56', width=6)

width < len (7) in center_string(outstring, '4406.76', width=5)

width < len (16) in center_string(outstring, ' 9.7098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913849(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4406.93', width=5)

width < len (16) in center_string(outstring, ' 9.7105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00059321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4407.08', width=5)

width < len (16) in center_string(outstring, ' 9.7112(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00088982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4407.22', width=5)

width < len (16) in center_string(outstring, ' 9.7118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00118643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.901505(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4407.34', width=5)

width < len (16) in center_string(outstring, ' 9.7123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00148303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.897385(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '3974.37', width=5)

width < len (16) in center_string(outstring, ' 7.8978(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00177964(25)', width=12)

width < len (15) in center_string(outstring, ' 166.893280(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(17)', width=10)

width < len (7) in center_string(outstring, '3974.30', width=5)

width < len (16) in center_string(outstring, ' 7.8976(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00207625(25)', width=12)

width < len (15) in center_string(outstring, ' 166.889160(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '4407.59', width=5)

width < len (16) in center_string(outstring, ' 9.7134(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00237285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.885040(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(5.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM62.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '435.84', width=5)

width < len (8) in center_string(outstring, '95068.00', width=6)

width < len (12) in center_string(outstring, '606811140.39', width=8)

width < len (7) in center_string(outstring, '2505.51', width=6)

width < len (7) in center_string(outstring, '4367.21', width=5)

width < len (16) in center_string(outstring, ' 9.5363(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.156(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.14', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018313(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.27', width=5)

width < len (16) in center_string(outstring, ' 9.5147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.66', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036626(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4354.31', width=5)

width < len (16) in center_string(outstring, ' 9.4800(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045782(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.22', width=5)

width < len (16) in center_string(outstring, ' 9.4579(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.40', width=5)

width < len (16) in center_string(outstring, ' 9.4326(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064095(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.86', width=5)

width < len (16) in center_string(outstring, ' 9.4042(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM22.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1014.47', width=5)

width < len (9) in center_string(outstring, '514675.00', width=6)

width < len (12) in center_string(outstring, '618356431.39', width=8)

width < len (7) in center_string(outstring, '3016.84', width=6)

width < len (7) in center_string(outstring, '4412.37', width=5)

width < len (16) in center_string(outstring, ' 9.7345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255908(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4409.06', width=5)

width < len (16) in center_string(outstring, ' 9.7199(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.99', width=5)

width < len (16) in center_string(outstring, ' 9.7020(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.25', width=5)

width < len (16) in center_string(outstring, ' 9.6811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4394.83', width=5)

width < len (16) in center_string(outstring, ' 9.6573(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046076(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4388.75', width=5)

width < len (16) in center_string(outstring, ' 9.6306(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4382.02', width=5)

width < len (16) in center_string(outstring, ' 9.6011(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.64', width=5)

width < len (16) in center_string(outstring, ' 9.5688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(3.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM73.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '384.57', width=5)

width < len (8) in center_string(outstring, '74034.80', width=6)

width < len (12) in center_string(outstring, '593698161.46', width=8)

width < len (7) in center_string(outstring, '2120.17', width=6)

width < len (7) in center_string(outstring, '4373.85', width=5)

width < len (16) in center_string(outstring, ' 9.5653(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253298(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.58', width=5)

width < len (16) in center_string(outstring, ' 7.7759(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018104(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921478(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4368.63', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.89', width=5)

width < len (16) in center_string(outstring, ' 9.5261(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036208(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927032(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.42', width=5)

width < len (16) in center_string(outstring, ' 9.5066(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045260(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.22', width=5)

width < len (16) in center_string(outstring, ' 9.4840(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932587(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.31', width=5)

width < len (16) in center_string(outstring, ' 9.4583(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4342.70', width=5)

width < len (16) in center_string(outstring, ' 9.4295(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM33.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '703.54', width=5)

width < len (9) in center_string(outstring, '247575.59', width=6)

width < len (12) in center_string(outstring, '597368139.67', width=8)

width < len (7) in center_string(outstring, '3806.93', width=6)

width < len (7) in center_string(outstring, '4388.79', width=5)

width < len (16) in center_string(outstring, ' 9.6307(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254342(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4386.27', width=5)

width < len (16) in center_string(outstring, ' 9.6197(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3949.39', width=5)

width < len (16) in center_string(outstring, ' 7.7988(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4378.98', width=5)

width < len (16) in center_string(outstring, ' 9.5877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4374.25', width=5)

width < len (16) in center_string(outstring, ' 9.5670(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4368.80', width=5)

width < len (16) in center_string(outstring, ' 9.5432(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4362.66', width=5)

width < len (16) in center_string(outstring, ' 9.5164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4355.82', width=5)

width < len (16) in center_string(outstring, ' 9.4866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM44.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '747.56', width=5)

width < len (9) in center_string(outstring, '279521.16', width=6)

width < len (12) in center_string(outstring, '598846828.74', width=8)

width < len (7) in center_string(outstring, '2982.69', width=6)

width < len (7) in center_string(outstring, '4394.27', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252284(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.39', width=5)

width < len (16) in center_string(outstring, ' 7.8344(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.920227(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.22', width=5)

width < len (16) in center_string(outstring, ' 9.6282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.15', width=5)

width < len (16) in center_string(outstring, ' 9.6104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.42', width=5)

width < len (16) in center_string(outstring, ' 9.5896(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.02', width=5)

width < len (16) in center_string(outstring, ' 9.5660(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930481(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.97', width=5)

width < len (16) in center_string(outstring, ' 9.5396(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933029(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4361.27', width=5)

width < len (16) in center_string(outstring, ' 9.5103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM50.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '809.10', width=5)

width < len (9) in center_string(outstring, '327422.16', width=6)

width < len (12) in center_string(outstring, '615903816.86', width=8)

width < len (7) in center_string(outstring, '3035.65', width=6)

width < len (7) in center_string(outstring, '4402.28', width=5)

width < len (16) in center_string(outstring, ' 9.6900(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.846(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.42', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017691(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.79', width=5)

width < len (16) in center_string(outstring, ' 9.6615(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026537(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.44', width=5)

width < len (16) in center_string(outstring, ' 9.6424(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035383(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.38', width=5)

width < len (16) in center_string(outstring, ' 9.6202(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931778(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4380.62', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.16', width=5)

width < len (16) in center_string(outstring, ' 9.5667(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.02', width=5)

width < len (16) in center_string(outstring, ' 9.5355(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070766(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM55.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '648.05', width=5)

width < len (9) in center_string(outstring, '210075.20', width=6)

width < len (12) in center_string(outstring, '606392660.12', width=8)

width < len (7) in center_string(outstring, '3521.68', width=6)

width < len (7) in center_string(outstring, '4365.74', width=5)

width < len (16) in center_string(outstring, ' 9.5299(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.978(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251168(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4363.64', width=5)

width < len (16) in center_string(outstring, ' 9.5207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017956(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919403(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.76', width=5)

width < len (16) in center_string(outstring, ' 9.5081(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026934(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.14', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035913(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.79', width=5)

width < len (16) in center_string(outstring, ' 9.4734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.70', width=5)

width < len (16) in center_string(outstring, ' 9.4513(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053869(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4341.90', width=5)

width < len (16) in center_string(outstring, ' 9.4260(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.38', width=5)

width < len (16) in center_string(outstring, ' 9.3978(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071825(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM15.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '895.85', width=5)

width < len (9) in center_string(outstring, '401375.72', width=6)

width < len (12) in center_string(outstring, '600609062.30', width=8)

width < len (7) in center_string(outstring, '3266.57', width=6)

width < len (7) in center_string(outstring, '4403.50', width=5)

width < len (16) in center_string(outstring, ' 9.6954(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.746(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4400.37', width=5)

width < len (16) in center_string(outstring, ' 9.6817(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017491(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4396.48', width=5)

width < len (16) in center_string(outstring, ' 9.6645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026237(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.88', width=5)

width < len (16) in center_string(outstring, ' 9.6443(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.60', width=5)

width < len (16) in center_string(outstring, ' 9.6211(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043728(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931854(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3939.15', width=5)

width < len (16) in center_string(outstring, ' 7.7585(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052473(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4373.96', width=5)

width < len (16) in center_string(outstring, ' 9.5658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061219(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.64', width=5)

width < len (16) in center_string(outstring, ' 9.5338(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069964(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM61.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.32', width=5)

width < len (9) in center_string(outstring, '176698.50', width=6)

width < len (12) in center_string(outstring, '604845957.22', width=8)

width < len (7) in center_string(outstring, '1723.84', width=6)

width < len (7) in center_string(outstring, '4358.49', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.258(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250459(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.67', width=5)

width < len (16) in center_string(outstring, ' 9.4903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016517(23)', width=12)

width < len (15) in center_string(outstring, ' 166.918610(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4354.18', width=5)

width < len (16) in center_string(outstring, ' 9.4794(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024775(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921234(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786835(16)', width=10)

width < len (7) in center_string(outstring, '4351.05', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033033(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4347.28', width=5)

width < len (16) in center_string(outstring, ' 9.4494(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041292(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4342.88', width=5)

width < len (16) in center_string(outstring, ' 9.4303(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049550(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929123(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4337.86', width=5)

width < len (16) in center_string(outstring, ' 9.4085(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00057809(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789276(16)', width=10)

width < len (7) in center_string(outstring, '4332.22', width=5)

width < len (16) in center_string(outstring, ' 9.3841(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789963(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.180 sec (User: 0.180 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM6.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '367.10', width=5)

width < len (8) in center_string(outstring, '67466.99', width=6)

width < len (12) in center_string(outstring, '592779343.79', width=8)

width < len (7) in center_string(outstring, '1978.35', width=6)

width < len (7) in center_string(outstring, '4370.34', width=5)

width < len (16) in center_string(outstring, ' 9.5499(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.26', width=5)

width < len (16) in center_string(outstring, ' 9.5408(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3935.44', width=5)

width < len (16) in center_string(outstring, ' 7.7439(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027378(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(17)', width=10)

width < len (7) in center_string(outstring, '4361.76', width=5)

width < len (16) in center_string(outstring, ' 9.5125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.40', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930344(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.30', width=5)

width < len (16) in center_string(outstring, ' 9.4713(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933136(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.48', width=5)

width < len (16) in center_string(outstring, ' 9.4460(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.95', width=5)

width < len (16) in center_string(outstring, ' 9.4176(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938736(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM26.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1016.36', width=5)

width < len (9) in center_string(outstring, '516598.53', width=6)

width < len (12) in center_string(outstring, '587724508.42', width=8)

width < len (7) in center_string(outstring, '3117.73', width=6)

width < len (7) in center_string(outstring, '4411.78', width=5)

width < len (16) in center_string(outstring, ' 9.7319(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254140(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.46', width=5)

width < len (16) in center_string(outstring, ' 9.7173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.40', width=5)

width < len (16) in center_string(outstring, ' 9.6994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924652(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4399.65', width=5)

width < len (16) in center_string(outstring, ' 9.6785(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3956.53', width=5)

width < len (16) in center_string(outstring, ' 7.8271(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.16', width=5)

width < len (16) in center_string(outstring, ' 9.6280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3941.79', width=5)

width < len (16) in center_string(outstring, ' 7.7689(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934906(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.05', width=5)

width < len (16) in center_string(outstring, ' 9.5662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM72.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 85 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '376.38', width=5)

width < len (8) in center_string(outstring, '70916.12', width=6)

width < len (12) in center_string(outstring, '593359078.85', width=8)

width < len (7) in center_string(outstring, '2045.83', width=6)

width < len (7) in center_string(outstring, '4372.53', width=5)

width < len (16) in center_string(outstring, ' 9.5595(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.063(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.04', width=5)

width < len (16) in center_string(outstring, ' 7.7738(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018127(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924210(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4367.31', width=5)

width < len (16) in center_string(outstring, ' 9.5367(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.56', width=5)

width < len (16) in center_string(outstring, ' 9.5204(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036253(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.09', width=5)

width < len (16) in center_string(outstring, ' 9.5008(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045317(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.89', width=5)

width < len (16) in center_string(outstring, ' 9.4782(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054380(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.98', width=5)

width < len (16) in center_string(outstring, ' 9.4525(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063443(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.36', width=5)

width < len (16) in center_string(outstring, ' 9.4237(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940887(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM32.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '478.10', width=5)

width < len (9) in center_string(outstring, '114377.30', width=6)

width < len (12) in center_string(outstring, '610352486.95', width=8)

width < len (7) in center_string(outstring, '2863.67', width=6)

width < len (7) in center_string(outstring, '4380.65', width=5)

width < len (16) in center_string(outstring, ' 9.5950(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.032(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255411(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.34', width=5)

width < len (16) in center_string(outstring, ' 9.5849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018063(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.25', width=5)

width < len (16) in center_string(outstring, ' 9.5714(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027095(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926361(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.42', width=5)

width < len (16) in center_string(outstring, ' 9.5547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.86', width=5)

width < len (16) in center_string(outstring, ' 9.5348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045159(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.58', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.59', width=5)

width < len (16) in center_string(outstring, ' 9.4856(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063222(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.89', width=5)

width < len (16) in center_string(outstring, ' 9.4564(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.8(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.320 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM37.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  11%Amount of optimization complete =  22%Amount of optimization complete =  33%Amount of optimization complete =  44%Amount of optimization complete =  55%Amount of optimization complete =  66%Amount of optimization complete =  77%Amount of optimization complete =  88%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1051.35', width=5)

width < len (9) in center_string(outstring, '552769.94', width=6)

width < len (12) in center_string(outstring, '606838633.49', width=8)

width < len (7) in center_string(outstring, '2582.85', width=6)

width < len (7) in center_string(outstring, '4428.18', width=5)

width < len (16) in center_string(outstring, ' 9.8044(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.605(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254250(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4424.47', width=5)

width < len (16) in center_string(outstring, ' 9.7880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.99', width=5)

width < len (16) in center_string(outstring, ' 9.7682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925049(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.83', width=5)

width < len (16) in center_string(outstring, ' 9.7454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.98', width=5)

width < len (16) in center_string(outstring, ' 9.7196(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930389(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4402.46', width=5)

width < len (16) in center_string(outstring, ' 9.6908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051629(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933044(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3951.51', width=5)

width < len (16) in center_string(outstring, ' 7.8072(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060234(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935715(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4387.44', width=5)

width < len (16) in center_string(outstring, ' 9.6248(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.150 sec (User: 0.150 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM83.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.58', width=5)

width < len (9) in center_string(outstring, '249017.52', width=6)

width < len (12) in center_string(outstring, '596705202.41', width=8)

width < len (7) in center_string(outstring, '4034.46', width=6)

width < len (7) in center_string(outstring, '3957.14', width=5)

width < len (16) in center_string(outstring, ' 7.8295(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.969(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252921(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4383.19', width=5)

width < len (16) in center_string(outstring, ' 9.6062(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017938(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.93', width=5)

width < len (16) in center_string(outstring, ' 9.5919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026908(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4375.94', width=5)

width < len (16) in center_string(outstring, ' 9.5744(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035877(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926605(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4371.23', width=5)

width < len (16) in center_string(outstring, ' 9.5538(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929367(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.81', width=5)

width < len (16) in center_string(outstring, ' 9.5302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932114(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.68', width=5)

width < len (16) in center_string(outstring, ' 9.5034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062784(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4352.85', width=5)

width < len (16) in center_string(outstring, ' 9.4737(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM43.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '811.15', width=5)

width < len (9) in center_string(outstring, '329077.00', width=6)

width < len (12) in center_string(outstring, '585277568.55', width=8)

width < len (7) in center_string(outstring, '3124.13', width=6)

width < len (7) in center_string(outstring, '4401.19', width=5)

width < len (16) in center_string(outstring, ' 9.6853(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.41', width=5)

width < len (16) in center_string(outstring, ' 9.6730(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923172(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3959.12', width=5)

width < len (16) in center_string(outstring, ' 7.8373(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4390.57', width=5)

width < len (16) in center_string(outstring, ' 9.6386(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.58', width=5)

width < len (16) in center_string(outstring, ' 9.6167(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4379.88', width=5)

width < len (16) in center_string(outstring, ' 9.5917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.49', width=5)

width < len (16) in center_string(outstring, ' 9.5637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3925.13', width=5)

width < len (16) in center_string(outstring, ' 7.7033(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM54.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.50', width=5)

width < len (9) in center_string(outstring, '213627.86', width=6)

width < len (12) in center_string(outstring, '576345260.98', width=8)

width < len (7) in center_string(outstring, '3430.03', width=6)

width < len (7) in center_string(outstring, '4364.89', width=5)

width < len (16) in center_string(outstring, ' 9.5261(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254736(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.76', width=5)

width < len (16) in center_string(outstring, ' 9.5168(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922943(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.83', width=5)

width < len (16) in center_string(outstring, ' 9.5041(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.15', width=5)

width < len (16) in center_string(outstring, ' 9.4880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928574(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.61', width=5)

width < len (16) in center_string(outstring, ' 7.6817(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.41', width=5)

width < len (16) in center_string(outstring, ' 7.6574(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.63', width=5)

width < len (16) in center_string(outstring, ' 9.4206(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937027(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4334.00', width=5)

width < len (16) in center_string(outstring, ' 9.3918(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM14.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '565.00', width=5)

width < len (9) in center_string(outstring, '159703.89', width=6)

width < len (12) in center_string(outstring, '591950584.84', width=8)

width < len (7) in center_string(outstring, '3540.66', width=6)

width < len (7) in center_string(outstring, '4367.08', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.98', width=5)

width < len (16) in center_string(outstring, ' 7.7499(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923569(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.16', width=5)

width < len (16) in center_string(outstring, ' 9.5142(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.54', width=5)

width < len (16) in center_string(outstring, ' 9.4984(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929199(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.17', width=5)

width < len (16) in center_string(outstring, ' 9.4794(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932007(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.06', width=5)

width < len (16) in center_string(outstring, ' 9.4572(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934830(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.22', width=5)

width < len (16) in center_string(outstring, ' 9.4318(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064476(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937637(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.65', width=5)

width < len (16) in center_string(outstring, ' 9.4033(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073687(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940460(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.250 sec (User: 0.250 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM19.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '595.41', width=5)

width < len (9) in center_string(outstring, '177346.25', width=6)

width < len (12) in center_string(outstring, '588912335.16', width=8)

width < len (7) in center_string(outstring, '1711.34', width=6)

width < len (7) in center_string(outstring, '4356.02', width=5)

width < len (16) in center_string(outstring, ' 9.4875(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253470(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4353.97', width=5)

width < len (16) in center_string(outstring, ' 9.4785(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.13', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.54', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.20', width=5)

width < len (16) in center_string(outstring, ' 9.4317(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930115(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.44', width=5)

width < len (16) in center_string(outstring, ' 7.6419(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932938(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.33', width=5)

width < len (16) in center_string(outstring, ' 9.3845(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935760(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4325.80', width=5)

width < len (16) in center_string(outstring, ' 9.3563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM5.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '950.90', width=5)

width < len (9) in center_string(outstring, '452201.09', width=6)

width < len (12) in center_string(outstring, '607298044.61', width=8)

width < len (7) in center_string(outstring, '3277.98', width=6)

width < len (7) in center_string(outstring, '3977.45', width=5)

width < len (16) in center_string(outstring, ' 7.9101(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00032364(25)', width=12)

width < len (15) in center_string(outstring, ' 166.913406(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(17)', width=10)

width < len (7) in center_string(outstring, '4410.10', width=5)

width < len (16) in center_string(outstring, ' 9.7245(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064728(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908905(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.27', width=5)

width < len (16) in center_string(outstring, ' 9.7253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00097092(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904419(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.42', width=5)

width < len (16) in center_string(outstring, ' 9.7259(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00129456(23)', width=12)

width < len (15) in center_string(outstring, ' 166.899918(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.55', width=5)

width < len (16) in center_string(outstring, ' 9.7265(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00161820(23)', width=12)

width < len (15) in center_string(outstring, ' 166.895432(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.66', width=5)

width < len (16) in center_string(outstring, ' 9.7270(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00194184(23)', width=12)

width < len (15) in center_string(outstring, ' 166.890930(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.75', width=5)

width < len (16) in center_string(outstring, ' 9.7274(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00226548(23)', width=12)

width < len (15) in center_string(outstring, ' 166.886429(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.83', width=5)

width < len (16) in center_string(outstring, ' 9.7277(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00258912(23)', width=12)

width < len (15) in center_string(outstring, ' 166.881943(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.9(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM65.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '375.35', width=5)

width < len (8) in center_string(outstring, '70527.73', width=6)

width < len (12) in center_string(outstring, '592715975.41', width=8)

width < len (7) in center_string(outstring, '2019.85', width=6)

width < len (7) in center_string(outstring, '4370.20', width=5)

width < len (16) in center_string(outstring, ' 9.5493(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.11', width=5)

width < len (16) in center_string(outstring, ' 9.5402(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3934.76', width=5)

width < len (16) in center_string(outstring, ' 7.7412(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027377(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926315(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4361.60', width=5)

width < len (16) in center_string(outstring, ' 9.5118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.23', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931915(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.13', width=5)

width < len (16) in center_string(outstring, ' 9.4705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054753(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.31', width=5)

width < len (16) in center_string(outstring, ' 9.4452(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937500(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.76', width=5)

width < len (16) in center_string(outstring, ' 9.4168(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073004(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940292(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.280 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM25.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  10%Amount of optimization complete =  20%Amount of optimization complete =  30%Amount of optimization complete =  40%Amount of optimization complete =  50%Amount of optimization complete =  60%Amount of optimization complete =  69%Amount of optimization complete =  80%Amount of optimization complete =  89%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '998.71', width=5)

width < len (9) in center_string(outstring, '498809.94', width=6)

width < len (12) in center_string(outstring, '602693719.05', width=8)

width < len (7) in center_string(outstring, '3093.18', width=6)

width < len (7) in center_string(outstring, '4410.43', width=5)

width < len (16) in center_string(outstring, ' 9.7259(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.971(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251310(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3974.18', width=5)

width < len (16) in center_string(outstring, ' 7.8971(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017943(25)', width=12)

width < len (15) in center_string(outstring, ' 166.919312(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4403.05', width=5)

width < len (16) in center_string(outstring, ' 9.6934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026914(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.32', width=5)

width < len (16) in center_string(outstring, ' 9.6726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035885(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.92', width=5)

width < len (16) in center_string(outstring, ' 9.6489(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927078(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.85', width=5)

width < len (16) in center_string(outstring, ' 9.6223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053828(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929657(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4380.14', width=5)

width < len (16) in center_string(outstring, ' 9.5928(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062799(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932251(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.79', width=5)

width < len (16) in center_string(outstring, ' 9.5606(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071770(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934830(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM71.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.46', width=5)

width < len (9) in center_string(outstring, '533091.81', width=6)

width < len (12) in center_string(outstring, '604439677.58', width=8)

width < len (7) in center_string(outstring, '2922.98', width=6)

width < len (7) in center_string(outstring, '4420.35', width=5)

width < len (16) in center_string(outstring, ' 9.7697(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255225(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.53', width=5)

width < len (16) in center_string(outstring, ' 9.7529(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.86', width=5)

width < len (16) in center_string(outstring, ' 9.7323(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.43', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.22', width=5)

width < len (16) in center_string(outstring, ' 9.6810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3950.85', width=5)

width < len (16) in center_string(outstring, ' 7.8046(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.57', width=5)

width < len (16) in center_string(outstring, ' 9.6166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.13', width=5)

width < len (16) in center_string(outstring, ' 9.5797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM76.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '453.20', width=5)

width < len (9) in center_string(outstring, '102783.38', width=6)

width < len (12) in center_string(outstring, '595440735.50', width=8)

width < len (7) in center_string(outstring, '2664.04', width=6)

width < len (7) in center_string(outstring, '4381.50', width=5)

width < len (16) in center_string(outstring, ' 9.5988(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.042(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.26', width=5)

width < len (16) in center_string(outstring, ' 9.5890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922165(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.22', width=5)

width < len (16) in center_string(outstring, ' 9.5757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924942(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.45', width=5)

width < len (16) in center_string(outstring, ' 9.5592(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.95', width=5)

width < len (16) in center_string(outstring, ' 9.5395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045209(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.72', width=5)

width < len (16) in center_string(outstring, ' 9.5167(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.78', width=5)

width < len (16) in center_string(outstring, ' 9.4908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3912.25', width=5)

width < len (16) in center_string(outstring, ' 7.6529(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072335(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938812(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM36.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 34 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =  12%Amount of optimization complete =  25%Amount of optimization complete =  37%Amount of optimization complete =  50%Amount of optimization complete =  62%Amount of optimization complete =  75%Amount of optimization complete =  87%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1048.76', width=5)

width < len (9) in center_string(outstring, '550053.19', width=6)

width < len (12) in center_string(outstring, '622194228.16', width=8)

width < len (7) in center_string(outstring, '2586.08', width=6)

width < len (7) in center_string(outstring, '4427.46', width=5)

width < len (16) in center_string(outstring, ' 9.8012(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.606(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253393(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.75', width=5)

width < len (16) in center_string(outstring, ' 9.7848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921524(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.27', width=5)

width < len (16) in center_string(outstring, ' 9.7650(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025819(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.11', width=5)

width < len (16) in center_string(outstring, ' 9.7422(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034425(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926865(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.26', width=5)

width < len (16) in center_string(outstring, ' 9.7164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788589(16)', width=10)

width < len (7) in center_string(outstring, '4401.74', width=5)

width < len (16) in center_string(outstring, ' 9.6877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051638(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4394.56', width=5)

width < len (16) in center_string(outstring, ' 9.6561(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4386.72', width=5)

width < len (16) in center_string(outstring, ' 9.6217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068850(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(9.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.130 sec (User: 0.130 sec, System: 0.000 sec)
  Total time: 0.130 sec

Final candidates in binary format are in 'Sband_DM82.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  12%Amount of optimization complete =  18%Amount of optimization complete =  25%Amount of optimization complete =  31%Amount of optimization complete =  37%Amount of optimization complete =  43%Amount of optimization complete =  50%Amount of optimization complete =  56%Amount of optimization complete =  62%Amount of optimization complete =  68%Amount of optimization complete =  75%Amount of optimization complete =  81%Amount of optimization complete =  87%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '707.48', width=5)

width < len (9) in center_string(outstring, '250361.30', width=6)

width < len (12) in center_string(outstring, '598431399.84', width=8)

width < len (7) in center_string(outstring, '3213.66', width=6)

width < len (7) in center_string(outstring, '4392.31', width=5)

width < len (16) in center_string(outstring, ' 9.6462(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.83', width=5)

width < len (16) in center_string(outstring, ' 9.6353(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920517(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.04', width=5)

width < len (16) in center_string(outstring, ' 7.8093(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4382.73', width=5)

width < len (16) in center_string(outstring, ' 9.6042(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925629(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4378.18', width=5)

width < len (16) in center_string(outstring, ' 9.5842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928192(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.09', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4360.57', width=5)

width < len (16) in center_string(outstring, ' 9.5073(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM47.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '805.80', width=5)

width < len (9) in center_string(outstring, '324752.28', width=6)

width < len (12) in center_string(outstring, '600449170.99', width=8)

width < len (7) in center_string(outstring, '3125.87', width=6)

width < len (7) in center_string(outstring, '4401.54', width=5)

width < len (16) in center_string(outstring, ' 9.6868(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.862(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255445(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.77', width=5)

width < len (16) in center_string(outstring, ' 9.6746(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.21', width=5)

width < len (16) in center_string(outstring, ' 9.6590(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026586(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.94', width=5)

width < len (16) in center_string(outstring, ' 9.6402(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929062(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.96', width=5)

width < len (16) in center_string(outstring, ' 9.6183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044310(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3940.87', width=5)

width < len (16) in center_string(outstring, ' 7.7652(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053172(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4373.88', width=5)

width < len (16) in center_string(outstring, ' 9.5654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062034(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.80', width=5)

width < len (16) in center_string(outstring, ' 9.5345(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070896(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM53.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '849.34', width=5)

width < len (9) in center_string(outstring, '360786.78', width=6)

width < len (12) in center_string(outstring, '603531262.15', width=8)

width < len (7) in center_string(outstring, '3099.64', width=6)

width < len (7) in center_string(outstring, '4397.33', width=5)

width < len (16) in center_string(outstring, ' 9.6683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016590(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916122(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4397.19', width=5)

width < len (16) in center_string(outstring, ' 9.6676(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4397.03', width=5)

width < len (16) in center_string(outstring, ' 9.6669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912399(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4396.86', width=5)

width < len (16) in center_string(outstring, ' 9.6662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.910538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4396.67', width=5)

width < len (16) in center_string(outstring, ' 9.6654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00082948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3965.44', width=5)

width < len (16) in center_string(outstring, ' 7.8624(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00099538(26)', width=12)

width < len (15) in center_string(outstring, ' 166.906830(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4396.26', width=5)

width < len (16) in center_string(outstring, ' 9.6635(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116128(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4396.03', width=5)

width < len (16) in center_string(outstring, ' 9.6625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00132717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.903107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.200 sec (User: 0.200 sec, System: 0.000 sec)
  Total time: 0.210 sec

Final candidates in binary format are in 'Sband_DM58.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.81', width=5)

width < len (9) in center_string(outstring, '170506.55', width=6)

width < len (12) in center_string(outstring, '606354322.42', width=8)

width < len (7) in center_string(outstring, '3582.95', width=6)

width < len (7) in center_string(outstring, '4365.63', width=5)

width < len (16) in center_string(outstring, ' 9.5294(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254929(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.55', width=5)

width < len (16) in center_string(outstring, ' 9.5203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.68', width=5)

width < len (16) in center_string(outstring, ' 9.5078(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.05', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.67', width=5)

width < len (16) in center_string(outstring, ' 9.4729(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.55', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.70', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.12', width=5)

width < len (16) in center_string(outstring, ' 9.3967(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940018(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.240 sec (User: 0.240 sec, System: 0.000 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM18.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '937.44', width=5)

width < len (9) in center_string(outstring, '439491.16', width=6)

width < len (12) in center_string(outstring, '601391026.66', width=8)

width < len (7) in center_string(outstring, '3238.26', width=6)

width < len (7) in center_string(outstring, '4406.88', width=5)

width < len (16) in center_string(outstring, ' 9.7103(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.751(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.64', width=5)

width < len (16) in center_string(outstring, ' 9.6960(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.63', width=5)

width < len (16) in center_string(outstring, ' 9.6784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.92', width=5)

width < len (16) in center_string(outstring, ' 9.6577(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035003(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.51', width=5)

width < len (16) in center_string(outstring, ' 9.6339(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929932(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.42', width=5)

width < len (16) in center_string(outstring, ' 9.6072(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3933.94', width=5)

width < len (16) in center_string(outstring, ' 7.7380(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061256(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4369.20', width=5)

width < len (16) in center_string(outstring, ' 9.5449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070007(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.220 sec (User: 0.220 sec, System: 0.000 sec)
  Total time: 0.230 sec

Final candidates in binary format are in 'Sband_DM64.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  17%Amount of optimization complete =  23%Amount of optimization complete =  29%Amount of optimization complete =  35%Amount of optimization complete =  41%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  58%Amount of optimization complete =  64%Amount of optimization complete =  70%Amount of optimization complete =  76%Amount of optimization complete =  82%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '624.38', width=5)

width < len (9) in center_string(outstring, '195021.20', width=6)

width < len (12) in center_string(outstring, '589830659.16', width=8)

width < len (7) in center_string(outstring, '2171.98', width=6)

width < len (7) in center_string(outstring, '4359.86', width=5)

width < len (16) in center_string(outstring, ' 9.5042(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.72', width=5)

width < len (16) in center_string(outstring, ' 9.4949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.78', width=5)

width < len (16) in center_string(outstring, ' 9.4821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.10', width=5)

width < len (16) in center_string(outstring, ' 9.4660(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927536(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.67', width=5)

width < len (16) in center_string(outstring, ' 9.4468(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930344(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.48', width=5)

width < len (16) in center_string(outstring, ' 7.6499(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.60', width=5)

width < len (16) in center_string(outstring, ' 9.3987(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4328.98', width=5)

width < len (16) in center_string(outstring, ' 9.3700(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM9.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '352.17', width=5)

width < len (8) in center_string(outstring, '62097.33', width=6)

width < len (12) in center_string(outstring, '593082663.03', width=8)

width < len (7) in center_string(outstring, '1865.16', width=6)

width < len (7) in center_string(outstring, '4371.76', width=5)

width < len (16) in center_string(outstring, ' 9.5561(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.110(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4369.61', width=5)

width < len (16) in center_string(outstring, ' 9.5468(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018221(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4366.67', width=5)

width < len (16) in center_string(outstring, ' 9.5339(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027331(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3932.17', width=5)

width < len (16) in center_string(outstring, ' 7.7310(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036441(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4358.58', width=5)

width < len (16) in center_string(outstring, ' 9.4986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.43', width=5)

width < len (16) in center_string(outstring, ' 9.4762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054662(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.56', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063773(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.97', width=5)

width < len (16) in center_string(outstring, ' 9.4220(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940094(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(6.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM29.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1029.68', width=5)

width < len (9) in center_string(outstring, '530222.12', width=6)

width < len (12) in center_string(outstring, '604621508.58', width=8)

width < len (7) in center_string(outstring, '2954.70', width=6)

width < len (7) in center_string(outstring, '4419.07', width=5)

width < len (16) in center_string(outstring, ' 9.7641(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252594(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4415.61', width=5)

width < len (16) in center_string(outstring, ' 9.7488(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920547(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4411.38', width=5)

width < len (16) in center_string(outstring, ' 9.7302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4406.48', width=5)

width < len (16) in center_string(outstring, ' 9.7086(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4400.91', width=5)

width < len (16) in center_string(outstring, ' 9.6840(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928223(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3952.69', width=5)

width < len (16) in center_string(outstring, ' 7.8119(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4387.78', width=5)

width < len (16) in center_string(outstring, ' 9.6263(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4380.23', width=5)

width < len (16) in center_string(outstring, ' 9.5932(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935898(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.170 sec (User: 0.170 sec, System: 0.000 sec)
  Total time: 0.180 sec

Final candidates in binary format are in 'Sband_DM75.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  20%Amount of optimization complete =  25%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  40%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  60%Amount of optimization complete =  64%Amount of optimization complete =  69%Amount of optimization complete =  75%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '435.93', width=5)

width < len (8) in center_string(outstring, '95104.40', width=6)

width < len (12) in center_string(outstring, '595453273.94', width=8)

width < len (7) in center_string(outstring, '2505.20', width=6)

width < len (7) in center_string(outstring, '4380.74', width=5)

width < len (16) in center_string(outstring, ' 9.5954(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.035(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.56', width=5)

width < len (16) in center_string(outstring, ' 7.7916(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018070(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4375.42', width=5)

width < len (16) in center_string(outstring, ' 9.5722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.64', width=5)

width < len (16) in center_string(outstring, ' 9.5556(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036140(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.12', width=5)

width < len (16) in center_string(outstring, ' 9.5359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.87', width=5)

width < len (16) in center_string(outstring, ' 9.5130(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.91', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.24', width=5)

width < len (16) in center_string(outstring, ' 9.4580(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM35.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '711.60', width=5)

width < len (9) in center_string(outstring, '253283.33', width=6)

width < len (12) in center_string(outstring, '598050900.15', width=8)

width < len (7) in center_string(outstring, '3374.39', width=6)

width < len (7) in center_string(outstring, '4391.49', width=5)

width < len (16) in center_string(outstring, ' 9.6426(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.915(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3955.74', width=5)

width < len (16) in center_string(outstring, ' 7.8239(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017830(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4385.52', width=5)

width < len (16) in center_string(outstring, ' 9.6164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026745(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.42', width=5)

width < len (16) in center_string(outstring, ' 9.5984(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.61', width=5)

width < len (16) in center_string(outstring, ' 9.5774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044575(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.09', width=5)

width < len (16) in center_string(outstring, ' 9.5532(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932831(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.86', width=5)

width < len (16) in center_string(outstring, ' 9.5260(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4357.95', width=5)

width < len (16) in center_string(outstring, ' 9.4959(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938309(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM46.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   8%Amount of optimization complete =  16%Amount of optimization complete =  25%Amount of optimization complete =  33%Amount of optimization complete =  41%Amount of optimization complete =  50%Amount of optimization complete =  58%Amount of optimization complete =  66%Amount of optimization complete =  75%Amount of optimization complete =  83%Amount of optimization complete =  91%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '847.02', width=5)

width < len (9) in center_string(outstring, '358820.59', width=6)

width < len (12) in center_string(outstring, '583710839.04', width=8)

width < len (7) in center_string(outstring, '3117.21', width=6)

width < len (7) in center_string(outstring, '4395.25', width=5)

width < len (16) in center_string(outstring, ' 9.6591(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.801(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253965(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3959.24', width=5)

width < len (16) in center_string(outstring, ' 7.8378(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017603(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.52', width=5)

width < len (16) in center_string(outstring, ' 9.6296(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026404(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.06', width=5)

width < len (16) in center_string(outstring, ' 9.6100(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035205(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.54', width=5)

width < len (16) in center_string(outstring, ' 7.7679(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044006(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930267(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4373.06', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.53', width=5)

width < len (16) in center_string(outstring, ' 9.5333(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4359.33', width=5)

width < len (16) in center_string(outstring, ' 9.5019(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(7.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.190 sec

Final candidates in binary format are in 'Sband_DM57.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   9%Amount of optimization complete =  14%Amount of optimization complete =  19%Amount of optimization complete =  23%Amount of optimization complete =  28%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  71%Amount of optimization complete =  76%Amount of optimization complete =  80%Amount of optimization complete =  85%Amount of optimization complete =  90%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '599.67', width=5)

width < len (9) in center_string(outstring, '179895.53', width=6)

width < len (12) in center_string(outstring, '576951000.46', width=8)

width < len (7) in center_string(outstring, '3588.53', width=6)

width < len (7) in center_string(outstring, '4365.63', width=5)

width < len (16) in center_string(outstring, ' 9.5294(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.216(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256228(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.68', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '3932.09', width=5)

width < len (16) in center_string(outstring, ' 7.7307(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027647(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926773(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(18)', width=10)

width < len (7) in center_string(outstring, '4357.69', width=5)

width < len (16) in center_string(outstring, ' 9.4947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4353.69', width=5)

width < len (16) in center_string(outstring, ' 9.4773(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4349.03', width=5)

width < len (16) in center_string(outstring, ' 9.4570(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4343.71', width=5)

width < len (16) in center_string(outstring, ' 9.4339(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '3903.60', width=5)

width < len (16) in center_string(outstring, ' 7.6191(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM17.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '610.94', width=5)

width < len (9) in center_string(outstring, '186717.31', width=6)

width < len (12) in center_string(outstring, '574812837.19', width=8)

width < len (7) in center_string(outstring, '2023.39', width=6)

width < len (7) in center_string(outstring, '4358.23', width=5)

width < len (16) in center_string(outstring, ' 9.4971(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255175(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4356.13', width=5)

width < len (16) in center_string(outstring, ' 9.4879(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.23', width=5)

width < len (16) in center_string(outstring, ' 9.4753(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926193(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.59', width=5)

width < len (16) in center_string(outstring, ' 9.4595(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929016(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.61', width=5)

width < len (16) in center_string(outstring, ' 7.6699(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931824(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3910.51', width=5)

width < len (16) in center_string(outstring, ' 7.6460(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934647(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4334.20', width=5)

width < len (16) in center_string(outstring, ' 9.3927(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4327.62', width=5)

width < len (16) in center_string(outstring, ' 9.3642(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940277(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(9.9)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM8.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.20_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '988.47', width=5)

width < len (9) in center_string(outstring, '488633.47', width=6)

width < len (12) in center_string(outstring, '602344014.42', width=8)

width < len (7) in center_string(outstring, '3261.93', width=6)

width < len (7) in center_string(outstring, '4410.43', width=5)

width < len (16) in center_string(outstring, ' 9.7260(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253911(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.09', width=5)

width < len (16) in center_string(outstring, ' 9.7112(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4402.98', width=5)

width < len (16) in center_string(outstring, ' 9.6931(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.17', width=5)

width < len (16) in center_string(outstring, ' 9.6720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927460(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.66', width=5)

width < len (16) in center_string(outstring, ' 9.6478(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.47', width=5)

width < len (16) in center_string(outstring, ' 9.6206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3938.72', width=5)

width < len (16) in center_string(outstring, ' 7.7568(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4372.07', width=5)

width < len (16) in center_string(outstring, ' 9.5575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.270 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM68.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   4%Amount of optimization complete =   8%Amount of optimization complete =  13%Amount of optimization complete =  17%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  30%Amount of optimization complete =  34%Amount of optimization complete =  39%Amount of optimization complete =  43%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  56%Amount of optimization complete =  60%Amount of optimization complete =  65%Amount of optimization complete =  69%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  82%Amount of optimization complete =  86%Amount of optimization complete =  91%Amount of optimization complete =  95%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.69', width=5)

width < len (8) in center_string(outstring, '61926.34', width=6)

width < len (12) in center_string(outstring, '607548854.65', width=8)

width < len (7) in center_string(outstring, '1853.71', width=6)

width < len (7) in center_string(outstring, '4370.20', width=5)

width < len (16) in center_string(outstring, ' 9.5493(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4368.02', width=5)

width < len (16) in center_string(outstring, ' 9.5398(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4365.05', width=5)

width < len (16) in center_string(outstring, ' 9.5268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027317(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4361.34', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.89', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045528(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.72', width=5)

width < len (16) in center_string(outstring, ' 9.4687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.82', width=5)

width < len (16) in center_string(outstring, ' 9.4431(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063739(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.21', width=5)

width < len (16) in center_string(outstring, ' 9.4144(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072845(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(9.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.340 sec, System: 0.000 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM28.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1021.79', width=5)

width < len (9) in center_string(outstring, '522123.75', width=6)

width < len (12) in center_string(outstring, '604720754.94', width=8)

width < len (7) in center_string(outstring, '2927.31', width=6)

width < len (7) in center_string(outstring, '3984.07', width=5)

width < len (16) in center_string(outstring, ' 7.9364(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252674(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4415.05', width=5)

width < len (16) in center_string(outstring, ' 9.7463(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920624(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4410.82', width=5)

width < len (16) in center_string(outstring, ' 9.7277(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923187(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4405.90', width=5)

width < len (16) in center_string(outstring, ' 9.7060(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925735(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4400.32', width=5)

width < len (16) in center_string(outstring, ' 9.6814(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4394.07', width=5)

width < len (16) in center_string(outstring, ' 9.6539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4387.17', width=5)

width < len (16) in center_string(outstring, ' 9.6236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933426(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4379.62', width=5)

width < len (16) in center_string(outstring, ' 9.5905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.230 sec (User: 0.230 sec, System: 0.000 sec)
  Total time: 0.240 sec

Final candidates in binary format are in 'Sband_DM74.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.00_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  15%Amount of optimization complete =  23%Amount of optimization complete =  30%Amount of optimization complete =  38%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  61%Amount of optimization complete =  69%Amount of optimization complete =  76%Amount of optimization complete =  84%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.94', width=5)

width < len (9) in center_string(outstring, '529454.94', width=6)

width < len (12) in center_string(outstring, '605771944.55', width=8)

width < len (7) in center_string(outstring, '2704.54', width=6)

width < len (7) in center_string(outstring, '4424.64', width=5)

width < len (16) in center_string(outstring, ' 9.7887(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253984(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3983.13', width=5)

width < len (16) in center_string(outstring, ' 7.9327(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.10', width=5)

width < len (16) in center_string(outstring, ' 9.7510(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4410.64', width=5)

width < len (16) in center_string(outstring, ' 9.7269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.40', width=5)

width < len (16) in center_string(outstring, ' 9.6994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4397.41', width=5)

width < len (16) in center_string(outstring, ' 9.6686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.68', width=5)

width < len (16) in center_string(outstring, ' 9.6347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.22', width=5)

width < len (16) in center_string(outstring, ' 9.5975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939087(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.190 sec (User: 0.190 sec, System: 0.000 sec)
  Total time: 0.200 sec

Final candidates in binary format are in 'Sband_DM79.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '586.25', width=5)

width < len (9) in center_string(outstring, '171936.78', width=6)

width < len (12) in center_string(outstring, '595704584.76', width=8)

width < len (7) in center_string(outstring, '3717.57', width=6)

width < len (7) in center_string(outstring, '3952.07', width=5)

width < len (16) in center_string(outstring, ' 7.8094(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.003(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254229(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4379.47', width=5)

width < len (16) in center_string(outstring, ' 9.5899(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018006(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.32', width=5)

width < len (16) in center_string(outstring, ' 9.5761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.44', width=5)

width < len (16) in center_string(outstring, ' 9.5591(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036012(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.83', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4362.50', width=5)

width < len (16) in center_string(outstring, ' 9.5157(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.45', width=5)

width < len (16) in center_string(outstring, ' 9.4894(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936234(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.71', width=5)

width < len (16) in center_string(outstring, ' 9.4600(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072025(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.290 sec, System: 0.000 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM39.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   7%Amount of optimization complete =  14%Amount of optimization complete =  21%Amount of optimization complete =  28%Amount of optimization complete =  35%Amount of optimization complete =  42%Amount of optimization complete =  50%Amount of optimization complete =  57%Amount of optimization complete =  64%Amount of optimization complete =  71%Amount of optimization complete =  78%Amount of optimization complete =  85%Amount of optimization complete =  92%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '831.44', width=5)

width < len (9) in center_string(outstring, '345743.84', width=6)

width < len (12) in center_string(outstring, '600677041.58', width=8)

width < len (7) in center_string(outstring, '3075.36', width=6)

width < len (7) in center_string(outstring, '4403.16', width=5)

width < len (16) in center_string(outstring, ' 9.6939(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253651(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.20', width=5)

width < len (16) in center_string(outstring, ' 9.6809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4396.47', width=5)

width < len (16) in center_string(outstring, ' 9.6645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4392.02', width=5)

width < len (16) in center_string(outstring, ' 9.6449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.87', width=5)

width < len (16) in center_string(outstring, ' 9.6223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.02', width=5)

width < len (16) in center_string(outstring, ' 9.5967(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.53', width=5)

width < len (16) in center_string(outstring, ' 7.7363(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4367.26', width=5)

width < len (16) in center_string(outstring, ' 9.5365(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM56.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   6%Amount of optimization complete =  13%Amount of optimization complete =  20%Amount of optimization complete =  26%Amount of optimization complete =  33%Amount of optimization complete =  40%Amount of optimization complete =  46%Amount of optimization complete =  53%Amount of optimization complete =  60%Amount of optimization complete =  66%Amount of optimization complete =  73%Amount of optimization complete =  80%Amount of optimization complete =  86%Amount of optimization complete =  93%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '983.21', width=5)

width < len (9) in center_string(outstring, '483453.97', width=6)

width < len (12) in center_string(outstring, '602579099.19', width=8)

width < len (7) in center_string(outstring, '3271.25', width=6)

width < len (7) in center_string(outstring, '4409.16', width=5)

width < len (16) in center_string(outstring, ' 9.7203(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251596(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3971.66', width=5)

width < len (16) in center_string(outstring, ' 7.8870(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.919495(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4402.21', width=5)

width < len (16) in center_string(outstring, ' 9.6897(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921936(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4397.78', width=5)

width < len (16) in center_string(outstring, ' 9.6702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924393(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4392.73', width=5)

width < len (16) in center_string(outstring, ' 9.6480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926849(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4387.07', width=5)

width < len (16) in center_string(outstring, ' 9.6232(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4380.81', width=5)

width < len (16) in center_string(outstring, ' 9.5958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4373.96', width=5)

width < len (16) in center_string(outstring, ' 9.5658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.210 sec (User: 0.210 sec, System: 0.000 sec)
  Total time: 0.220 sec

Final candidates in binary format are in 'Sband_DM67.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.40_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   9%Amount of optimization complete =  18%Amount of optimization complete =  27%Amount of optimization complete =  36%Amount of optimization complete =  45%Amount of optimization complete =  54%Amount of optimization complete =  63%Amount of optimization complete =  72%Amount of optimization complete =  81%Amount of optimization complete =  90%Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1035.23', width=5)

width < len (9) in center_string(outstring, '535946.94', width=6)

width < len (12) in center_string(outstring, '605255798.94', width=8)

width < len (7) in center_string(outstring, '2755.85', width=6)

width < len (7) in center_string(outstring, '4422.88', width=5)

width < len (16) in center_string(outstring, ' 9.7809(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254090(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3981.62', width=5)

width < len (16) in center_string(outstring, ' 7.9266(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.26', width=5)

width < len (16) in center_string(outstring, ' 9.7429(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4408.76', width=5)

width < len (16) in center_string(outstring, ' 9.7186(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927917(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.49', width=5)

width < len (16) in center_string(outstring, ' 9.6910(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930740(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4395.47', width=5)

width < len (16) in center_string(outstring, ' 9.6601(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4387.71', width=5)

width < len (16) in center_string(outstring, ' 9.6260(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.21', width=5)

width < len (16) in center_string(outstring, ' 9.5888(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.150 sec (User: 0.150 sec, System: 0.000 sec)
  Total time: 0.160 sec

Final candidates in binary format are in 'Sband_DM78.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.80_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  11%Amount of optimization complete =  16%Amount of optimization complete =  22%Amount of optimization complete =  27%Amount of optimization complete =  33%Amount of optimization complete =  38%Amount of optimization complete =  44%Amount of optimization complete =  50%Amount of optimization complete =  55%Amount of optimization complete =  61%Amount of optimization complete =  66%Amount of optimization complete =  72%Amount of optimization complete =  77%Amount of optimization complete =  83%Amount of optimization complete =  88%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '554.98', width=5)

width < len (9) in center_string(outstring, '154090.31', width=6)

width < len (12) in center_string(outstring, '595412371.76', width=8)

width < len (7) in center_string(outstring, '3553.97', width=6)

width < len (7) in center_string(outstring, '4381.70', width=5)

width < len (16) in center_string(outstring, ' 9.5996(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.009(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252991(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.32', width=5)

width < len (16) in center_string(outstring, ' 9.5892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018018(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.15', width=5)

width < len (16) in center_string(outstring, ' 9.5754(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.26', width=5)

width < len (16) in center_string(outstring, ' 9.5583(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036036(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926697(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.63', width=5)

width < len (16) in center_string(outstring, ' 9.5381(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045044(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929474(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3925.53', width=5)

width < len (16) in center_string(outstring, ' 7.7049(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054053(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932236(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4356.24', width=5)

width < len (16) in center_string(outstring, ' 9.4884(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063062(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.48', width=5)

width < len (16) in center_string(outstring, ' 9.4590(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.260 sec, System: 0.000 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM38.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.60_ACCEL_0.txtcand'.

Amount of search complete =   0%Amount of search complete =   1%Amount of search complete =   3%Amount of search complete =   4%Amount of search complete =   6%Amount of search complete =   7%Amount of search complete =   9%Amount of search complete =  10%Amount of search complete =  12%Amount of search complete =  13%Amount of search complete =  15%Amount of search complete =  16%Amount of search complete =  18%Amount of search complete =  19%Amount of search complete =  21%Amount of search complete =  22%Amount of search complete =  24%Amount of search complete =  25%Amount of search complete =  27%Amount of search complete =  28%Amount of search complete =  30%Amount of search complete =  31%Amount of search complete =  33%Amount of search complete =  34%Amount of search complete =  36%Amount of search complete =  37%Amount of search complete =  39%Amount of search complete =  40%Amount of search complete =  42%Amount of search complete =  43%Amount of search complete =  45%Amount of search complete =  46%Amount of search complete =  48%Amount of search complete =  49%Amount of search complete =  51%Amount of search complete =  53%Amount of search complete =  54%Amount of search complete =  56%Amount of search complete =  57%Amount of search complete =  59%Amount of search complete =  60%Amount of search complete =  62%Amount of search complete =  63%Amount of search complete =  65%Amount of search complete =  66%Amount of search complete =  68%Amount of search complete =  69%Amount of search complete =  71%Amount of search complete =  72%Amount of search complete =  74%Amount of search complete =  75%Amount of search complete =  77%Amount of search complete =  78%Amount of search complete =  80%Amount of search complete =  81%Amount of search complete =  83%Amount of search complete =  84%Amount of search complete =  86%Amount of search complete =  87%Amount of search complete =  89%Amount of search complete =  90%Amount of search complete =  92%Amount of search complete =  93%Amount of search complete =  95%Amount of search complete =  96%Amount of search complete =  98%Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.
Amount of optimization complete =   0%Amount of optimization complete =   5%Amount of optimization complete =  10%Amount of optimization complete =  15%Amount of optimization complete =  21%Amount of optimization complete =  26%Amount of optimization complete =  31%Amount of optimization complete =  36%Amount of optimization complete =  42%Amount of optimization complete =  47%Amount of optimization complete =  52%Amount of optimization complete =  57%Amount of optimization complete =  63%Amount of optimization complete =  68%Amount of optimization complete =  73%Amount of optimization complete =  78%Amount of optimization complete =  84%Amount of optimization complete =  89%Amount of optimization complete =  94%Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '732.01', width=5)

width < len (9) in center_string(outstring, '268016.16', width=6)

width < len (12) in center_string(outstring, '598490798.25', width=8)

width < len (7) in center_string(outstring, '3043.30', width=6)

width < len (7) in center_string(outstring, '4393.72', width=5)

width < len (16) in center_string(outstring, ' 9.6524(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.897(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254237(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.06', width=5)

width < len (16) in center_string(outstring, ' 9.6407(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017795(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.61', width=5)

width < len (16) in center_string(outstring, ' 9.6256(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3947.08', width=5)

width < len (16) in center_string(outstring, ' 7.7897(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035589(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927887(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.56', width=5)

width < len (16) in center_string(outstring, ' 9.5859(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.98', width=5)

width < len (16) in center_string(outstring, ' 9.5615(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.69', width=5)

width < len (16) in center_string(outstring, ' 9.5340(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.71', width=5)

width < len (16) in center_string(outstring, ' 9.5035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.4(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(9.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.330 sec, System: 0.000 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM49.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.60_ACCEL_0'.
